<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zcdll&#39;s Blog</title>
  
  <subtitle>Be Happy</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-04T07:29:12.112Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zcdll</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入浅出 IP</title>
    <link href="http://yoursite.com/2020/08/04/hack-ips/"/>
    <id>http://yoursite.com/2020/08/04/hack-ips/</id>
    <published>2020-08-04T07:07:56.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>和 IP 相关的资料</p><a id="more"></a><h1 id="查询-My-IP-服务"><a href="#查询-My-IP-服务" class="headerlink" title="查询 My-IP 服务"></a>查询 My-IP 服务</h1><h2 id="Curl"><a href="#Curl" class="headerlink" title="Curl"></a>Curl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">curl ifconfig. io  <span class="comment"># 返回值只有 IP</span></span><br><span class="line"></span><br><span class="line">curl ip.fm  <span class="comment"># IP: xxxx 来自: 中国 北京 电信</span></span><br><span class="line"></span><br><span class="line">curl cip.cc  <span class="comment"># 多个数据</span></span><br><span class="line"></span><br><span class="line">curl myip.ipip.net  <span class="comment"># 当前 IP：117.107.136.164  来自于：中国 北京 北京  电信</span></span><br><span class="line"></span><br><span class="line">curl ip.sb  <span class="comment"># 返回值只有 IP</span></span><br><span class="line"></span><br><span class="line">curl ifconfig.co/json  <span class="comment"># 可以以 JSON 形式返回</span></span><br><span class="line"></span><br><span class="line">curl ipinfo.io  <span class="comment"># JSON</span></span><br><span class="line"></span><br><span class="line">curl https://api.myip.com</span><br><span class="line"></span><br><span class="line">curl checkip.amazonaws.com  <span class="comment"># 这个很稳</span></span><br></pre></td></tr></table></figure><h2 id="网页版"><a href="#网页版" class="headerlink" title="网页版"></a>网页版</h2><ol><li><a href="https://ip.cn/" target="_blank" rel="noopener">https://ip.cn/</a></li><li><a href="https://ip.fm/" target="_blank" rel="noopener">https://ip.fm/</a></li><li><a href="http://ip.coderbusy.com/" target="_blank" rel="noopener">http://ip.coderbusy.com/</a></li><li><a href="https://www.baidu.com/s?ie=UTF-8&amp;wd=ip" target="_blank" rel="noopener">https://www.baidu.com/s?ie=UTF-8&amp;wd=ip</a></li><li><a href="https://www.cip.cc/" target="_blank" rel="noopener">https://www.cip.cc/</a></li><li><a href="https://www.ipip.net/ip.html" target="_blank" rel="noopener">https://www.ipip.net/ip.html</a></li><li><a href="https://ifconfig.co/" target="_blank" rel="noopener">https://ifconfig.co/</a></li><li><a href="https://ipinfo.io/" target="_blank" rel="noopener">https://ipinfo.io/</a>   这个网站不错</li><li><a href="https://phus.lu/ip" target="_blank" rel="noopener">https://phus.lu/ip</a></li><li><a href="https://www.myip.com/" target="_blank" rel="noopener">https://www.myip.com/</a>  这个网站不错</li><li><a href="https://ip.sb/" target="_blank" rel="noopener">https://ip.sb/</a>  API 丰富</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;和 IP 相关的资料&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>我的 JavaScript Helper 函数库</title>
    <link href="http://yoursite.com/2020/07/31/js-helper/"/>
    <id>http://yoursite.com/2020/07/31/js-helper/</id>
    <published>2020-07-31T09:19:32.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>我的 JavaScript Helper 函数库</p><a id="more"></a><ol><li><p>解决移动端 300ms touch 延迟问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'touchstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.touches.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      event.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> lastTouchEnd = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'touchend'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> now = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line">    <span class="keyword">if</span> (now - lastTouchEnd &lt;= <span class="number">300</span>) &#123;</span><br><span class="line">      event.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line">    lastTouchEnd = now;</span><br><span class="line">  &#125;, <span class="literal">false</span>);</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'gesturestart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><ol><li><a href="https://juejin.im/post/6844903637173403662" target="_blank" rel="noopener">完美解决ios10及以上Safari无法禁止缩放的问题</a></li><li><a href="https://github.com/ftlabs/fastclick" target="_blank" rel="noopener">fastclick</a></li><li><a href="https://developers.google.com/web/updates/2013/12/300ms-tap-delay-gone-away" target="_blank" rel="noopener">300ms tap delay, gone away</a></li><li><a href="https://thx.github.io/mobile/300ms-click-delay" target="_blank" rel="noopener">300 毫秒点击延迟的来龙去脉</a></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的 JavaScript Helper 函数库&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript 实现字符串匹配的KMP算法</title>
    <link href="http://yoursite.com/2020/07/26/js-kmp/"/>
    <id>http://yoursite.com/2020/07/26/js-kmp/</id>
    <published>2020-07-26T01:34:47.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>如题，尝试用 JavaScript 实现字符串匹配的KMP算法</p><a id="more"></a><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ol><li><a href="http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html" target="_blank" rel="noopener">字符串匹配的KMP算法——阮一峰</a></li><li><a href="http://jakeboxer.com/blog/2009/12/13/the-knuth-morris-pratt-algorithm-in-my-own-words/" target="_blank" rel="noopener">The Knuth-Morris-Pratt Algorithm in my own words</a></li><li><a href="[https://www.wrzzing.cn/2019/04/09/%E7%AB%99%E5%9C%A8DFA%E8%A7%92%E5%BA%A6%E7%9C%8BKMP%E7%AE%97%E6%B3%95/](https://www.wrzzing.cn/2019/04/09/站在DFA角度看KMP算法/)">站在DFA角度看KMP算法</a></li><li><a href="https://leetcode-cn.com/problems/implement-strstr/solution/kmp-suan-fa-xiang-jie-by-labuladong/" target="_blank" rel="noopener">KMP 算法详解</a></li><li><a href="https://www.jianshu.com/p/18410598c061" target="_blank" rel="noopener">算法笔记-KMP算法</a></li><li><a href="https://juejin.im/post/5eb7b5656fb9a0437e0e9596" target="_blank" rel="noopener">KMP 算法的两种实现</a>  这个好</li><li><a href="https://leetcode-cn.com/circle/article/yCI2iS/" target="_blank" rel="noopener">【算法ABC】KMP 算法</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如题，尝试用 JavaScript 实现字符串匹配的KMP算法&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="KMP" scheme="http://yoursite.com/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>IEEE 754 双精度浮点数解码</title>
    <link href="http://yoursite.com/2020/07/12/double-float/"/>
    <id>http://yoursite.com/2020/07/12/double-float/</id>
    <published>2020-07-12T13:23:54.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ol><li><a href="https://www.binaryconvert.com/result_double.html" target="_blank" rel="noopener">https://www.binaryconvert.com/</a></li><li><a href="https://blog.csdn.net/zhengyanan815/article/details/78550073" target="_blank" rel="noopener">十进制浮点数转成二进制(IEEE 754 在线计算器)</a></li><li><a href="https://blog.csdn.net/abcdu1/article/details/75095781" target="_blank" rel="noopener">IEEE754标准 单精度(32位)/双精度(64位)浮点数解码</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h2 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.binaryconvert.com/result
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>string2UTF-8</title>
    <link href="http://yoursite.com/2020/07/11/string2UTF-8/"/>
    <id>http://yoursite.com/2020/07/11/string2UTF-8/</id>
    <published>2020-07-11T23:48:40.000Z</published>
    <updated>2020-08-04T07:29:12.116Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>codePointAt 返回的是 Unicode 编码</p><p>charCodeAt 返回的是 UTF-16 编码</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ol><li><a href="http://www.fileformat.info/info/unicode/" target="_blank" rel="noopener">fileformat.info-Unicode</a></li><li><a href="https://home.unicode.org/" target="_blank" rel="noopener">Unicode 官网</a></li><li><a href="https://github.com/mathiasbynens/String.prototype.at" target="_blank" rel="noopener"><code>String.prototype.at</code></a></li><li><a href="https://stackoverflow.com/questions/36527642/difference-between-codepointat-and-charcodeat" target="_blank" rel="noopener">Difference between codePointAt and charCodeAt</a></li><li><a href="https://segmentfault.com/a/1190000005794963" target="_blank" rel="noopener">通过javascript进行UTF-8编码</a></li><li><a href="https://www.ruanyifeng.com/blog/2014/12/unicode.html" target="_blank" rel="noopener">Unicode与JavaScript详解</a></li><li><a href="https://unicode.org/emoji/charts/full-emoji-list.html" target="_blank" rel="noopener">Full Emoji List, v13.0</a></li><li><a href="https://apps.timwhitlock.info/emoji/tables/unicode" target="_blank" rel="noopener">Emoji Unicode Tables</a> 可以看对应的 UTF-8 编码</li><li><a href="https://www.jianshu.com/p/64ec0f6b6245" target="_blank" rel="noopener">从Emoji的限制到Unicode编码</a></li><li><a href="https://zhuanlan.zhihu.com/p/31853537" target="_blank" rel="noopener">（译）使用 ES6 遍历 Emoji 字符</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;codePointAt 返回的是 Unicode 编码&lt;/p&gt;
&lt;p&gt;charCodeAt 返回的是 UTF-16 编码&lt;/p&gt;
&lt;h2 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>符号转义</title>
    <link href="http://yoursite.com/2020/06/20/symbol-escape/"/>
    <id>http://yoursite.com/2020/06/20/symbol-escape/</id>
    <published>2020-06-20T08:25:06.000Z</published>
    <updated>2020-08-04T07:29:12.116Z</updated>
    
    <content type="html"><![CDATA[<p>HTML 和 JavaScript 都可以转义字符。</p><a id="more"></a><p>一般是出于传输的需要，或者安全性的需要，以及在正则匹配中，需要转义字符。</p><p>但是，转义的方式不同，JavaScript 中一般是通过 <strong>反斜杠</strong> 来转义，例如 <code>const a = &#39;\&#39;&#39;</code>。</p><p>HTML 中有 <a href="https://html.spec.whatwg.org/multipage/named-characters.html" target="_blank" rel="noopener">named-characters</a> 的定义，里面列出了所有的符号，以及对应的 entity name 和 entity number，其中数字是16进制表示。</p><p>这里是一份整理版的 <a href="https://www.freeformatter.com/html-entities.html" target="_blank" rel="noopener">HTML Entity List</a></p><p>其中常用的五个如下</p><table><thead><tr><th align="left">Character</th><th align="left">Entity Number</th><th align="left">Entity Name</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">“</td><td align="left"><code>&amp;#34;</code></td><td align="left"><code>&amp;quot;</code></td><td align="left">quotation mark</td></tr><tr><td align="left">‘</td><td align="left"><code>&amp;#39;</code></td><td align="left"><code>&amp;apos;</code>(does not work in IE)</td><td align="left">apostrophe</td></tr><tr><td align="left">&amp;</td><td align="left"><code>&amp;#38;</code></td><td align="left"><code>&amp;amp;</code></td><td align="left">ampersand</td></tr><tr><td align="left">&lt;</td><td align="left"><code>&amp;#60;</code></td><td align="left"><code>&amp;lt;</code></td><td align="left">less-than</td></tr><tr><td align="left">&gt;</td><td align="left"><code>&amp;#62;</code></td><td align="left"><code>&amp;gt;</code></td><td align="left">greater-than</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML 和 JavaScript 都可以转义字符。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>查过的 MDN 文档</title>
    <link href="http://yoursite.com/2020/06/15/mdn-note/"/>
    <id>http://yoursite.com/2020/06/15/mdn-note/</id>
    <published>2020-06-15T09:24:13.000Z</published>
    <updated>2020-08-04T07:29:12.116Z</updated>
    
    <content type="html"><![CDATA[<p>记录下查过的 MDN 文档，以防看一眼就忘了。</p><a id="more"></a><h2 id="2020年6月15日"><a href="#2020年6月15日" class="headerlink" title="2020年6月15日"></a>2020年6月15日</h2><h3 id="Array-map"><a href="#Array-map" class="headerlink" title="Array.map()"></a><strong><code>Array.map()</code></strong></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener">地址</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> new_array = arr.map(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">currentValue[, index[, array]]</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// Return element for new_array </span></span><br><span class="line">&#125;[, thisArg])</span><br></pre></td></tr></table></figure><blockquote><p><code>callback</code> 函数只会在 <strong>有值的索引上</strong> 被调用；那些从来没被赋过值或者使用 <code>delete</code> 删除的索引则不会被调用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aaa = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aaa, <span class="string">"---aaa"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(aaa.length, <span class="string">"---aaa.length"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(aaa[<span class="number">0</span>], <span class="string">"---aaa[0]"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bbb = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>).map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, <span class="string">"---index"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这么直接执行，输出为空，也就是没有输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ccc = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">ccc[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ccc, <span class="string">"---ccc"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ccc.length, <span class="string">"---ccc.length"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ddd = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">ddd[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ddd, <span class="string">"---ddd"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> eee = ddd.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, <span class="string">"---index"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> item;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(eee, <span class="string">"---eee"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(eee.length, <span class="string">"---eee.length"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(aaa), <span class="string">"---JSON.stringify(aaa)"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(aaa)), <span class="string">"---JSON.parse(JSON.stringify(aaa))"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是输出</span></span><br><span class="line"><span class="comment">// [ &lt;5 empty items&gt; ] ---aaa</span></span><br><span class="line"><span class="comment">// 5 ---aaa.length</span></span><br><span class="line"><span class="comment">// undefined ---aaa[0]</span></span><br><span class="line"><span class="comment">// [ 0, &lt;4 empty items&gt; ] ---ccc</span></span><br><span class="line"><span class="comment">// 5 ---ccc.length</span></span><br><span class="line"><span class="comment">// [ &lt;1 empty item&gt;, 1, &lt;3 empty items&gt; ] ---ddd</span></span><br><span class="line"><span class="comment">// 1 ---index</span></span><br><span class="line"><span class="comment">// [ &lt;1 empty item&gt;, 1, &lt;3 empty items&gt; ] ---eee</span></span><br><span class="line"><span class="comment">// 5 ---eee.length</span></span><br><span class="line"><span class="comment">// [null,null,null,null,null] ---JSON.stringify(aaa)</span></span><br><span class="line"><span class="comment">// [ null, null, null, null, null ] ---JSON.parse(JSON.stringify(aaa))</span></span><br></pre></td></tr></table></figure><p>尝试的结果：</p><ol><li><code>console.log</code> 输出为 <code>empty</code> 的数组项，通过索引值输出时为 <code>undefined</code></li><li>打印 <strong>length</strong> 的时候正常，<code>empty</code> 也算</li><li><code>JSON.stringify</code> 会把 <code>undefined</code> 变为 <code>null</code></li><li>通过 <strong>map</strong> 的方式生成的新数组长度和原数组相同，即使原数组全部为 empty，以及无法修改值，参考 <code>eee</code></li></ol><h3 id="FileReader-readAsArrayBuffer"><a href="#FileReader-readAsArrayBuffer" class="headerlink" title="FileReader.readAsArrayBuffer()"></a><code>FileReader.readAsArrayBuffer()</code></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader/readAsArrayBuffer" target="_blank" rel="noopener">地址</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fileReader = <span class="keyword">new</span> FileReader();</span><br><span class="line"></span><br><span class="line">fileReader.readAsArrayBuffer(file); <span class="comment">// file or blob</span></span><br></pre></td></tr></table></figure><p>还有一个类似的 <code>FileReader.readAsBinaryString()</code>，已经被废弃。</p><h2 id="2020年6月24日"><a href="#2020年6月24日" class="headerlink" title="2020年6月24日"></a>2020年6月24日</h2><h3 id="TypedArray"><a href="#TypedArray" class="headerlink" title="TypedArray"></a>TypedArray</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noopener">链接</a></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li><p>一个<strong>类型化数组</strong>（<strong>TypedArray）</strong>对象描述了一个底层的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noopener">二进制数据缓冲区</a>（binary data buffer）的一个类数组视图（view）。</p></li><li><p>会根据传入的长度，生成一个数组，数组中的每一项代表 是 <strong>什么符号</strong> <strong>什么进制</strong> 的 <strong>什么数</strong>，就是那个 <strong>选定的子类型</strong>，有符号 or 无符号？二进制 or 十六进制？整数 or 浮点数？</p><blockquote><p> 也就是说，数组中的每一项是一个 <strong>数字</strong></p><ol><li>我们看到的时候都是 <strong>十进制表示</strong></li><li>但内存中存储的时候，是 <strong>选定的子类型</strong></li></ol></blockquote></li><li><p>ES6 之前没有名为 <code>TypedArray</code> 的全局属性，也没有一个名为 <code>TypedArray</code> 的构造函数。</p></li><li><p>ES6 中定义了一个 <em><code>TypeArray</code></em> 构造器作为所有的类型化数组构造器（<code>Int8Array</code>, <code>Int16Array</code> 等）的原型（<code>[[Prototype]]</code>）。</p></li><li><p>(这里使用 <code>%TypedArray%</code> 猜测是因为，TypedArray 并不存在，无法直接使用，需要替换成 具体 的某一个子类型。类似于模板字符串替换的意思。)<br>但是该构造器并不会直接暴露出来：即没有全局的 <code>%TypedArray%</code> 和 <code>TypeArray</code> 属性，只能通过使用类似于 <code>Object.getPrototypeOf(Int8Array.prototype</code>) 的方式直接访问。所有的类型化数组构造器都会继承 <code>%TypeArray%</code> 构造器函数的公共属性和方法。此外，所有的类型化数组的原型（如 <code>Int8Array.prototype</code>）都以 <code>%TypeArray%.prototype</code> 作为原型。<br><code>%TypedArray%</code> 构造器自身不是特别有用，直接调用或使用 <code>new</code> 表达式实例化都会抛出一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" target="_blank" rel="noopener"><code>TypeError</code></a> 异常，除非在支持子类化（subclassing）创建对象的 JS 引擎下运行。</p></li></ol><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面代码是语法格式，不能直接运行，</span></span><br><span class="line"><span class="comment">// TypedArray 关键字需要替换为底部列出的构造函数。</span></span><br><span class="line"><span class="keyword">new</span> TypedArray(); <span class="comment">// ES2017中新增</span></span><br><span class="line"><span class="keyword">new</span> TypedArray(length); </span><br><span class="line"><span class="keyword">new</span> TypedArray(typedArray); </span><br><span class="line"><span class="keyword">new</span> TypedArray(object); </span><br><span class="line"><span class="keyword">new</span> TypedArray(buffer [, byteOffset [, length]]); </span><br><span class="line"></span><br><span class="line"><span class="comment">// TypedArray 指的是以下的其中之一： </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Int8Array</span>(); </span><br><span class="line"><span class="built_in">Uint8Array</span>(); </span><br><span class="line"><span class="built_in">Uint8ClampedArray</span>();</span><br><span class="line"><span class="built_in">Int16Array</span>(); </span><br><span class="line"><span class="built_in">Uint16Array</span>();</span><br><span class="line"><span class="built_in">Int32Array</span>(); </span><br><span class="line"><span class="built_in">Uint32Array</span>(); </span><br><span class="line"><span class="built_in">Float32Array</span>(); </span><br><span class="line"><span class="built_in">Float64Array</span>();</span><br></pre></td></tr></table></figure><h4 id="TypedArray-对象"><a href="#TypedArray-对象" class="headerlink" title="TypedArray 对象"></a>TypedArray 对象</h4><table><thead><tr><th align="left">类型</th><th align="left">单个元素值的范围</th><th align="left">大小(bytes)</th><th align="left">描述</th><th align="left">Web IDL 类型</th><th align="left">C 语言中的等价类型</th></tr></thead><tbody><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Int8Array" target="_blank" rel="noopener"><code>Int8Array</code></a></td><td align="left"><code>-128</code> to <code>127</code></td><td align="left">1</td><td align="left">8 位二进制有符号整数</td><td align="left"><code>byte</code></td><td align="left"><code>int8_t</code></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array" target="_blank" rel="noopener"><code>Uint8Array</code></a></td><td align="left"><code>0</code> to <code>255</code></td><td align="left">1</td><td align="left">8 位无符号整数（超出范围后从另一边界循环）</td><td align="left"><code>octet</code></td><td align="left"><code>uint8_t</code></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray" target="_blank" rel="noopener"><code>Uint8ClampedArray</code></a></td><td align="left"><code>0</code> to <code>255</code></td><td align="left">1</td><td align="left">8 位无符号整数（超出范围后为边界值）</td><td align="left"><code>octet</code></td><td align="left"><code>uint8_t</code></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Int16Array" target="_blank" rel="noopener"><code>Int16Array</code></a></td><td align="left"><code>-32768</code> to <code>32767</code></td><td align="left">2</td><td align="left">16 位二进制有符号整数</td><td align="left"><code>short</code></td><td align="left"><code>int16_t</code></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Uint16Array" target="_blank" rel="noopener"><code>Uint16Array</code></a></td><td align="left"><code>0</code> to <code>65535</code></td><td align="left">2</td><td align="left">16 位无符号整数</td><td align="left"><code>unsigned short</code></td><td align="left"><code>uint16_t</code></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Int32Array" target="_blank" rel="noopener"><code>Int32Array</code></a></td><td align="left"><code>-2147483648</code> to <code>2147483647</code></td><td align="left">4</td><td align="left">32 位二进制有符号整数</td><td align="left"><code>long</code></td><td align="left"><code>int32_t</code></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array" target="_blank" rel="noopener"><code>Uint32Array</code></a></td><td align="left"><code>0</code> to <code>4294967295</code></td><td align="left">4</td><td align="left">32 位无符号整数</td><td align="left"><code>unsigned long</code></td><td align="left"><code>uint32_t</code></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Float32Array" target="_blank" rel="noopener"><code>Float32Array</code></a></td><td align="left">$1.2×10^{-38}$ to $3.4×10^{38}$</td><td align="left">4</td><td align="left">32 位 IEEE 浮点数（7 位有效数字，如 <code>1.1234567</code>）</td><td align="left"><code>unrestricted float</code></td><td align="left"><code>float</code></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Float64Array" target="_blank" rel="noopener"><code>Float64Array</code></a></td><td align="left">$5.0×10^{-324 }$ to $1.8×10^{308}$</td><td align="left">8</td><td align="left">64 位 IEEE 浮点数（16 有效数字，如 <code>1.123...15</code>)</td><td align="left"><code>unrestricted double</code></td><td align="left"><code>double</code></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array" target="_blank" rel="noopener"><code>BigInt64Array</code></a></td><td align="left">$-2^{63}$ to $2^{63}-1$</td><td align="left">8</td><td align="left">64 位二进制有符号整数</td><td align="left"><code>bigint</code></td><td align="left"><code>int64_t (signed long long)</code></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array" target="_blank" rel="noopener"><code>BigUint64Array</code></a></td><td align="left">0 to $2^{64}-1$</td><td align="left">8</td><td align="left">64 位无符号整数</td><td align="left"><code>bigint</code></td><td align="left"><code>uint64_t (unsigned long long)</code></td></tr></tbody></table><h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer" target="_blank" rel="noopener">链接</a></p><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p><code>buffer</code> 属性是一个访问器属性，它的 set 访问器函数是<code>undefined</code>，意思是你只能够读取这个属性。它的值在<em>TypedArray</em>构造时建立，不能被修改。<em>TypedArray</em>是这里的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects" target="_blank" rel="noopener">类型化数组</a>之一。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">var</span> uint16 = <span class="keyword">new</span> <span class="built_in">Uint16Array</span>(buffer);</span><br><span class="line">uint16.buffer; <span class="comment">// ArrayBuffer &#123; byteLength: 8 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Uint16Array</span>(<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">3</span>)) <span class="comment">// 报错如下</span></span><br><span class="line"><span class="comment">// VM471:1 Uncaught RangeError: byte length of Uint16Array should be a multiple of 2</span></span><br><span class="line"><span class="comment">//    at new Uint16Array (&lt;anonymous&gt;)</span></span><br><span class="line"><span class="comment">//    at &lt;anonymous&gt;:1:1</span></span><br></pre></td></tr></table></figure><p>所以，总结如下：</p><p><code>new Uint8Array(new ArrayBuffer(n))</code> 和<code>new Uint8Array(new ArrayBuffer(n))</code>，n 是 length，大于等于0就行</p><p><code>new Uint16Array(new ArrayBuffer(n))</code> 和<code>new Uint16Array(new ArrayBuffer(n))</code>，n 是 2 的倍数</p><p><code>new Uint32Array(new ArrayBuffer(n))</code> 和<code>new Uint32Array(new ArrayBuffer(n))</code>，n 是 4 的倍数</p><p><code>new Uint64Array(new ArrayBuffer(n))</code> 和<code>new Uint64Array(new ArrayBuffer(n))</code>，n 是 8 的倍数</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录下查过的 MDN 文档，以防看一眼就忘了。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>关于 WHATWG 和 W3C</title>
    <link href="http://yoursite.com/2020/06/12/whatwg-vs-w3c/"/>
    <id>http://yoursite.com/2020/06/12/whatwg-vs-w3c/</id>
    <published>2020-06-12T08:11:01.000Z</published>
    <updated>2020-08-04T07:29:12.116Z</updated>
    
    <content type="html"><![CDATA[<p>关于 <a href="https://whatwg.org/" target="_blank" rel="noopener">WHATWG</a> 和 <a href="https://www.w3.org/" target="_blank" rel="noopener">W3C</a></p><a id="more"></a><h2 id="WHATWG"><a href="#WHATWG" class="headerlink" title="WHATWG"></a>WHATWG</h2><p>Web Hypertext Application Technology Working Group，<strong>网页超文本应用技术工作小组</strong></p><p>WHATWG是针对<a href="https://zh.wikipedia.org/wiki/全球資訊網協會" target="_blank" rel="noopener">万维网联盟</a>（W3C）<a href="https://zh.wikipedia.org/wiki/網頁標準" target="_blank" rel="noopener">网页标准</a>的发展缓慢，以及W3C意图放弃HTML转而发展以<a href="https://zh.wikipedia.org/wiki/XML" target="_blank" rel="noopener">XML</a>为基础的技术而成立。WHATWG邮件列表公布于2004年6月4日，两天前，Mozilla─Opera联合立场文件在W3C成员所主办的W3C研讨会两天后被否决了。</p><p>2007年4月10日，Mozilla基金会、Apple公司、Opera软件公司建议W3C的新HTML工作组采用WHATWG的<a href="https://zh.wikipedia.org/wiki/HTML5" target="_blank" rel="noopener">HTML5</a>为工作的起点，并将新的HTML命名为“HTML5”。2007年5月9日，新的HTML工作组采纳了他们的建议。</p><p>在WHATWG，编辑者对规范有很大的控制权，但社群可以影响编辑者的决策。在一个案例中，编辑者伊恩·希克森提出更通用的<code>标签替换</code>标签，但社群不同意并且修改被还原。</p><p><strong>英文版</strong></p><h3 id="History"><a href="#History" class="headerlink" title="History"></a>History</h3><p>The WHATWG was formed in response to the slow development of <a href="https://en.wikipedia.org/wiki/World_Wide_Web_Consortium" target="_blank" rel="noopener">World Wide Web Consortium</a> (W3C) <a href="https://en.wikipedia.org/wiki/Web_standards" target="_blank" rel="noopener">Web standards</a> and W3C’s decision to abandon HTML in favor of <a href="https://en.wikipedia.org/wiki/XML" target="_blank" rel="noopener">XML</a>-based technologies. The WHATWG mailing list was announced on 4 June 2004, two days after the initiatives of a joint Opera–Mozilla position paper had been voted down by the W3C members at the W3C Workshop on Web Applications and Compound Documents.</p><p>On 10 April 2007, the Mozilla Foundation, Apple, and Opera Software proposed that the new HTML working group of the W3C adopt the WHATWG’s <a href="https://en.wikipedia.org/wiki/HTML5" target="_blank" rel="noopener">HTML5</a> as the starting point of its work and name its future deliverable as “HTML5” (though the WHATWG specification was later renamed <em>HTML Living Standard</em>). On 9 May 2007, the new HTML working group of the W3C resolved to do that. An <a href="https://en.wikipedia.org/wiki/Internet_Explorer" target="_blank" rel="noopener">Internet Explorer</a> platform architect from <a href="https://en.wikipedia.org/wiki/Microsoft" target="_blank" rel="noopener">Microsoft</a> was invited but did not join, citing the lack of a patent policy to ensure all specifications can be implemented on a <a href="https://en.wikipedia.org/wiki/Royalty-free" target="_blank" rel="noopener">royalty-free</a> basis. Since then, the W3C and the WHATWG have been developing HTML independently, at times causing specifications to diverge.</p><p>In 2017, the WHATWG established an <a href="https://en.wikipedia.org/wiki/Intellectual_property_rights" target="_blank" rel="noopener">intellectual property rights</a> agreement that includes a patent policy. This spurred a renewed attempt to allow the W3C and the WHATWG to work together on specifications. In 2019, the W3C and WHATWG agreed to a <a href="https://en.wikipedia.org/wiki/Memorandum_of_understanding" target="_blank" rel="noopener">memorandum of understanding</a> where development of HTML and DOM specifications would be done principally in the WHATWG.</p><p>The editor has significant control over the specification, but the community can influence the decisions of the editor. In one case, editor Ian Hickson proposed replacing the <code>tag with a more generic</code> tag, but the community disagreed and the change was reverted.</p><h3 id="Transition-of-HTML-Publication-to-WHATWG"><a href="#Transition-of-HTML-Publication-to-WHATWG" class="headerlink" title="Transition of HTML Publication to WHATWG"></a>Transition of HTML Publication to WHATWG</h3><p>See also: <a href="https://en.wikipedia.org/wiki/HTML5#W3C_and_WHATWG_conflict" target="_blank" rel="noopener">HTML5 § W3C and WHATWG conflict</a></p><p>On 28 May 2019, the W3C announced that WHATWG would be the sole publisher of the HTML and DOM standards. The W3C and WHATWG had been publishing competing standards since 2012. While the W3C standard was identical to the WHATWG in 2007 the standards have since progressively diverged due to different design decisions. The WHATWG “Living Standard” had been the de facto web standard for some time.</p><p><strong>The WHATWG has been actively working on several documents.</strong></p><ul><li>The HTML Living Standard (formerly known as <a href="https://en.wikipedia.org/wiki/HTML5" target="_blank" rel="noopener">HTML5</a>, and <a href="https://en.wikipedia.org/wiki/Web_Applications" target="_blank" rel="noopener">Web Applications</a> 1.0 before that) follows HTML 4.01 and defines a broad set of features for use in web documents. It has been adopted by the W3C as the starting point of the work of the new HTML working group. The WHATWG specification for HTML is a <a href="https://en.wikipedia.org/wiki/Living_document" target="_blank" rel="noopener">living document</a> that will have continuous changes as necessary. It includes the core markup language for the web, HTML, as well as numerous APIs like <a href="https://en.wikipedia.org/wiki/WebSocket" target="_blank" rel="noopener">WebSocket</a>, <a href="https://en.wikipedia.org/wiki/Web_worker" target="_blank" rel="noopener">web worker</a>, <a href="https://en.wikipedia.org/wiki/Web_storage" target="_blank" rel="noopener">Web storage</a>, etc.</li><li><a href="https://en.wikipedia.org/wiki/Document_Object_Model" target="_blank" rel="noopener">DOM</a> Standard, defines how the Document Object Model on the web is supposed to work and replaces W3C DOM level 3. For example, it replaces mutation events with mutation observers.</li><li>Fetch Standard, which “defines requests, responses, and the process that binds them: fetching.” The fetch standard defines the ‘fetch’ <a href="https://en.wikipedia.org/wiki/JavaScript" target="_blank" rel="noopener">JavaScript</a> <a href="https://en.wikipedia.org/wiki/API" target="_blank" rel="noopener">API</a>, and supersedes the <a href="https://en.wikipedia.org/wiki/HTML5" target="_blank" rel="noopener">HTML5</a> fetch functionality, <a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing" target="_blank" rel="noopener">CORS</a> and the <a href="https://en.wikipedia.org/wiki/HTTP" target="_blank" rel="noopener">HTTP</a> Origin header semantics.</li><li>The Streams Standard provides APIs for creating, composing, and consuming streams of data. These streams are designed to map efficiently to low-level I/O primitives, and allow easy composition with built-in backpressure and queueing. On top of streams, the web platform can build higher-level abstractions, such as filesystem or socket APIs, while at the same time users can use the supplied tools to build their own streams which integrate well with those of the web platform.</li><li>The Encoding Standard defines how character encodings such as Windows-1252 and UTF-8 are handled in web browsers and is intended to replace the IETF encodings registry.</li><li>The <a href="https://en.wikipedia.org/wiki/Content_sniffing" target="_blank" rel="noopener">MIME type sniffing</a> standard defines how MIME types are supposed to be sniffed in web browsers.</li><li>The <a href="https://en.wikipedia.org/wiki/URL" target="_blank" rel="noopener">URL</a> standard defines how URLs are supposed to be parsed in web browsers.</li></ul><h2 id="W3C"><a href="#W3C" class="headerlink" title="W3C"></a>W3C</h2><p><strong>W</strong>orld <strong>W</strong>ide <strong>W</strong>eb <strong>C</strong>onsortium，<strong>万维网联盟</strong></p><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><p>万维网联盟（W3C）由<a href="https://zh.wikipedia.org/wiki/提姆·柏內茲-李" target="_blank" rel="noopener">蒂姆·伯纳斯-李</a>于1994年10月离开<a href="https://zh.wikipedia.org/wiki/歐洲核子研究組織" target="_blank" rel="noopener">欧洲核子研究中心</a>（CERN）后成立，在<a href="https://zh.wikipedia.org/wiki/歐盟執委會" target="_blank" rel="noopener">欧盟委员会</a>和<a href="https://zh.wikipedia.org/wiki/國防高等研究計劃署" target="_blank" rel="noopener">国防高等研究计划署</a>（DARPA）的支持下成立于<a href="https://zh.wikipedia.org/wiki/麻省理工學院" target="_blank" rel="noopener">麻省理工学院</a><a href="https://zh.wikipedia.org/wiki/MIT計算機科學與人工智慧實驗室" target="_blank" rel="noopener">MIT计算机科学与人工智能实验室</a>（MIT／LCS）<a href="https://zh.wikipedia.org/wiki/万维网联盟#cite_note-consortium-2" target="_blank" rel="noopener">[2]</a>，DARPA推出了<a href="https://zh.wikipedia.org/wiki/ARPANET" target="_blank" rel="noopener">ARPANET</a>，是<a href="https://zh.wikipedia.org/wiki/互聯網" target="_blank" rel="noopener">互联网</a>前身之一。</p><p>该组织试图透过W3C制定的新标准来促进业界成员间的兼容性和协议。不兼容的HTML版本由不同的供应商提供，导致网页显示方式不一致。联盟试图让所有的供应商实施一套由联盟选择的核心原则和组件。</p><p>CERN最初打算做为W3C的欧洲分支机构，然而CERN希望把重点放在<a href="https://zh.wikipedia.org/wiki/粒子物理" target="_blank" rel="noopener">粒子物理</a>而不是信息技术上。1995年4月，<a href="https://zh.wikipedia.org/wiki/法国国家信息与自动化研究所" target="_blank" rel="noopener">法国国家信息与自动化研究所</a>（INRIA）成为W3C的欧洲机构。1996年9月，<a href="https://zh.wikipedia.org/wiki/慶應義塾大學" target="_blank" rel="noopener">庆应义塾大学</a>SFC研究所成为W3C亚洲机构。从1997年开始，W3C在世界各地创建了区域办事处。截至2009年9月，已有十八个区域办事处，涵盖澳大利亚、<a href="https://zh.wikipedia.org/wiki/比荷盧聯盟" target="_blank" rel="noopener">比荷卢联盟</a>、巴西、中国、芬兰、德国、奥地利、希腊、香港、匈牙利、印度、以色列、意大利、大韩民国、摩洛哥、南非、西班牙、瑞典。2013年1月，<a href="https://zh.wikipedia.org/wiki/北京航空航天大學" target="_blank" rel="noopener">北京航空航天大学</a>成为W3C中国机构。2016年，W3C在英国和爱尔兰创建了区域办事处。</p><h3 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h3><ul><li><a href="https://zh.wikipedia.org/wiki/W3C推荐标准" target="_blank" rel="noopener">W3C推荐标准</a></li><li><a href="https://zh.wikipedia.org/wiki/CSS" target="_blank" rel="noopener">CSS</a>：层叠样式表</li><li><a href="https://zh.wikipedia.org/wiki/DOM" target="_blank" rel="noopener">DOM</a>：文档对象模型</li><li><a href="https://zh.wikipedia.org/wiki/HTML" target="_blank" rel="noopener">HTML</a>：超文本标记语言</li><li><a href="https://zh.wikipedia.org/wiki/資源描述框架" target="_blank" rel="noopener">RDF</a>：资源描述框架</li><li><a href="https://zh.wikipedia.org/wiki/SMIL" target="_blank" rel="noopener">SMIL</a>：同步多媒体集成语言</li><li><a href="https://zh.wikipedia.org/wiki/SVG" target="_blank" rel="noopener">SVG</a>：可缩放矢量图形</li><li><a href="https://zh.wikipedia.org/w/index.php?title=WAI&action=edit&redlink=1" target="_blank" rel="noopener">WAI</a></li><li><a href="https://zh.wikipedia.org/w/index.php?title=Widgets&action=edit&redlink=1" target="_blank" rel="noopener">Widgets</a></li><li><a href="https://zh.wikipedia.org/wiki/XHTML" target="_blank" rel="noopener">XHTML</a>：可扩展超文本标记语言</li><li><a href="https://zh.wikipedia.org/wiki/XML" target="_blank" rel="noopener">XML</a>：可扩展标记语言</li><li><a href="https://zh.wikipedia.org/w/index.php?title=PICS&action=edit&redlink=1" target="_blank" rel="noopener">PICS</a>：网络内容筛选平台</li></ul><h3 id="英文版"><a href="#英文版" class="headerlink" title="英文版"></a>英文版</h3><h4 id="Specification-maturation"><a href="#Specification-maturation" class="headerlink" title="Specification maturation"></a>Specification maturation</h4><p>Sometimes, when a specification becomes too large, it is split into independent modules which can mature at their own pace. Subsequent editions of a module or specification are known as levels and are denoted by the first integer in the title (e.g. CSS3 = Level 3). Subsequent revisions on each level are denoted by an integer following a decimal point (for example, CSS2.1 = Revision 1).</p><p>The W3C standard formation process is defined within the W3C process document, outlining four maturity levels through which each new standard or recommendation must progress.</p><h4 id="Working-draft-WD"><a href="#Working-draft-WD" class="headerlink" title="Working draft (WD)"></a>Working draft (WD)</h4><p>After enough content has been gathered from ‘editor drafts’ and discussion, it may be published as a working draft (WD) for review by the community. A WD document is the first form of a standard that is publicly available. Commentary by virtually anyone is accepted, though no promises are made with regard to action on any particular element commented upon.</p><p>At this stage, the standard document may have significant differences from its final form. As such, anyone who implements WD standards should be ready to significantly modify their implementations as the standard matures.</p><h4 id="Candidate-recommendation-CR"><a href="#Candidate-recommendation-CR" class="headerlink" title="Candidate recommendation (CR)"></a>Candidate recommendation (CR)</h4><p>A candidate recommendation is a version of a standard that is more mature than the WD. At this point, the group responsible for the standard is satisfied that the standard meets its goal. The purpose of the CR is to elicit aid from the development community as to how implementable the standard is.</p><p>The standard document may change further, but at this point, significant features are mostly decided. The design of those features can still change due to feedback from implementors.</p><h4 id="Proposed-recommendation-PR"><a href="#Proposed-recommendation-PR" class="headerlink" title="Proposed recommendation (PR)"></a>Proposed recommendation (PR)</h4><p>A proposed recommendation is the version of a standard that has passed the prior two levels. The users of the standard provide input. At this stage, the document is submitted to the W3C Advisory Council for final approval.</p><p>While this step is important, it rarely causes any significant changes to a standard as it passes to the next phase.</p><h4 id="W3C-recommendation-REC"><a href="#W3C-recommendation-REC" class="headerlink" title="W3C recommendation (REC)"></a>W3C recommendation (REC)</h4><p>This is the most mature stage of development. At this point, the standard has undergone extensive review and testing, under both theoretical and practical conditions. The standard is now endorsed by the W3C, indicating its readiness for deployment to the public, and encouraging more widespread support among implementors and authors.</p><p>Recommendations can sometimes be implemented incorrectly, partially, or not at all, but many standards define two or more levels of conformance that developers must follow if they wish to label their product as W3C-compliant.</p><h4 id="Later-revisions"><a href="#Later-revisions" class="headerlink" title="Later revisions"></a>Later revisions</h4><p>A recommendation may be updated or extended by separately-published, non-technical errata or editor drafts until sufficient substantial edits accumulate for producing a new edition or level of the recommendation. Additionally, the W3C publishes various kinds of informative notes which are to be used as references.</p><h4 id="Certification"><a href="#Certification" class="headerlink" title="Certification"></a>Certification</h4><p>Unlike the <a href="https://en.wikipedia.org/wiki/Internet_Society" target="_blank" rel="noopener">ISOC</a> and other international standards bodies, the W3C does not have a certification program. The W3C has decided, for now, that it is not suitable to start such a program, owing to the risk of creating more drawbacks for the community than benefits.</p><h3 id="Standards"><a href="#Standards" class="headerlink" title="Standards"></a>Standards</h3><p>W3C/<a href="https://en.wikipedia.org/wiki/Internet_Engineering_Task_Force" target="_blank" rel="noopener">IETF</a> standards (over <a href="https://en.wikipedia.org/wiki/Internet_protocol_suite" target="_blank" rel="noopener">Internet protocol suite</a>):</p><ul><li><a href="https://en.wikipedia.org/wiki/ActivityPub" target="_blank" rel="noopener">ActivityPub</a></li><li><a href="https://en.wikipedia.org/wiki/Common_Gateway_Interface" target="_blank" rel="noopener">CGI</a></li><li><a href="https://en.wikipedia.org/wiki/Cascading_Style_Sheets" target="_blank" rel="noopener">CSS</a></li><li><a href="https://en.wikipedia.org/wiki/Document_Object_Model" target="_blank" rel="noopener">DOM</a></li><li><a href="https://en.wikipedia.org/wiki/Encrypted_Media_Extensions" target="_blank" rel="noopener">EME</a></li><li><a href="https://en.wikipedia.org/wiki/GRDDL" target="_blank" rel="noopener">GRDDL</a></li><li><a href="https://en.wikipedia.org/wiki/HTML" target="_blank" rel="noopener">HTML</a></li><li><a href="https://en.wikipedia.org/wiki/MathML" target="_blank" rel="noopener">MathML</a></li><li><a href="https://en.wikipedia.org/wiki/Web_Ontology_Language" target="_blank" rel="noopener">OWL</a></li><li><a href="https://en.wikipedia.org/wiki/Platform_for_Privacy_Preferences_Project" target="_blank" rel="noopener">P3P</a></li><li><a href="https://en.wikipedia.org/wiki/PROV_(Provenance)" target="_blank" rel="noopener">PROV</a><a href="https://en.wikipedia.org/wiki/World_Wide_Web_Consortium#cite_note-25" target="_blank" rel="noopener">[25]</a></li><li><a href="https://en.wikipedia.org/wiki/Resource_Description_Framework" target="_blank" rel="noopener">RDF</a></li><li><a href="https://en.wikipedia.org/wiki/Semantic_Interpretation_for_Speech_Recognition" target="_blank" rel="noopener">SISR</a></li><li><a href="https://en.wikipedia.org/wiki/SKOS" target="_blank" rel="noopener">SKOS</a></li><li><a href="https://en.wikipedia.org/wiki/Synchronized_Multimedia_Integration_Language" target="_blank" rel="noopener">SMIL</a></li><li><a href="https://en.wikipedia.org/wiki/SOAP_(protocol)" target="_blank" rel="noopener">SOAP</a></li><li><a href="https://en.wikipedia.org/wiki/SPARQL" target="_blank" rel="noopener">SPARQL</a></li><li><a href="https://en.wikipedia.org/wiki/Speech_Recognition_Grammar_Specification" target="_blank" rel="noopener">SRGS</a></li><li><a href="https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language" target="_blank" rel="noopener">SSML</a></li><li><a href="https://en.wikipedia.org/wiki/Scalable_Vector_Graphics" target="_blank" rel="noopener">SVG</a></li><li><a href="https://en.wikipedia.org/wiki/VoiceXML" target="_blank" rel="noopener">VoiceXML</a></li><li><a href="https://en.wikipedia.org/wiki/WAI-ARIA" target="_blank" rel="noopener">WAI-ARIA</a></li><li><a href="https://en.wikipedia.org/wiki/Web_Content_Accessibility_Guidelines" target="_blank" rel="noopener">WCAG</a></li><li><a href="https://en.wikipedia.org/wiki/WebAssembly" target="_blank" rel="noopener">WebAssembly</a></li><li><a href="https://en.wikipedia.org/wiki/Web_Services_Description_Language" target="_blank" rel="noopener">WSDL</a></li><li><a href="https://en.wikipedia.org/wiki/XForms" target="_blank" rel="noopener">XForms</a></li><li><a href="https://en.wikipedia.org/wiki/XHTML" target="_blank" rel="noopener">XHTML</a></li><li><a href="https://en.wikipedia.org/wiki/XHTML%2BVoice" target="_blank" rel="noopener">XHTML+Voice</a></li><li><a href="https://en.wikipedia.org/wiki/XML" target="_blank" rel="noopener">XML</a></li><li><a href="https://en.wikipedia.org/wiki/XML_Events" target="_blank" rel="noopener">XML Events</a></li><li><a href="https://en.wikipedia.org/wiki/XML_Information_Set" target="_blank" rel="noopener">XML Information Set</a></li><li><a href="https://en.wikipedia.org/wiki/W3C_XML_Schema" target="_blank" rel="noopener">XML Schema</a></li><li><a href="https://en.wikipedia.org/wiki/XPath" target="_blank" rel="noopener">XPath</a></li><li><a href="https://en.wikipedia.org/wiki/XQuery" target="_blank" rel="noopener">XQuery</a></li><li><a href="https://en.wikipedia.org/wiki/XSL-FO" target="_blank" rel="noopener">XSL-FO</a></li><li><a href="https://en.wikipedia.org/wiki/XSL_Transformations" target="_blank" rel="noopener">XSLT</a></li><li><a href="https://en.wikipedia.org/w/index.php?title=XTiger&action=edit&redlink=1" target="_blank" rel="noopener">XTiger</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 &lt;a href=&quot;https://whatwg.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WHATWG&lt;/a&gt; 和 &lt;a href=&quot;https://www.w3.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;W3C&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tips" scheme="http://yoursite.com/categories/Tips/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
      <category term="Tips" scheme="http://yoursite.com/tags/Tips/"/>
    
      <category term="WHATWG" scheme="http://yoursite.com/tags/WHATWG/"/>
    
      <category term="W3C" scheme="http://yoursite.com/tags/W3C/"/>
    
  </entry>
  
  <entry>
    <title>JavsScript 知识点 &amp; 冷知识</title>
    <link href="http://yoursite.com/2020/06/07/js-points/"/>
    <id>http://yoursite.com/2020/06/07/js-points/</id>
    <published>2020-06-07T22:12:07.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>记录 JavaScript 中的冷知识，坑</p><a id="more"></a><p>先不分类，一旦分类了，就要分 1 2 3 级分类，然后还要解决于属于哪个分类，可以用标签的形式。</p><h4 id="new-Array"><a href="#new-Array" class="headerlink" title="new Array"></a><code>new Array</code></h4><ol><li>如果只传一个 <strong>number</strong> 参数，则会生成一个长度为1的空数组</li><li>如果只传一个非 <strong>number</strong> 则这个值会作为数组的第一个元素，生成一个长度为1的数组</li><li>如果传了 n 个参数，则会生成长度为 n 的数组。这里参数的形式应是 一个一个 的参数，不能是数组本身。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// [empty]</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'a'</span>)</span><br><span class="line"><span class="comment">// ["a"]</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="built_in">Symbol</span>)</span><br><span class="line"><span class="comment">// [ƒ]0: ƒ Symbol()length: 1__proto__: Array(0)</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="comment">// [null]</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="literal">undefined</span>)</span><br><span class="line"><span class="comment">// [undefined]</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="built_in">Object</span>)</span><br><span class="line"><span class="comment">// [ƒ]0: ƒ Object()length: 1__proto__: Array(0)</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;)</span><br><span class="line"><span class="comment">// [ƒ]</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="comment">// [true]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="built_in">Array</span>(a) <span class="comment">// [[1,2,3,4,5]]</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="built_in">Array</span>(...a) <span class="comment">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><h4 id="函数参数的形式"><a href="#函数参数的形式" class="headerlink" title="函数参数的形式"></a>函数参数的形式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>, <span class="string">"---arguments"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(arg, <span class="string">"---arg"</span>); <span class="comment">// 这里 arg 是一个数组，调用函数的时候，写参数那里相当于写了 arg 的展开形式</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(a, <span class="string">"---a"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [Arguments] &#123; '0': 1, '1': 2, '2': 3, '3': 4, '4': 5 &#125; ---arguments</span></span><br><span class="line"><span class="comment">// [ 1, 2, 3, 4, 5 ] ---arg</span></span><br><span class="line"><span class="comment">// [ [Arguments] &#123; '0': 1, '1': 2, '2': 3, '3': 4, '4': 5 &#125; ] ---a</span></span><br></pre></td></tr></table></figure><blockquote><p>不能直接调用 扩展运算符，例如不能直接写 <code>...a</code>，必须写在一个可以接收这些参数的地方。</p></blockquote><h4 id="记忆-apply-和-call-参数形式的技巧"><a href="#记忆-apply-和-call-参数形式的技巧" class="headerlink" title="记忆 apply 和 call 参数形式的技巧"></a>记忆 apply 和 call 参数形式的技巧</h4><p>apply 和 array 有点像，所以 apply 接收 <strong>数组形式</strong> 的参数。</p><p>这是它俩唯一的区别，在调用的时候，都会立即执行。</p><h4 id="JavaScript-对象"><a href="#JavaScript-对象" class="headerlink" title="JavaScript 对象"></a>JavaScript 对象</h4><h5 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h5><p>从ECMAScript 2015开始，对象初始化语法开始支持计算属性名。其允许在[]中放入表达式，计算结果可以当做属性名。这种用法和用方括号访问属性非常类似，也就是已经用来读取和设置属性了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Computed property names (ES6)</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  [<span class="string">"foo"</span> + ++i]: i,</span><br><span class="line">  [<span class="string">"foo"</span> + ++i]: i,</span><br><span class="line">  [<span class="string">"foo"</span> + ++i]: i</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.foo1); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(a.foo2); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(a.foo3); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> param = <span class="string">'size'</span>;</span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">  [param]: <span class="number">12</span>,</span><br><span class="line">  [<span class="string">"mobile"</span> + param.charAt(<span class="number">0</span>).toUpperCase() + param.slice(<span class="number">1</span>)]: <span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(config); <span class="comment">// &#123; size: 12, mobileSize: 4 &#125;</span></span><br></pre></td></tr></table></figure><h5 id="扩展属性"><a href="#扩展属性" class="headerlink" title="扩展属性"></a>扩展属性</h5><p>可以使用扩展运算符将对象的枚举属性复制到一个新的对象上，不可以克隆原型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">x</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">foo</span>: <span class="string">'baz'</span>, <span class="attr">y</span>: <span class="number">13</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> clonedObj = &#123; ...obj1 &#125;;</span><br><span class="line"><span class="comment">// Object &#123; foo: "bar", x: 42 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mergedObj = &#123; ...obj1, ...obj2 &#125;;</span><br><span class="line"><span class="comment">// Object &#123; foo: "baz", x: 42, y: 13 &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener"><code>Object.assign()</code></a>会触发<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/set" target="_blank" rel="noopener">setter</a>，而展开操作符则不会。</p></blockquote><h4 id="阻止事件相关"><a href="#阻止事件相关" class="headerlink" title="阻止事件相关"></a>阻止事件相关</h4><ol><li><p><code>event.preventDefault</code><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event" target="_blank" rel="noopener"><code>Event</code></a> 接口的 <code>**preventDefault()**</code>方法，告诉<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/User_agent" target="_blank" rel="noopener">user agent</a>：如果此事件没有被显式处理，它默认的动作也不应该照常执行。<br><strong>此事件还是继续传播，只是阻止了默认行为。</strong>除非碰到事件侦听器调用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event/stopPropagation" target="_blank" rel="noopener"><code>stopPropagation()</code></a> 或<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event/stopImmediatePropagation" target="_blank" rel="noopener"><code>stopImmediatePropagation()</code></a>，才停止传播。</p><p><strong>默认行为</strong> 例如点击复选框的的时候选中复选框，点击button的时候显示一个蓝色边框。</p><p>你可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event/cancelable" target="_blank" rel="noopener"><code>Event.cancelable</code></a> 来检查该事件是否支持取消。为一个不支持cancelable的事件调用<code>preventDefault()</code>将没有效果。</p></li><li><p><code>event.stopPropagation</code></p><p>阻止捕获和冒泡阶段中当前事件的进一步传播。</p><p>不仅仅阻止冒泡，同时阻止捕获和冒泡。</p></li><li><p><code>event.stopImmediatePropagation</code></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event" target="_blank" rel="noopener"><code>Event</code></a> 接口的 <code>stopImmediatePropagation()</code> 方法阻止监听同一事件的其他事件监听器被调用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    p &#123;</span><br><span class="line">      height: 30px;</span><br><span class="line">      width: 150px;</span><br><span class="line">      background-color: #ccf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    div &#123;</span><br><span class="line">      height: 30px;</span><br><span class="line">      width: 150px;</span><br><span class="line">      background-color: #cfc;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> p = <span class="built_in">document</span>.querySelector(<span class="string">'p'</span>)</span></span><br><span class="line"><span class="javascript">    p.addEventListener(<span class="string">"click"</span>, (event) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">      alert(<span class="string">"我是p元素上被绑定的第一个监听函数"</span>);</span></span><br><span class="line"><span class="javascript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    p.addEventListener(<span class="string">"click"</span>, (event) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">      alert(<span class="string">"我是p元素上被绑定的第二个监听函数"</span>);</span></span><br><span class="line">      event.stopImmediatePropagation();</span><br><span class="line"><span class="javascript">      <span class="comment">// event.stopPropagation()</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 执行stopImmediatePropagation方法,阻止click事件冒泡,并且阻止p元素上绑定的其他click事件的事件监听函数的执行.</span></span></span><br><span class="line"><span class="javascript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    p.addEventListener(<span class="string">"click"</span>, (event) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">      alert(<span class="string">"我是p元素上被绑定的第三个监听函数"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 该监听函数排在上个函数后面，该函数不会被执行</span></span></span><br><span class="line"><span class="javascript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">"div"</span>).addEventListener(<span class="string">"click"</span>, (event) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">      alert(<span class="string">"我是div元素,我是p元素的上层元素"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// p元素的click事件没有向上冒泡，该函数不会被执行</span></span></span><br><span class="line"><span class="javascript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><ol><li><p>十进制转其他进制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">111</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="number">021</span>, <span class="number">8</span>) <span class="comment">// 15</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">021.</span>toString(), <span class="number">8</span>)</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">17</span>, <span class="number">8</span>) <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><p><code>parseInt</code> 的结果都是按照 <strong>十进制</strong> 来显示，函数的意思是，把第一个参数，按照第二个参数的进制去理解，然后转为整数，用十进制表示出来。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录 JavaScript 中的冷知识，坑&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="坑" scheme="http://yoursite.com/tags/%E5%9D%91/"/>
    
      <category term="冷知识" scheme="http://yoursite.com/tags/%E5%86%B7%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>进入 React 稀薄地带</title>
    <link href="http://yoursite.com/2020/06/02/dive-into-react/"/>
    <id>http://yoursite.com/2020/06/02/dive-into-react/</id>
    <published>2020-06-02T23:19:03.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>记录 React 中那些疑惑的点，难解的点。</p><p>概括来说需要双管齐下来解决：1-多写代码 2-多读源码</p><a id="more"></a><h3 id="setState的同步和异步"><a href="#setState的同步和异步" class="headerlink" title="setState的同步和异步"></a>setState的同步和异步</h3><p>React 中并没有真正的“异步”，首先真正的异步应该是大家普遍接受的必须异步的操作，比如网络请求、UI绘制、IO等，这些是“客观”上的异步。</p><p>React 是代码层面，逻辑层面的处理，这些“客观”上是同步的，就是代码的执行而已。然后 React 为了性能和用户体验，“主观”上制造了“异步”的感觉，最明显的是，setState 后无法马上获取到值，以及不能直接更改 state 的值。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// state 中的 a 初始值为 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">a: a + <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(a, <span class="string">'---a'</span>) <span class="comment">// 这里的 a 还是1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.state.a = <span class="number">2</span> <span class="comment">// 不能这么写</span></span><br></pre></td></tr></table></figure><p>代码中是通过 <code>isBatchingUpdates</code> 标示来判断是同步更新还是异步更新。</p><p>setTimeout 中的为同步更新，以及原生事件的回调中也是同步更新，比如通过 <code>addEventListener</code> 来添加的事件</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录 React 中那些疑惑的点，难解的点。&lt;/p&gt;
&lt;p&gt;概括来说需要双管齐下来解决：1-多写代码 2-多读源码&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="坑" scheme="http://yoursite.com/tags/%E5%9D%91/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>总结看到的面试题</title>
    <link href="http://yoursite.com/2020/05/24/interview-question/"/>
    <id>http://yoursite.com/2020/05/24/interview-question/</id>
    <published>2020-05-24T01:27:24.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>如题，总结看到的面试题，不限于自己面试中遇到的，平时看到的，听别人说的。</p><a id="more"></a><h3 id="第1题：弹性盒子中-flex-0-1-auto-表示什么意思"><a href="#第1题：弹性盒子中-flex-0-1-auto-表示什么意思" class="headerlink" title="第1题：弹性盒子中 flex: 0 1 auto 表示什么意思"></a>第1题：弹性盒子中 flex: 0 1 auto 表示什么意思</h3><p><a href="https://developer.mozilla.org/zh-CN/css" target="_blank" rel="noopener">CSS</a>属性 <strong><code>flex</code></strong> 规定了弹性元素如何伸长或缩短以适应flex容器中的可用空间。这是一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Shorthand_properties" target="_blank" rel="noopener">简写属性</a>，用来设置 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-grow" target="_blank" rel="noopener"><code>flex-grow</code></a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-shrink" target="_blank" rel="noopener"><code>flex-shrink</code></a> 与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-basis" target="_blank" rel="noopener"><code>flex-basis</code></a>。</p><p>相当于 <code>flex: initial;</code></p><h3 id="第2题：模拟实现-Array-prototype-splice"><a href="#第2题：模拟实现-Array-prototype-splice" class="headerlink" title="第2题：模拟实现 Array.prototype.splice"></a>第2题：模拟实现 Array.prototype.splice</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回的是 移除掉的元素</span></span><br><span class="line"><span class="comment">// 要改变原数组</span></span><br><span class="line"><span class="comment">// 如果 newItems 有值，还要加在 start 处</span></span><br><span class="line"><span class="comment">// 删除元素的个数和添加元素的个数没有关系</span></span><br><span class="line"><span class="comment">// 边界判断</span></span><br><span class="line"><span class="comment">// 删除元素的思路，1- 改变 this.length 2- this[index] = data</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**思路1</span></span><br><span class="line"><span class="comment"> * 通过 this.length 删除掉需要删除掉的元素</span></span><br><span class="line"><span class="comment"> * 然后通过 push 把原数组剩余的 right 和 新插入的元素拼接到数组的结尾</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Array</span>.prototype._splice1 = <span class="function"><span class="keyword">function</span> (<span class="params">start, length, ...newItems</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断 start 是否超过了 数组长度</span></span><br><span class="line">  <span class="keyword">if</span> (start &gt; <span class="keyword">this</span>.length - <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 判断 start 的左边界</span></span><br><span class="line">    <span class="comment">// 根据 splice 原方法判断而来，如果 start 传入负值</span></span><br><span class="line">    <span class="comment">// 如果负值的绝对值比原数组长度还大，则从 0 开始截取</span></span><br><span class="line">    <span class="comment">// 如果负值的绝对值没有原数组长度大，则和原来的效果一样，等于 从某个负值开始截取一定长度的数组</span></span><br><span class="line">    <span class="keyword">if</span> (start &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(start) &lt; <span class="keyword">this</span>.length) &#123;</span><br><span class="line">        start += <span class="keyword">this</span>.length;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        start = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result = <span class="keyword">this</span>.slice(start, start + length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> right = <span class="keyword">this</span>.slice(start + length, <span class="keyword">this</span>.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.length = start;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newItems.length !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; newItems.length; i++) &#123;</span><br><span class="line">        <span class="keyword">this</span>.push(newItems[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; right.length; i++) &#123;</span><br><span class="line">      <span class="keyword">this</span>.push(right[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**思路2</span></span><br><span class="line"><span class="comment"> * 通过 this[index] = data 来直接改变原数组的值</span></span><br><span class="line"><span class="comment"> * 然后通过 this.length = xxx 来保证数组的长度</span></span><br><span class="line"><span class="comment"> * 例如：如果没有新添元素，或者 删除到了原数组的结尾，则 this.length = start 可以正确删除元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Array</span>.prototype._splice2 = <span class="function"><span class="keyword">function</span> (<span class="params">start, length, ...newItems</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (start &gt; <span class="keyword">this</span>.length - <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 判断 start 的左边界</span></span><br><span class="line">    <span class="comment">// 根据 splice 原方法判断而来，如果 start 传入负值</span></span><br><span class="line">    <span class="comment">// 如果负值的绝对值比原数组长度还大，则从 0 开始截取</span></span><br><span class="line">    <span class="comment">// 如果负值的绝对值没有原数组长度大，则和原来的效果一样，等于 从某个负值开始截取一定长度的数组</span></span><br><span class="line">    <span class="keyword">if</span> (start &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(start) &lt; <span class="keyword">this</span>.length) &#123;</span><br><span class="line">        start += <span class="keyword">this</span>.length;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        start = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">this</span>.slice(start, start + length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> right = <span class="keyword">this</span>.slice(start, start + length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> addIndex = start;</span><br><span class="line">    newItems.concat(right).forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>[addIndex] = item;</span><br><span class="line">      addIndex++;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.length = addIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a._splice(<span class="number">1</span>, <span class="number">3</span>), <span class="string">"---a._splice()"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a._splice1(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>), <span class="string">"---a._splice1()"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a, <span class="string">"---a"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b._splice1(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>), <span class="string">"---b._splice1()"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(b, <span class="string">"---b"</span>);</span><br></pre></td></tr></table></figure><h3 id="第3题：浏览器缓存-ETag-里的值是怎么生成的"><a href="#第3题：浏览器缓存-ETag-里的值是怎么生成的" class="headerlink" title="第3题：浏览器缓存 ETag 里的值是怎么生成的"></a>第3题：浏览器缓存 ETag 里的值是怎么生成的</h3><p>ETag 是 Entity Tag 的缩写，实体标签 的意思</p><p>ETag 是Web的一种缓存机制，用来表示某个资源是否已经被修改了，是否需要重新下载。没有被修改的话，可以返回 304 HTTP Code。</p><p>HTML 标准里面没有ETag具体的生成算法，所以需要自己写或者用 Nginx、Apache 等服务的生成算法。</p><p>大体是 last-modified-time 和 content-length 的16进制组合。</p><p>参考资料：</p><ol><li><p><a href="https://zh.wikipedia.org/wiki/HTTP_ETag" target="_blank" rel="noopener">HTTP ETag</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/ETag" target="_blank" rel="noopener">ETag</a></p></li></ol><h3 id="第4题：null-和-undefined-有什么区别？"><a href="#第4题：null-和-undefined-有什么区别？" class="headerlink" title="第4题：null 和 undefined 有什么区别？"></a>第4题：null 和 undefined 有什么区别？</h3><h5 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h5><p>大写的 <code>Null</code> 和 <code>Undefined</code> 是 JavaScript 的基本数据类型，都只有一个值，对应的是 <code>null</code> 和 <code>undefined</code>。</p><p>都表示一个 <strong>无效的值</strong>，所以不能访问属性，会报错 <code>null``.toString(); undefined.toString();</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>); <span class="comment">// NaN</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在比较相等性之前，null 没有被转换为其他类型</span></span><br><span class="line"><span class="literal">null</span> == <span class="number">0</span> ; <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="literal">undefined</span> !== <span class="literal">null</span>;  <span class="comment">// true, 类型不相同</span></span><br></pre></td></tr></table></figure><h5 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h5><p><code>Undefined</code> 的字面意思就是：未定义的值 。这个值的语义是，希望<strong>表示一个变量最原始的状态，而非人为操作的结果 。</strong>最后一句是重点。</p><p>这种原始状态会在以下 4 种场景中出现：</p><ol><li><p>声明了一个变量，但没有赋值</p></li><li><p>访问对象上不存在的属性</p></li><li><p>函数定义了形参，但没有传递实参</p></li><li><p>使用 void 对表达式求值</p></li></ol><p><code>Null</code> 的字面意思是：空值  。这个值的语义是，希望<strong>表示 一个对象被人为的重置为空对象，而非一个变量最原始的状态 。</strong> 在内存里的表示就是，栈中的变量没有指向堆中的内存对象，即：</p><p><img src="https://images2017.cnblogs.com/blog/849589/201708/849589-20170810192309683-590729765.png" alt="img"></p><p>当一个对象被赋值了null 以后，原来的对象在内存中就处于游离状态，GC 会择机回收该对象并释放内存。因此，如果需要释放某个对象，就将变量设置为 null，即表示该对象已经被清空，目前无效状态。试想一下，如果此处把 null 换成 undefined 会不会感到别扭? 显然语义不通，其操作不能正确的表达其想要的行为。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> === <span class="string">'object'</span></span><br></pre></td></tr></table></figure><p>null 有属于自己的类型 Null，而不属于Object类型，typeof 之所以会判定为 Object 类型，是因为 JavaScript 数据类型在底层都是以二进制的形式表示的，<strong>二进制的前三位为 0 会被 typeof 判断为对象类型</strong>，而 null 的二进制位恰好都是 0 ，因此，null 被误判断为 Object 类型。</p><blockquote><p>000 - 对象，数据是对象的应用</p><p>001 - 整型，数据是31位带符号整数</p><p>010 - 双精度类型，数据是双精度数字</p><p>100 - 字符串，数据是字符串</p><p>110 - 布尔类型，数据是布尔值</p></blockquote><p>其实，我们可以通过另一种方法获取 null 的真实类型：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>) ; <span class="comment">// [object Null]</span></span><br></pre></td></tr></table></figure><p>通过 Object 原型上的toString() 方法可以获取到JavaScript 中对象的真实数据类型，当然 undefined 类型也可以通过这种方式来获取：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>) ; <span class="comment">// [object Undefined]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如题，总结看到的面试题，不限于自己面试中遇到的，平时看到的，听别人说的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="面试2€€22" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%952%E2%82%AC%E2%82%AC22/"/>
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>再看 Event loops</title>
    <link href="http://yoursite.com/2020/05/22/js-event-loop/"/>
    <id>http://yoursite.com/2020/05/22/js-event-loop/</id>
    <published>2020-05-22T06:55:46.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>大概两年前找工作的时候，研究过一阵 <strong>Event loops</strong>，当时基本上是从这篇文章开始的 <a href="https://github.com/creeperyang/blog/issues/21" target="_blank" rel="noopener">从Promise来看JavaScript中的Event Loop、Tasks和Microtasks</a>。</p><p>当时看了好几个晚上，研究了好多题目。</p><p>印象最深的莫过于 <strong>microtask</strong> 和 <strong>macrotask</strong> 两个概念，以及这两个并不是简单的队列，一头进一头出。</p><p>年前看到微博上 <a href="https://weibo.com/itapir" target="_blank" rel="noopener">@貘吃馍香</a> 老师的一条微博，抱怨 <strong>标准里面</strong> 其实没有 <strong>macrotask</strong> 这个概念，现在终于有时间以及有动力学习一下 <strong>Event loops</strong> 的标准了。</p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>WHATWG 中 关于 <a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loops" target="_blank" rel="noopener">Event loops</a> 部分，这个是最新版，W3C 已经不更新了。</p><p>W3C 中第一次出现 <strong>microtask</strong> 描述的版本，<a href="https://www.w3.org/TR/2012/WD-html5-20120329/" target="_blank" rel="noopener">WD-html5-20120329/</a> 。WD 是初稿，第一次公开的标准。</p><p>PS：尝试了一下找之后的版本比较困难，可以尝试用 <strong>A vocabulary and associated APIs for HTML and XHTML</strong> 这个关键字搜索。之前的都在这篇文章开头的列表里。</p><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><ol><li><p>分三种</p><ul><li><strong>window event loop</strong></li><li><strong>worker event loop</strong></li><li><strong>worklet event loop</strong></li></ul></li><li><p><strong>task queue 和 microtask queue</strong></p><ol><li>An <a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loop" target="_blank" rel="noopener">event loop</a> has one or more task queues. A <a href="https://html.spec.whatwg.org/multipage/webappapis.html#task-queue" target="_blank" rel="noopener">task queue</a> is a <a href="https://infra.spec.whatwg.org/#ordered-set" target="_blank" rel="noopener">set</a> of <a href="https://html.spec.whatwg.org/multipage/webappapis.html#concept-task" target="_blank" rel="noopener">tasks</a>.</li></ol><blockquote><p><a href="https://html.spec.whatwg.org/multipage/webappapis.html#task-queue" target="_blank" rel="noopener">Task queues</a> <em>are</em> <a href="https://infra.spec.whatwg.org/#ordered-set" target="_blank" rel="noopener">sets</a><em>, not</em> <a href="https://infra.spec.whatwg.org/#queue" target="_blank" rel="noopener">queues</a><em>, because</em> <a href="https://html.spec.whatwg.org/multipage/webappapis.html#step1" target="_blank" rel="noopener">step one of the event loop processing model</a> <em>grabs the first</em> <a href="https://html.spec.whatwg.org/multipage/webappapis.html#concept-task-runnable" target="_blank" rel="noopener"><em>runnable</em></a> <a href="https://html.spec.whatwg.org/multipage/webappapis.html#concept-task" target="_blank" rel="noopener">task</a> <em>from the chosen queue, instead of</em> <a href="https://infra.spec.whatwg.org/#queue-dequeue" target="_blank" rel="noopener">dequeuing</a> <em>the first task.</em></p></blockquote><ol start="2"><li><p><em>The</em> <a href="https://html.spec.whatwg.org/multipage/webappapis.html#microtask-queue" target="_blank" rel="noopener">microtask queue</a> <em>is not a</em> <a href="https://html.spec.whatwg.org/multipage/webappapis.html#task-queue" target="_blank" rel="noopener">task queue</a><em>.</em></p></li><li><blockquote><p>Each <a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loop" target="_blank" rel="noopener">event loop</a> has a currently running task, which is either a <a href="https://html.spec.whatwg.org/multipage/webappapis.html#concept-task" target="_blank" rel="noopener">task</a> or null. Initially, this is null. It is used to handle reentrancy.</p><p>Each <a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loop" target="_blank" rel="noopener">event loop</a> has a microtask queue, which is a <a href="https://infra.spec.whatwg.org/#queue" target="_blank" rel="noopener">queue</a> of <a href="https://html.spec.whatwg.org/multipage/webappapis.html#microtask" target="_blank" rel="noopener">microtasks</a>, initially empty. A microtask is a colloquial way of referring to a <a href="https://html.spec.whatwg.org/multipage/webappapis.html#concept-task" target="_blank" rel="noopener">task</a> that was created via the <a href="https://html.spec.whatwg.org/multipage/webappapis.html#queue-a-microtask" target="_blank" rel="noopener">queue a microtask</a> algorithm.</p><p>Each <a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loop" target="_blank" rel="noopener">event loop</a> has a performing a microtask checkpoint boolean, which is initially false. It is used to prevent reentrant invocation of the <a href="https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint" target="_blank" rel="noopener">perform a microtask checkpoint</a> algorithm.</p></blockquote></li><li><p>小总结：</p><ol><li><strong>task queue 是一个 set，microtask queue 是一个 queue。</strong></li><li>task 和 microtask 完全是两个东西。</li></ol></li></ol></li></ol><p>暂时写到这里，发现写不下去了，有很多标准、源码需要看。</p><p>现在的感觉是：</p><p>WHATAG 的 HTML 出了一个标准，然后 Chromium、JavaScriptCore、Node 各自根据实际情况出了实现。。。</p><hr><p>继续学习，继续写。</p><hr><h3 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3><ol><li><p>在 <strong>浏览器</strong> 中，一个 event loop 中只有一个 task queue(set)，只有一个 microtask queue。</p></li><li><p>在 <strong>NodeJS</strong> 中，不同种类的 task 对应着不同的 task queue，<strong>NodeJS</strong> 中有两个 microtask queue。</p><p><strong>NodeJS 中的 task queue</strong></p><blockquote><ol><li>Timers Queue：setTimeout() 和 setInterval() 的回调</li><li>IO Callbacks Queue：用户输入的回调，如键盘、鼠标事件</li><li>Check Queue：setImmediate的回调</li><li>Close Callbacks Queue：一些准备关闭的回调函数，如：socket.on(‘close’, …)</li></ol></blockquote><p><strong>NodeJS 中的 microtask queue</strong></p><blockquote><ol><li>Next Tick Queue：是放置process.nextTick(callback)的回调任务的</li><li>Other Micro Queue：放置其他microtask，比如Promise等</li></ol></blockquote></li><li><p>在 <strong>NodeJS</strong> 中 <strong>Event Loops</strong> 执行顺序：</p><blockquote><ol><li>先执行全局Script代码</li><li>执行完同步代码调用栈清空后，先从微任务队列Next Tick Queue中依次取出所有的任务放入调用栈中执行，再从微任务队列Other Microtask Queue中依次取出所有的任务放入调用栈中执行</li><li>然后开始宏任务的6个阶段，每个阶段都将该宏任务队列中的所有任务都取出来执行（注意，这里和浏览器不一样，浏览器只取一个）</li><li>6个阶段执行完毕后，再开始执行微任务，以此构成事件循环</li></ol></blockquote></li><li><p>在一段 JS 的执行过程中， <strong>浏览器</strong> 会先扫描代码，把相应的任务放到 <strong>task queue</strong> 和 <strong>microtask queue</strong> 中。一个 event loop 中  <strong>task queue</strong> 和 <strong>microtask queue</strong> 各一个。<br><code>Promise</code> 放到 <strong>microtask queue</strong> 中好理解，较难理解的是 <code>setTimeout</code> 放到  <strong>task queue</strong> 怎么理解？<br>应该是：把 <code>setTimeout</code> 本身放到 <strong>task queue</strong> 中了，这时候和 <code>setTimeout</code> 中的回调没有关系，与之同理的是，对于<code>Promise</code> 也是把 <code>Promise</code> 函数体 放到 <strong>microtask queue</strong> 中，（这时候 <code>new Promise()</code>中同步的部分会先执行，resolve 的部分会放到 <strong>microtask queue</strong> 中）。</p></li><li><p>生成 Promise 有两种形式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1，这样生成可以让 Promise fulfilled 或者 rejected</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"promise ---"</span>);</span><br><span class="line">  resolve();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"promise ***"</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"promise"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2，相当于直接生成默认 fulfilled 的 Promise</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"promise"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>第一种方式生成的 Promise 会先执行 <strong>同步部分</strong> 的代码。</p></li><li><p>可以在 <strong>Chrome</strong> 的 <strong>Performance</strong> 面板中，查看火焰图，来看JS详细的运行堆栈，来找到 <strong>task</strong> 和 <strong>microtask</strong>。</p></li><li><p>在 <strong>浏览器</strong> 中，需要考虑的 task</p><ul><li><strong>The DOM manipulation task source</strong></li><li><strong>The user interaction task source</strong></li><li><strong>The networking task source</strong></li><li><strong>The history traversal task source</strong></li><li><strong>script 标签</strong></li></ul></li><li><p>在 <strong>浏览器</strong> 中，需要考虑的 miscrotask</p><ul><li>Promise，或者说 Promise.then</li><li>MutationObserver</li><li>Proxy，存疑。因为 Object.observe() 属于 miscrotask，而它已经被废弃了，代替的是 Proxy。</li></ul></li><li><p><a href="https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-a-callback" target="_blank" rel="noopener">当上下文执行栈为空时，执行一个microtask checkpoint。</a><br>这句话隐含的意思，浏览器有一个当前的 <strong>上下文执行栈</strong>，<strong>execution context</strong>，不同于之前的 task 和 microtask 队列。</p><p>这个栈中首先在栈底放一个入口函数，然后依次执行代码，遇到调用其他函数，或者需要入栈的操作（有哪些？），就会往栈中插入新的一项。</p><p>等这段代码完全执行完毕后，就会把栈清空。</p><p>在栈顶的始终是 <strong>正在执行的上下文</strong>，<strong>running execution context</strong>。</p></li></ol><h3 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h3><h4 id="第1题"><a href="#第1题" class="headerlink" title="第1题"></a>第1题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    resolve();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">7</span>);</span><br><span class="line">      resolve();</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">8</span>);</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">9</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6 1 2 3 4 7 8 9 5</span></span><br></pre></td></tr></table></figure><h4 id="第2题"><a href="#第2题" class="headerlink" title="第2题"></a>第2题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"timeout"</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve()</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"promise1"</span>);</span><br><span class="line">    <span class="built_in">Promise</span>.resolve()</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"promise2"</span>))</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"aaa"</span>));</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"promise3"</span>));</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"promise4"</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"normal"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// normal</span></span><br><span class="line"><span class="comment">// promise1</span></span><br><span class="line"><span class="comment">// promise2</span></span><br><span class="line"><span class="comment">// promise3</span></span><br><span class="line"><span class="comment">// promise4</span></span><br><span class="line"><span class="comment">// aaa</span></span><br><span class="line"><span class="comment">// timeout</span></span><br></pre></td></tr></table></figure><p>上面这道题的讲解</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">                                          <span class="comment">// 1 </span></span><br><span class="line">setTimeout(                               <span class="comment">// 1-1</span></span><br><span class="line">    () =&gt; &#123;                               <span class="comment">// 2</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timeout'</span>)                <span class="comment">// 2-1</span></span><br><span class="line">&#125;)  </span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve()                         <span class="comment">// 1-2</span></span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;                         <span class="comment">// 3</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise1'</span>)           <span class="comment">// 3-1</span></span><br><span class="line">        <span class="built_in">Promise</span>.resolve()                 <span class="comment">// 3-2</span></span><br><span class="line">            .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;                 <span class="comment">// 4</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'promise2'</span>)   <span class="comment">// 4-1</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;                 <span class="comment">// 5</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'aaa'</span>)        <span class="comment">// 5-1</span></span><br><span class="line">            &#125;) </span><br><span class="line">        <span class="built_in">Promise</span>.resolve()                 <span class="comment">// 3-3</span></span><br><span class="line">            .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;                 <span class="comment">// 6</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'promise3'</span>)   <span class="comment">// 6-1</span></span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;                       <span class="comment">// 7</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise4'</span>)           <span class="comment">// 7-1</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'normal'</span>)                     <span class="comment">// 1-3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">首先我为了区分每一个块，对你的代码进行了不会影响执行的格式调整，如果这个调整会导致与你执行的结果存在差异，请指出来。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">我们再假设没有任何其他的js代码，将你的代码块放在一个script标签中，script里的代码被浏览器列为第一个task，放入task队列，并触发启动eventloop。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">那么eventloop第一次循环的时候，执行栈为空，任务队列如下描述：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;task: [1], 其他队列：[] &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">从task队列中找到最老的一个task,task队列中只有一个也就是script的task, 将这个task推入执行栈并执行这个task中的内容(也就是1这个代码块，1这个代码块中包含1-1，1-2，1-3三条同步代码；</span></span><br><span class="line"><span class="comment">我们看看这三条同步代码依次执行的详细过程（注意这三条语句肯定是在1那个task中执行完的）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1-1的同步语句是一个js的异步api，他将一个定时任务2代码块放入了 task，代码块1-1执行完毕</span></span><br><span class="line"><span class="comment">1-2是一个Promise.resolve()函数调用，并将promise1的状态改为fullfiled，then异步api将3代码放入 microtask</span></span><br><span class="line"><span class="comment">1-3是一个同步语句console，执行之，打印normal</span></span><br><span class="line"><span class="comment">这时候1task执行完毕，并出栈，执行栈再次为空并告诉eventloop,你可以继续给我代码执行了，eventloop就进入下一个循环点，接下来，我们先看看异步队列里面的任务</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;task：[2], microtask: [3]&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">（按照node的说法，eventloop会有多个循环执行点）eventloop进入到能够执行microtask的循环点，发现microtask队列中有3这个microtask,</span></span><br><span class="line"><span class="comment">将3这个microtask中的内容推入执行栈并执行3中的内容（包含3-1，3-2这俩条同步语句）；（同样要注意3-1，3-2, 3-3也是在代码块3中执行完毕的）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3-1 console了promise1</span></span><br><span class="line"><span class="comment">3-2 Promise.resolve()函数调用,将 promise2的状态置为fullfilled,then异步api将4这个回调放入microtask异步队列</span></span><br><span class="line"><span class="comment">3-3 Promise.resolve()函数调用,将 promise3的状态置为fullfilled,then异步api将6这个回调放入microtask异步队列</span></span><br><span class="line"><span class="comment">这时候3这个microtask执行完毕，3代码块整个都出栈了, 然而promise1的状态为fullfilled，所以当3同步块执行完毕后，由于promise1的状态为fullfilled，7这个then异步api得以执行将7这个代码块放入microtask队列队尾</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">执行栈再次为空并告诉eventloop,你可以继续给我代码执行了，这时候eventloop不是到下一个循环点，</span></span><br><span class="line"><span class="comment">而是要继续检查microtask队列是否为空，为空就到下一个执行点，如果不是就继续执行microtask中的任务，直到microtask为空为止；那我们再看看各个队列的情况</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;task：[2], microtask: [4, 6, 7]&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">由于是队列（当然node中或者浏览器的实现中可能更复杂的数据结构，但是和队列相似），所以先进先出，那4先入队，4先执行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">于是eventloop将4这个microtask推入执行栈并执行4中的内容（包含4-1）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4-1 只有一条语句块执行之，于是打印promise2；由于promise2的状态为fullfilled状态，于是then异步api得以执行，将5代码块放入microtask队列队尾中，这时候promise2还未结束，还有then回调在microtask中。</span></span><br><span class="line"><span class="comment">4 执行完毕</span></span><br><span class="line"><span class="comment">接着6同样的入栈执行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">6-1 打印promise3， promise3执行完毕。</span></span><br><span class="line"><span class="comment">6执行完毕</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">接着7这个microtask要执行了</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">7-1 打印 promise4</span></span><br><span class="line"><span class="comment">接着5这个microtask要执行了</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">5-1 打印aaa</span></span><br><span class="line"><span class="comment">终于3这个then搞定了，</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">执行完后，eventloop会到一个循环结束点，示意eventloop循环结束。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">我们再看看各个队列中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[task:[2],microtask:[]]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">eventloop发现异步队列里面还有一个task，进行第二次循环，然后执行最老的一个task2, 然后打印timeout</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="第3题"><a href="#第3题" class="headerlink" title="第3题"></a>第3题</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'con'</span>&gt;</span>this is con<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> t = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> con = <span class="built_in">document</span>.getElementById(<span class="string">'con'</span>);</span></span><br><span class="line"><span class="javascript">  con.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">setTimeout1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      con.textContent = t;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> child = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="javascript">      child.innerHTML = <span class="string">'I am child'</span>;</span></span><br><span class="line"></span><br><span class="line">      con.appendChild(child);</span><br><span class="line">    &#125;, 0)</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我发现，我自己尝试的和参照的博客文章中的不同。</p><ol><li>只修改 <code>textContent</code> 的话，在 <code>setTimeout</code> 之后的几个 <strong>task</strong> 中都没发现 <strong>Layout</strong> 和 <strong>Paint</strong>，只会触发 <strong>Schedule Style Recalculation</strong>。</li><li>给 con 添加了一个 div 后，在 <code>setTimeout</code> 之后紧接着的几个 <strong>task</strong> 中发现了 <strong>Layout</strong> 和 <strong>Paint</strong></li></ol><p>修改 textContent 和 appendChild</p><p><img src="https://i.loli.net/2020/06/11/jyz8Nxu1s63mWrg.png" alt="修改 textContent 和 appendChild"></p><p>修改textContent或者innerHTML</p><p><img src="https://i.loli.net/2020/06/11/7VsTwyhpmdZ8fHM.png" alt="修改textContent或者innerHTML"></p><p>只有appendChild</p><p><img src="https://i.loli.net/2020/06/11/fmB5dTXpZPYWKGh.png" alt="只有appendChild"></p><h4 id="第4题"><a href="#第4题" class="headerlink" title="第4题"></a>第4题</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'con'</span>&gt;</span>this is con<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> con = <span class="built_in">document</span>.getElementById(<span class="string">'con'</span>);</span></span><br><span class="line"><span class="javascript">  con.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span> <span class="title">Promise1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      con.textContent = 0;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果和预期一样，<code>onclick</code> 后会在 <strong>Run Microtasks</strong> 中 调用 Promise1，然后触发了 <strong>Layout</strong> 和 <strong>Paint</strong></p><p><img src="https://i.loli.net/2020/06/11/5xO6aZdBovrLNs9.png" alt="Promise 的 回调中修改Dom"></p><h4 id="第4-1题"><a href="#第4-1题" class="headerlink" title="第4.1题"></a>第4.1题</h4><p>我们把 <strong>Promise</strong> 替换为 <strong>真实的网络请求</strong> 试一下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'con'</span>&gt;</span>this is con<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> con = <span class="built_in">document</span>.getElementById(<span class="string">'con'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">fetchCats</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">setTimeout1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">      fetch(<span class="string">"https://cat-fact.herokuapp.com/facts"</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">4</span>);</span></span><br><span class="line">        con.textContent = 2;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, 0);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">setTimeout2</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="number">5</span>);</span></span><br><span class="line">    &#125;, 20);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="number">6</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  con.onclick = <span class="function"><span class="keyword">function</span> <span class="title">click1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line">    fetchCats()</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，网络请求单独在一个 task 中，click 或者说 setTimeout 中已经没有了 run Microtasks，setTimeout2 在后面</p><p><img src="https://i.loli.net/2020/06/12/fuLTCMWdSO7V2Z6.png" alt="网络请求"></p><p><img src="https://i.loli.net/2020/06/12/dUpoYVG29lh1sm7.png" alt="setTimeout2"></p><h4 id="第5题"><a href="#第5题" class="headerlink" title="第5题"></a>第5题</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'con'</span>&gt;</span>this is con<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> con = <span class="built_in">document</span>.getElementById(<span class="string">'con'</span>);</span></span><br><span class="line"><span class="javascript">  con.onclick = <span class="function"><span class="keyword">function</span> <span class="title">click1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">setTimeout1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      con.textContent = 0;</span><br><span class="line">    &#125;, 0)</span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">setTimeout2</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      con.textContent = 1;</span><br><span class="line">    &#125;, 0)</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里结果和博文中一样，只显示了 <code>setTimeout1</code>，并且在 Chrome 的火焰图中，也没有看到 显示 0 的快照，只有显示 1 的。</p><p><img src="https://i.loli.net/2020/06/11/2ZNzOvg1mpD8xso.png" alt="两个task，没有microtask"></p><h4 id="第6题"><a href="#第6题" class="headerlink" title="第6题"></a>第6题</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'con'</span>&gt;</span>this is con<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> con = <span class="built_in">document</span>.getElementById(<span class="string">'con'</span>);</span></span><br><span class="line"><span class="javascript">  con.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">setTimeout1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      con.textContent = 0;</span><br><span class="line"><span class="javascript">      <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span> <span class="title">Promise1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'Promise1'</span>)</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, 0)</span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">setTimeout2</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      con.textContent = 1;</span><br><span class="line"><span class="javascript">      <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span> <span class="title">Promise2</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'Promise2'</span>)</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, 0)</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>和博文中一样，只看到了 <strong>setTimeout1</strong>，看到了两个 <strong>task</strong>，每个 <strong>task</strong> 中都有 <code>setTimeout</code> 的回调，回调中是 <strong>Run Microtasks</strong>，其中是各自的 <code>Promise</code>。</p><p><img src="https://i.loli.net/2020/06/11/xYthG8lUHwLXAFj.png" alt="task 和 microtask"></p><h4 id="第7题"><a href="#第7题" class="headerlink" title="第7题"></a>第7题</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'con'</span>&gt;</span>this is con<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> con = <span class="built_in">document</span>.getElementById(<span class="string">'con'</span>);</span></span><br><span class="line"><span class="javascript">  con.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">setTimeout1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      con.textContent = 0;</span><br><span class="line">    &#125;, 0);</span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">setTimeout2</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      con.textContent = 1;</span><br><span class="line">    &#125;, 16.7);</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>和博文中一样，终于看到两个 setTimeout 了！！！</p><p>不过两个 期望的 task 中间还多个4个其他的 task，暂时不清楚是啥</p><p>setTimeout1 和 setTimeout</p><p><img src="https://i.loli.net/2020/06/11/vTxOFHXRJrjSkuA.png" alt="看到两个setTimeout"></p><p>setTimeout1<br><img src="https://i.loli.net/2020/06/11/GUJBpEjwMairDS3.png" alt="setTimeout1"></p><p>setTimeout2<br><img src="https://i.loli.net/2020/06/11/5nPRQfhuStaiOAG.png" alt="setTimeout2"></p><h4 id="第8题"><a href="#第8题" class="headerlink" title="第8题"></a>第8题</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'con'</span>&gt;</span>this is con<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> con = <span class="built_in">document</span>.getElementById(<span class="string">'con'</span>);</span></span><br><span class="line"><span class="javascript">  con.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">setTimeout0</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      con.textContent = 0;</span><br><span class="line">    &#125;, 0)</span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">setTimeout1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      con.textContent = 1;</span><br><span class="line">    &#125;, 0)</span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">setTimeout2</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      con.textContent = 2;</span><br><span class="line">    &#125;, 0)</span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">setTimeout3</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      con.textContent = 3;</span><br><span class="line">    &#125;, 0)</span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">setTimeout4</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      con.textContent = 4;</span><br><span class="line">    &#125;, 0)</span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">setTimeout5</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      con.textContent = 5;</span><br><span class="line">    &#125;, 0)</span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">setTimeout6</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      con.textContent = 6;</span><br><span class="line">    &#125;, 0)</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果和博文中大体一样，7个 <code>setTimeout</code> 没有全部显示。不同点是，我这里显示了 3 个，也就是渲染了 <strong>3 帧</strong>，有3个 <strong>Frame</strong>。</p><p>然后，多试了几次后，发现，每次渲染的帧数不固定。</p><p>三个 Frame</p><p><img src="https://i.loli.net/2020/06/11/HvwOSiVIkZl8g7p.png" alt="三个 Frame"></p><hr><h4 id="第9题"><a href="#第9题" class="headerlink" title="第9题"></a>第9题</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'con'</span>&gt;</span>this is con<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> con = <span class="built_in">document</span>.getElementById(<span class="string">'con'</span>);</span></span><br><span class="line"><span class="javascript">  con.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">setTimeout1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      con.textContent = <span class="string">'task1'</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">250000</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">          con.textContent = i;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, 0);</span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">setTimeout2</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      con.textContent = <span class="string">'task2'</span>;</span></span><br><span class="line">    &#125;, 0);</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>和博文中相同，可以看到 这个 <strong>task</strong> 是一个 <strong>Long Task</strong>，执行时间很长，而且看到了 <strong>setTimeout2</strong>。</p><p>250000 个 <strong>microtask</strong> 在 <strong>setTimeout1</strong> 中被全部执行完，才执行的 <strong>setTimeout2</strong> 。</p><p><img src="https://i.loli.net/2020/06/11/TsDaxgAIEnBrkuf.png" alt="Long Task"></p><h4 id="第10题"><a href="#第10题" class="headerlink" title="第10题"></a>第10题</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'con'</span>&gt;</span>this is con<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> con = <span class="built_in">document</span>.getElementById(<span class="string">'con'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> i = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> raf = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    requestAnimationFrame(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      con.textContent = i;</span><br><span class="line"><span class="javascript">      <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        i++;</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (i &lt; <span class="number">3</span>) raf();</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  con.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">    raf();</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>和博文中一样，渲染了3帧。但是这 3 个 <strong>Frame</strong> 并不是等时间渲染的。</p><p><img src="https://i.loli.net/2020/06/11/ZTJSVQKA8H9qOne.png" alt="requestAnimationFrame"></p><h4 id="第11题"><a href="#第11题" class="headerlink" title="第11题"></a>第11题</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'con'</span>&gt;</span>this is con<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> con = <span class="built_in">document</span>.getElementById(<span class="string">'con'</span>);</span></span><br><span class="line"><span class="javascript">  con.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">setTimeout1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'setTimeout1'</span>)</span></span><br><span class="line">    &#125;, 0)</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> channel = <span class="keyword">new</span> MessageChannel();</span></span><br><span class="line"><span class="javascript">    channel.port1.onmessage = <span class="function"><span class="keyword">function</span> <span class="title">onmessage1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'postMessage'</span>)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span> <span class="title">promise1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'promise1'</span>)</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    channel.port2.postMessage(0);</span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">setTimeout2</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'setTimeout2'</span>)</span></span><br><span class="line">    &#125;, 0)</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'sync'</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sync</span><br><span class="line">postMessage</span><br><span class="line">promise1</span><br><span class="line">setTimeout1</span><br><span class="line">setTimeout2</span><br></pre></td></tr></table></figure><p>我感觉是 <strong>postMessage</strong>， <strong>onMessage</strong> 都是一个 task。</p><p><img src="https://i.loli.net/2020/06/11/y2uP8isDr5pYOA6.png" alt="postMessage"></p><hr><p>关于 <a href="https://whatwg.org/" target="_blank" rel="noopener">WHATWG</a> 和 <a href="https://www.w3.org/" target="_blank" rel="noopener">W3C</a></p><p>参考我写的这篇 <a href="https://zcdll.github.io/2020/06/12/whatwg-vs-w3c/" target="_blank" rel="noopener">博客</a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ol><li><p><a href="https://source.chromium.org/" target="_blank" rel="noopener">Chromium 源码在线查看</a></p></li><li><p><a href="https://github.com/creeperyang/blog/issues/21" target="_blank" rel="noopener">从Promise来看JavaScript中的Event Loop、Tasks和Microtasks #21 </a> 最早是通过这篇 GitHub 文章来学习的，写的很棒。不过在 2019 年之后就不怎么更新了。</p></li><li><p><a href="https://github.com/aooy/blog/issues/5" target="_blank" rel="noopener">从event loop规范探究javaScript异步及浏览器更新渲染时机 #5 </a> 后来发现了这篇文章，这篇更棒！而且里面提供了确认 task 和 microtask 的方式。这篇还一直在更新。</p></li><li><p><a href="https://juejin.im/post/5b34c7d351882574a7570107" target="_blank" rel="noopener">嘘🤫！不同环境下宏、微任务的秘密～</a></p></li><li><p><a href="https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/#what-is-the-event-loop" target="_blank" rel="noopener">Node.js 事件循环，定时器和 <code>process.nextTick()</code></a></p></li><li><p><a href="https://javascript.info/event-loop" target="_blank" rel="noopener">Event loop: microtasks and macrotasks</a> 这篇讲了很多基础的知识，然后关于 Event loops 的点不多</p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide" target="_blank" rel="noopener">Using microtasks in JavaScript with queueMicrotask()</a></p></li><li><p><a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">这一次，彻底弄懂 JavaScript 执行机制</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大概两年前找工作的时候，研究过一阵 &lt;strong&gt;Event loops&lt;/strong&gt;，当时基本上是从这篇文章开始的 &lt;a href=&quot;https://github.com/creeperyang/blog/issues/21&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;从Promise来看JavaScript中的Event Loop、Tasks和Microtasks&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;当时看了好几个晚上，研究了好多题目。&lt;/p&gt;
&lt;p&gt;印象最深的莫过于 &lt;strong&gt;microtask&lt;/strong&gt; 和 &lt;strong&gt;macrotask&lt;/strong&gt; 两个概念，以及这两个并不是简单的队列，一头进一头出。&lt;/p&gt;
&lt;p&gt;年前看到微博上 &lt;a href=&quot;https://weibo.com/itapir&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@貘吃馍香&lt;/a&gt; 老师的一条微博，抱怨 &lt;strong&gt;标准里面&lt;/strong&gt; 其实没有 &lt;strong&gt;macrotask&lt;/strong&gt; 这个概念，现在终于有时间以及有动力学习一下 &lt;strong&gt;Event loops&lt;/strong&gt; 的标准了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="EventLoop" scheme="http://yoursite.com/tags/EventLoop/"/>
    
  </entry>
  
  <entry>
    <title>跨平台开发的思考1</title>
    <link href="http://yoursite.com/2020/05/20/multi-platform-thoughts-1/"/>
    <id>http://yoursite.com/2020/05/20/multi-platform-thoughts-1/</id>
    <published>2020-05-20T15:26:06.000Z</published>
    <updated>2020-08-04T07:29:12.116Z</updated>
    
    <content type="html"><![CDATA[<p>最近开发了一个钉钉小程序的项目，对 <strong>小程序</strong> 以及 <strong>跨平台开发</strong> 有了更进一步的思考，记录下。</p><p>感觉这个系列会不断有新的思考，所以标题加了序号。</p><a id="more"></a><p>从前端说起，一般而言，前端分为 HTML + CSS + JavaScript，前端三大件，然后就可以显示一个页面了。</p><p>再进一步</p><blockquote><p>JavaScript 可以抽象为对 <strong>HTML节点</strong> 的增删改查，事件方面，某种程度上也会为了修改DOM节点，当然还有接口相关的数据传输。</p><p>CSS 可以抽象为对 <strong>HTML节点</strong> 的排列，以及颜色等属性的显示。</p></blockquote><p>也就是说，前端的能力，可以进一步抽象为 <strong>HTML</strong> 的能力，<strong>显示、操作 HTML 节点的能力</strong>，这也就是 <strong>HTML5</strong> 伟大和厉害之处——仅仅需要一个浏览器，就可以显示一个网页，可以没有 JavaScript，可以没有 CSS。</p><p>说回小程序，可以说是 <strong>阉割了前端最最重要的能力，或者说大大局限了HTML的能力。</strong></p><p>因为一切都在微信里面，所以虽然 <strong>JavaScriptCore</strong> 可以解释执行 JavaScript 代码，CSS 样式可以支持的还不错，但是没有完整的DOM，太多太多HTML标签、HTML5 的能力无法使用。。。</p><p>比如这次我们遇到的</p><ol><li>无法动态的更改小程序wxml或axml节点，导致无法直接使用 MathJax 来渲染 LaTex，</li><li>钉钉小程序还不支持svg标签</li><li>钉钉小程序 rich-text 组件支持的标签还很少</li><li>最重要的是，无法使用 NPM 上 几乎所有和操作 DOM 相关的第三方库，比如 rc-tree。。。</li></ol><p>小程序是在 H5网页 和 Native 应用之间的一个取舍，现在感觉是放弃了很多渲染相关的能力，更多的可以利用设备本身而H5无法直接使用的能力。</p><p>现在各大厂几乎都有自己的小程序，微信、京东、百度、字节跳动、支付宝（钉钉）等等，发展更完善的无疑是微信小程序，所以在开发其他家小程序的是常常会心累。。。</p><p>再联系一下，尝试过的其它跨平台开发方案</p><ol><li><strong>Flutter</strong> 是最接近 Native 的，现在很火，能够直接编译为原生APP。</li><li><strong>Electron</strong> 可以概括为 Node + WebView，开发起来最接近原生H5开发。</li><li><strong>ReactNative</strong> 了解的最少，据说虽然坑很多，但现在发展很长时间了，使用起来还行。</li></ol><hr><p>这番思考后，更喜欢 <strong>HTML5</strong> 了，能力还是够的，实现起来也最快最简单。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近开发了一个钉钉小程序的项目，对 &lt;strong&gt;小程序&lt;/strong&gt; 以及 &lt;strong&gt;跨平台开发&lt;/strong&gt; 有了更进一步的思考，记录下。&lt;/p&gt;
&lt;p&gt;感觉这个系列会不断有新的思考，所以标题加了序号。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程杂想" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E6%9D%82%E6%83%B3/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="跨平台" scheme="http://yoursite.com/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="WebView" scheme="http://yoursite.com/tags/WebView/"/>
    
      <category term="Flutter" scheme="http://yoursite.com/tags/Flutter/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
      <category term="Electron" scheme="http://yoursite.com/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 使用技巧整理</title>
    <link href="http://yoursite.com/2020/05/09/flutter-tips/"/>
    <id>http://yoursite.com/2020/05/09/flutter-tips/</id>
    <published>2020-05-09T07:44:30.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>Flutter 使用技巧整理</p><a id="more"></a><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ol><li><p>升级</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flutter --version  <span class="comment"># 查看版本，如果有新版本，会提示</span></span><br><span class="line"></span><br><span class="line">flutter upgrade  <span class="comment"># 升级Flutter，这个命令一开始会很慢，很长时间没有输出，但一旦开始了就会很快乐</span></span><br><span class="line"></span><br><span class="line">flutter doctor  <span class="comment"># 自检，这个很有用</span></span><br><span class="line"></span><br><span class="line">dart --version  <span class="comment"># 查看 Dart 版本</span></span><br><span class="line"></span><br><span class="line">brew upgrade dart  <span class="comment"># 升级 Dart</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flutter 使用技巧整理&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Coding 时用但很容易想不起来的包</title>
    <link href="http://yoursite.com/2020/03/26/coding-package/"/>
    <id>http://yoursite.com/2020/03/26/coding-package/</id>
    <published>2020-03-26T08:05:54.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>有些包曾经用过，或者看到后觉得以后可能会用到。</p><p>但是到了该用的时候就是怎么也想不起来。。。</p><p>在此记录一下</p><a id="more"></a><ol><li><a href="https://www.picdiet.com/zh-cn" target="_blank" rel="noopener">picdiet</a><br>独特且强悍的JavaScript算法，能极速压缩80%的图片大小，而不损害其质量</li><li>[Velocity.js]*(<a href="http://velocityjs.org/" target="_blank" rel="noopener">http://velocityjs.org/</a>)<br>Accelerated JavaScript animation.</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有些包曾经用过，或者看到后觉得以后可能会用到。&lt;/p&gt;
&lt;p&gt;但是到了该用的时候就是怎么也想不起来。。。&lt;/p&gt;
&lt;p&gt;在此记录一下&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tips" scheme="http://yoursite.com/categories/Tips/"/>
    
    
      <category term="包" scheme="http://yoursite.com/tags/%E5%8C%85/"/>
    
      <category term="Packages" scheme="http://yoursite.com/tags/Packages/"/>
    
  </entry>
  
  <entry>
    <title>ssh</title>
    <link href="http://yoursite.com/2020/03/22/ssh/"/>
    <id>http://yoursite.com/2020/03/22/ssh/</id>
    <published>2020-03-22T07:35:59.000Z</published>
    <updated>2020-08-04T07:29:12.116Z</updated>
    
    <content type="html"><![CDATA[<p>创建 SSH 密钥的 N 种方式</p><a id="more"></a><p>Google Cloud 推荐的方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f ~/.ssh/[KEY_FILENAME] -C [USERNAME]</span><br></pre></td></tr></table></figure><p>限制对您的私钥的访问，只有您能读取此密钥，且任何人都不能向其写入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 ~/.ssh/[KEY_FILENAME]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建 SSH 密钥的 N 种方式&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>阿玛拉定律</title>
    <link href="http://yoursite.com/2020/03/01/amara-law/"/>
    <id>http://yoursite.com/2020/03/01/amara-law/</id>
    <published>2020-03-01T13:55:07.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>今天在听《提前怀旧》的 <a href="https://pretro.xyz/14" target="_blank" rel="noopener">阿马拉的咳嗽声</a> 这期播客的时候，听到了<a href="https://en.wikipedia.org/wiki/Roy_Amara" target="_blank" rel="noopener"><em>阿玛</em>拉定律</a>。这里对应中文的翻译不同。</p><p>对近期的疫情以及最近的自已有了更深的理解。</p><a id="more"></a><blockquote><p><em>We tend to overestimate the effect of a technology in the short run and underestimate the effect in the long run.</em></p></blockquote><blockquote><p>“人们总是高估一项科技所带来的短期效益，却又低估它的长期影响。”</p></blockquote><p>从原意来看，是说“科技”，鼓励人们思考科技带来的长期影响，跟“炒作周期”有关。</p><p>具体可以看相关百科的解释。</p><p>说一下我当时的想法。</p><p>由于这期播客是因“2019冠状病毒病”而起，所以这里所讨论的影响，已经脱离“科技”的限制。</p><p>也就是说，我们可能高估了疫情短期会带来的影响（比如高估了蔬菜肉蛋奶等食物短缺带来的影响，高估了“口罩”的作用），以及在长期会低估它所带来的影响（低估疫情对全球供应链所带来的冲击，低估了疫情对城市管理带来的影响）。</p><p>想到自己最近的种种，所看到的，所想起的，所思考的，所行动的，大概局限在了“近期”上，目的可以简单概括为“努力平安度过这段特殊时期，以及让身边的亲人平安过度”。</p><p>关于这一点，还可以参考2020年2月21日发的朋友圈。</p><blockquote><p>到公司上班一周，工作效率高出了不少。</p><p>关于这次疫情，之前自己有很长一段时间符合网上所描述的“过度紧张，心情抑郁，作息不规律”，因为处于严重的自我心理矛盾之中，那就是我意识到下面三点：</p><ol><li><p>这次疫情结束或者说稳定之后，“幸存”下来的人中有相当一部分是几乎没有做什么防护，没有戴口罩，没有买酒精消毒液，没有整天盯着疫情地图晚上睡不着觉的。无论是出于主观原因，还是客观的买不到，不知道。而且这部分比例不会低。</p></li><li><p>按照过往的数据和分析，如果病毒的传播性很强的话，那它的致死率往往不高。而且这次目前也没有听说，经过治疗最终治愈的患者会得严重的后遗症，比如类似SARS的那样。所以，对于相当数量的人类来说，是可以渡过这次危机的，无论以何种方式。</p></li><li><p>既然，不做准备没啥事，做了准备也没啥用，那我为啥还要“抢购”物资，更新“认知”，不断刷新微博生怕错过任何一条”不知真假的信息“呢？</p></li></ol><p>而且，我大概计算过，假如最终死亡XX人，按照全国14亿人计算，那就是死亡率是XX%，平均XX人中会死亡一人，平均到一个县城的村镇，一个城市里面的小区，也不会有几个人，这个比例很低很低啊，而且大部分会在武汉，或者到过武汉。。。</p><p>当我意识到这三点之后，我发现，这其实是相当自私的想法，这建立在了他人巨大的付出之上。我当时难以启齿，无法去跟别人讨论。而且，这是错误的，应该是政治不正确的。</p><p>但是，昨天在微博上看到一句话——“但我们作为个体和家庭，在概率高到一定程度而一旦死亡就是灭顶之灾的情况下，是不能用大局观去思考这个问题的”。</p><p>我猛然醒悟到，我之前的做法是没有问题的，在他人眼里我再怎么过分的准备，都是可以的，是没有问题的。</p><p>因为我“怕死”！<br>作为一个个体或者说某个家庭的一份子，我承担不起任何的损失，接受不了任何的失去。</p><p>嗯，加油！！！</p></blockquote><p>因为想要转移自己的注意力，看一些长文章，所以这两天看了《读库》的两篇文章，是DK-14，在北京和上海的两场见面会。</p><p>大概明白了：</p><ol><li>既然这场疫情终究会过去，以及绝大部分人都会平安度过，以及其所给自己，给身边最亲的亲人带来的影响以及可以大概估计，那现在已经可以转移注意力方向了。</li><li>应该把时间更多的用在可以提升自己“长期价值”的方面，比如工作中最基本的能力，只要短期可以“活下去”。</li><li>要尽量多读“长文章”，多看书，不仅可以让自己静下来，更可以促使自己思考。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在听《提前怀旧》的 &lt;a href=&quot;https://pretro.xyz/14&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阿马拉的咳嗽声&lt;/a&gt; 这期播客的时候，听到了&lt;a href=&quot;https://en.wikipedia.org/wiki/Roy_Amara&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;em&gt;阿玛&lt;/em&gt;拉定律&lt;/a&gt;。这里对应中文的翻译不同。&lt;/p&gt;
&lt;p&gt;对近期的疫情以及最近的自已有了更深的理解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随想" scheme="http://yoursite.com/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
      <category term="随想" scheme="http://yoursite.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="播客" scheme="http://yoursite.com/tags/%E6%92%AD%E5%AE%A2/"/>
    
      <category term="提前怀旧" scheme="http://yoursite.com/tags/%E6%8F%90%E5%89%8D%E6%80%80%E6%97%A7/"/>
    
      <category term="炒作周期" scheme="http://yoursite.com/tags/%E7%82%92%E4%BD%9C%E5%91%A8%E6%9C%9F/"/>
    
      <category term="阿玛拉定律" scheme="http://yoursite.com/tags/%E9%98%BF%E7%8E%9B%E6%8B%89%E5%AE%9A%E5%BE%8B/"/>
    
      <category term="2019冠状病毒病" scheme="http://yoursite.com/tags/2019%E5%86%A0%E7%8A%B6%E7%97%85%E6%AF%92%E7%97%85/"/>
    
  </entry>
  
  <entry>
    <title>Github fork 后同步源的新更新内容</title>
    <link href="http://yoursite.com/2019/12/16/update-github-fork/"/>
    <id>http://yoursite.com/2019/12/16/update-github-fork/</id>
    <published>2019-12-16T10:56:15.000Z</published>
    <updated>2020-08-04T07:29:12.116Z</updated>
    
    <content type="html"><![CDATA[<p>简单来说就是，在本地新建一个 remote，然后这个 remote 分支每次更新 源仓库的代码，之后在本地可以 merge 或者 rebase 到自己的仓库，也可以 cherry-pick 某个 commit</p><a id="more"></a><p>参考链接：<a href="https://www.zhihu.com/question/28676261" target="_blank" rel="noopener">gitlab或github下fork后如何同步源的新更新内容？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单来说就是，在本地新建一个 remote，然后这个 remote 分支每次更新 源仓库的代码，之后在本地可以 merge 或者 rebase 到自己的仓库，也可以 cherry-pick 某个 commit&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="fork" scheme="http://yoursite.com/tags/fork/"/>
    
      <category term="update" scheme="http://yoursite.com/tags/update/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript Overloads</title>
    <link href="http://yoursite.com/2019/12/06/typescirpt-overloads/"/>
    <id>http://yoursite.com/2019/12/06/typescirpt-overloads/</id>
    <published>2019-12-06T06:54:08.000Z</published>
    <updated>2020-08-04T07:29:12.116Z</updated>
    
    <content type="html"><![CDATA[<p>深入了解了一下 <strong>TypeScript</strong> 中的 TypeScript Overloads ，总结下。</p><p>概括如下：能不用就不用，或者可以用 Union Types, Optional Parameters, Default Parameters,  多个函数等方式来代替。</p><a id="more"></a><h2 id="此-Overloads-非彼-Overloads"><a href="#此-Overloads-非彼-Overloads" class="headerlink" title="此 Overloads 非彼 Overloads"></a>此 Overloads 非彼 Overloads</h2><p>不用于其它面向对象的语言，比如 <strong>Java</strong>，<strong>C#</strong> 有一般意义上的 Method Overloads，即一个方法名，可以有多个 <strong>signature</strong>，每个 <strong>signature</strong> 有自己的<strong>方法实现</strong>。</p><p><strong>TypeScript</strong> 中的 Overloads 可以有多个 <strong>signature</strong> ，<strong>但只能有一个 实现</strong>。因为 JavaScript 没有 Overloads 的实现，一个方法名只能有一个 <strong>signature</strong>，以及一个实现。</p><p>所以 <strong>TypeScript</strong> 中的 Overloads 是<strong>假的</strong>。</p><h2 id="TypeScript-真正需要用到-Overloads-的地方"><a href="#TypeScript-真正需要用到-Overloads-的地方" class="headerlink" title="TypeScript 真正需要用到 Overloads 的地方"></a>TypeScript 真正需要用到 Overloads 的地方</h2><blockquote><p>The main case for using an overload is <em>when writing a type definition for an existing JavaScript library</em> – but even then you can probably avoid them.</p></blockquote><p>来自这篇文章中的观点  <a href="https://www.stevefenton.co.uk/2013/02/what-is-wrong-with-method-overloads-in-typescript/" target="_blank" rel="noopener">What is Wrong with Method Overloads in TypeScript</a>，我想了一下，在我已知的使用场景中确实没有发现必须要用 Overloads 的地方。以及，也没有用过。。。</p><p>按照这篇文章 <a href="https://mariusschulz.com/blog/function-overloads-in-typescript" target="_blank" rel="noopener">Function Overloads in TypeScript</a> 的介绍，需要用到 Overloads 的某种场景是需要 <strong>确定返回值类型的时候</strong>，根据传入参数类型的不同确定相应的返回值类型，举例如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params"><span class="built_in">string</span>: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>&lt;<span class="title">T</span>&gt;(<span class="params">array: T[]</span>): <span class="title">T</span>[]</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>&lt;<span class="title">T</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  stringOrArray: <span class="built_in">string</span> | T[]</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">string</span> | <span class="title">T</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> stringOrArray === <span class="string">"string"</span></span><br><span class="line">    ? stringOrArray</span><br><span class="line">        .split(<span class="string">""</span>)</span><br><span class="line">        .reverse()</span><br><span class="line">        .join(<span class="string">""</span>)</span><br><span class="line">    : stringOrArray.slice().reverse();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里如果只用了 any，union type 或者 union type + 泛型 的时候，是无法较严格的确定返回值类型的，因为只有一种返回值类型，无论传入啥都是 <code>string | any[]</code> 类型这种类型。</p><p>这确实是一个使用场景。</p><p>但是这里并不能通过代码获取相应的返回值类型，只能够使 IDE 更好的给出提示，以及更有利于开发人员理解。</p><h2 id="TypeScript-Overloads-的一般使用"><a href="#TypeScript-Overloads-的一般使用" class="headerlink" title="TypeScript Overloads 的一般使用"></a>TypeScript Overloads 的一般使用</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Example &#123;</span><br><span class="line">  doSomething(num: <span class="built_in">number</span>);</span><br><span class="line">  doSomething(str: <span class="built_in">string</span>, truth: <span class="built_in">boolean</span>);</span><br><span class="line">  doSomething(x: <span class="built_in">number</span> | <span class="built_in">string</span>, truth?: <span class="built_in">boolean</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'string'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Hello '</span> + x;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (truth) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Number is '</span> + x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意的点"><a href="#注意的点" class="headerlink" title="注意的点"></a>注意的点</h3><ol><li>Function name is same 方法名必须相同</li><li>Number of parameters are different in each overload 每个 overload 参数的数量不同</li><li>If number of parameters is same the their type must be different 如果 overload 参数的数量相同，类型必须不同</li><li>All overloads must have same return type 所有 overloads 必须有相同的返回类型，这条存疑，可以用 any 或者 union type 来代替</li><li>每个 overload 相同位置的参数名可以不同，都是 <strong>形参</strong></li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol><li><a href="https://www.typescriptlang.org/docs/handbook/functions.html#overloads" target="_blank" rel="noopener">Overloads官方文档</a></li><li><a href="https://medium.com/@kevinkreuzer/typescript-method-overloading-c256dd63245a" target="_blank" rel="noopener">Typescript method overloading</a> 这篇不错</li><li><a href="https://howtodoinjava.com/typescript/function-overloading/" target="_blank" rel="noopener">TypeScript Function or Method Overloading</a></li><li><a href="https://mariusschulz.com/blog/function-overloads-in-typescript" target="_blank" rel="noopener">Function Overloads in TypeScript</a></li><li><a href="https://stackoverflow.com/questions/13212625/typescript-function-overloading" target="_blank" rel="noopener">TypeScript function overloading</a></li><li><a href="https://stackoverflow.com/questions/12688275/is-there-a-way-to-do-method-overloading-in-typescript" target="_blank" rel="noopener">Is there a way to do method overloading in TypeScript?</a> 这个问答很棒</li><li><a href="https://www.stevefenton.co.uk/2013/02/what-is-wrong-with-method-overloads-in-typescript/" target="_blank" rel="noopener">What is Wrong with Method Overloads in TypeScript</a> 这篇很棒</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;深入了解了一下 &lt;strong&gt;TypeScript&lt;/strong&gt; 中的 TypeScript Overloads ，总结下。&lt;/p&gt;
&lt;p&gt;概括如下：能不用就不用，或者可以用 Union Types, Optional Parameters, Default Parameters,  多个函数等方式来代替。&lt;/p&gt;
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://yoursite.com/categories/TypeScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
      <category term="重载" scheme="http://yoursite.com/tags/%E9%87%8D%E8%BD%BD/"/>
    
      <category term="方法重载" scheme="http://yoursite.com/tags/%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD/"/>
    
      <category term="函数重载" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>NVM 使用中的问题</title>
    <link href="http://yoursite.com/2019/10/26/debug-nvm/"/>
    <id>http://yoursite.com/2019/10/26/debug-nvm/</id>
    <published>2019-10-26T10:24:06.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本使用命令"><a href="#基本使用命令" class="headerlink" title="基本使用命令"></a>基本使用命令</h3><ol><li><code>nvm install xxx</code> 安装某个版本</li><li><code>nvm ls-remote --lts</code> 列出线上版本，可以加参数</li><li><code>nvm install lts/erbium --reinstall-packages-from=default</code> 安装新版 node，并重装 global packages。如果在 <code>~/.npmrc</code> 中设置了 <strong>prefix</strong>，reinstall 不生效。</li><li><code>nvm install-latest-npm</code> 安装最新版本 npm</li></ol><h3 id="Bugs"><a href="#Bugs" class="headerlink" title="Bugs"></a>Bugs</h3><ol><li>通过 nvm 升级 node 版本时，有时候会报错</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">N/A: version &quot;N/A&quot; is not yet installed.</span><br><span class="line"></span><br><span class="line">You need to run &quot;nvm install N/A&quot; to install it before using it.</span><br></pre></td></tr></table></figure><a id="more"></a><p>解决办法：运行命令 <code>nvm alias default node</code></p><p>如果仅仅按照提示，运行 <code>nvm use xxx</code> 暂时会好了，但是在重启电脑或重启 terminal 后问题依旧。</p><p>参考链接： <a href="https://stackoverflow.com/questions/49449719/nvm-n-a-version-n-a-n-a-is-not-yet-installed" target="_blank" rel="noopener">nvm: N/A: version “N/A -&gt; N/A” is not yet installed</a></p><ol start="2"><li>nvm is not compatible with the npm config “prefix” option:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm config delete prefix </span><br><span class="line">$ npm config <span class="built_in">set</span> prefix <span class="variable">$NVM_DIR</span>/versions/node/v6.11.1</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://stackoverflow.com/questions/34718528/nvm-is-not-compatible-with-the-npm-config-prefix-option" target="_blank" rel="noopener">nvm is not compatible with the npm config “prefix” option:</a></p><ol start="3"><li>reinstall error</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">npm ERR! code EEXIST</span><br><span class="line">npm ERR! syscall symlink</span><br><span class="line">npm ERR! path ../lib/node_modules/tsc/bin/tsserver</span><br><span class="line">npm ERR! dest /Users/zcdll/.nvm/versions/node/v12.16.1/bin/tsserver</span><br><span class="line">npm ERR! errno -17</span><br><span class="line">npm ERR! EEXIST: file already exists, symlink <span class="string">'../lib/node_modules/tsc/bin/tsserver'</span> -&gt; <span class="string">'/Users/zcdll/.nvm/versions/node/v12.16.1/bin/tsserver'</span></span><br><span class="line">npm ERR! File exists: /Users/zcdll/.nvm/versions/node/v12.16.1/bin/tsserver</span><br><span class="line">npm ERR! Remove the existing file and try again, or run npm</span><br><span class="line">npm ERR! with --force to overwrite files recklessly.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     /Users/zcdll/.npm/_logs/2020-06-03T06_30_07_100Z-debug.log</span><br><span class="line">Failed installing default packages. Please check <span class="keyword">if</span> your default-packages file or a package <span class="keyword">in</span> it has problems!</span><br><span class="line">VERSION=<span class="string">''</span></span><br></pre></td></tr></table></figure><p>出现这个报错的原因，应该是因为 <code>~/.npmrc</code> 中设置了 <code>prefix</code> 字段，就是写死了 node 的版本，所以每次安装新的 npm 包以及安装新的 node 版本 <code>reinstall-packages</code> 时都会安装到之前就的 node 目录中。</p><p><strong>具体的可以参照下面官方文档中 OS X 的部分</strong></p><blockquote><p><strong>Note:</strong> On OS X, if you have/had a “system” node installed and want to install modules globally, keep in mind that:</p><ul><li>When using <code>nvm</code> you do not need <code>sudo</code> to globally install a module with <code>npm -g</code>, so instead of doing <code>sudo npm install -g grunt</code>, do instead <code>npm install -g grunt</code></li><li>If you have an <code>~/.npmrc</code> file, make sure it does not contain any <code>prefix</code> settings (which is not compatible with <code>nvm</code>)</li><li>You can (but should not?) keep your previous “system” node install, but <code>nvm</code> will only be available to your user account (the one used to install nvm). This might cause version mismatches, as other users will be using <code>/usr/local/lib/node_modules/*</code> VS your user account using <code>~/.nvm/versions/node/vX.X.X/lib/node_modules/*</code></li></ul></blockquote><p>然后，为了能够在安装新的 node 版本时全局安装之前的包，官方的建议是维护 <code>$NVM_DIR/default-packages</code> 文件，可以固定版本号。</p><p>我现在维护的列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">eslint</span><br><span class="line">gitmoji-cli</span><br><span class="line">grunt-cli</span><br><span class="line">gulp-cli</span><br><span class="line">hexo-cli</span><br><span class="line">http-server</span><br><span class="line">nodemon</span><br><span class="line">npkill</span><br><span class="line">nrm</span><br><span class="line">pm2</span><br><span class="line">serve</span><br><span class="line">@tarojs/cli</span><br><span class="line">typescript</span><br><span class="line">webpack</span><br><span class="line">webpack-cli</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本使用命令&quot;&gt;&lt;a href=&quot;#基本使用命令&quot; class=&quot;headerlink&quot; title=&quot;基本使用命令&quot;&gt;&lt;/a&gt;基本使用命令&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;nvm install xxx&lt;/code&gt; 安装某个版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nvm ls-remote --lts&lt;/code&gt; 列出线上版本，可以加参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nvm install lts/erbium --reinstall-packages-from=default&lt;/code&gt; 安装新版 node，并重装 global packages。如果在 &lt;code&gt;~/.npmrc&lt;/code&gt; 中设置了 &lt;strong&gt;prefix&lt;/strong&gt;，reinstall 不生效。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nvm install-latest-npm&lt;/code&gt; 安装最新版本 npm&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Bugs&quot;&gt;&lt;a href=&quot;#Bugs&quot; class=&quot;headerlink&quot; title=&quot;Bugs&quot;&gt;&lt;/a&gt;Bugs&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;通过 nvm 升级 node 版本时，有时候会报错&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;N/A: version &amp;quot;N/A&amp;quot; is not yet installed.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;You need to run &amp;quot;nvm install N/A&amp;quot; to install it before using it.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="坑" scheme="http://yoursite.com/categories/%E5%9D%91/"/>
    
    
      <category term="坑" scheme="http://yoursite.com/tags/%E5%9D%91/"/>
    
      <category term="折腾" scheme="http://yoursite.com/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="nvm" scheme="http://yoursite.com/tags/nvm/"/>
    
  </entry>
  
  <entry>
    <title>hexo-upgrade-to-3.9.0</title>
    <link href="http://yoursite.com/2019/10/04/hexo-upgrade-to-3-9-0/"/>
    <id>http://yoursite.com/2019/10/04/hexo-upgrade-to-3-9-0/</id>
    <published>2019-10-04T16:15:07.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol><li><a href="https://leaferx.online/2018/02/11/lc-security/" target="_blank" rel="noopener">Leancloud访客统计插件重大安全漏洞修复指南</a></li><li><a href="https://github.com/theme-next/hexo-theme-next/issues/569" target="_blank" rel="noopener">首页”阅读次数”后不显示数字 [solved] </a></li><li><a href="https://yunhao.space/2018/06/27/hexo-leancloud-plugin-installation-tutor/" target="_blank" rel="noopener">Hexo NexT 主题 LeanCloud 插件安装教程</a></li><li><a href="https://www.alankeene.com/2018/0412/next-problems.html" target="_blank" rel="noopener">用 hexo 搭建博客踩过的坑</a></li><li><a href="https://blog.dlzhang.com/posts/3720dafc/" target="_blank" rel="noopener">Hexo NexT 博客增加瀑布流相册页面</a></li><li><a href="https://bjtu-hxs.github.io/2018/06/12/leancloud-config/" target="_blank" rel="noopener">Hexo博客Next主题添加统计文章阅读量功能</a></li><li><a href="http://www.coldcrack.me/2018/07/18/Next_Gittalk/" target="_blank" rel="noopener">Hexo Next主题集成Gittalk</a></li><li><a href="https://cjjkkk.github.io/gitalk/" target="_blank" rel="noopener">使用gittalk实现hexo博客评论功能</a></li><li><a href="https://gythialy.github.io/deploy-hexo-to-github-pages-via-github-actions/" target="_blank" rel="noopener">通过 GitHub Actions 自动部署 Hexo</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h3 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://leaferx.online/2018/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>配置 VSCode 编码环境</title>
    <link href="http://yoursite.com/2019/09/27/vscode-init/"/>
    <id>http://yoursite.com/2019/09/27/vscode-init/</id>
    <published>2019-09-27T06:30:15.000Z</published>
    <updated>2020-08-04T07:29:12.116Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>一直使用 WebStorm 作为自己的 JavaScript 编码 IDE，用了两三年了，很不错。经过很长时间的打磨，各种配置，插件，快捷键，工具都得心应手了。也用 PhpStorm 写过 Laravel，用 PyCharm 写过 Flask，迁移配置文件后很快就上手了。</p><p>前一段时间开始学习 Flutter，发现官方推荐的 IDE 是  或者 IDEA 后很高兴，就顺理成章的用起了 Android Studio，但是打开 Android Studio 后，我的 Mac 就开始风扇狂转，声音很大，很不爽。。。</p><p>看到 Flutter 推荐的编辑器还有 VSCode，索性就开始配置一把。</p><p>VSCode 刚出来的时候，就想要配置好自己的环境，期间还看了好多文章，听了好几期播客，但一直就搁置了。。。</p><a id="more"></a><hr><h4 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h4><ul><li><p>第一次更新：2019年9月27日</p><p>第一版</p></li></ul><hr><p>VSCode 基本是开箱即用的，虽然打开速度没有 Sublime 快，但是带了不少功能，基本的语法高亮啥的。</p><hr><h3 id="本地语言"><a href="#本地语言" class="headerlink" title="本地语言"></a>本地语言</h3><p>安装完后，从插件中找到相应的语言包，中文(简体)，然后安装，重启就好了。</p><p>但是可能存在部分插件不支持中文的情况。</p><h3 id="修改配置-amp-自定义"><a href="#修改配置-amp-自定义" class="headerlink" title="修改配置 &amp; 自定义"></a>修改配置 &amp; 自定义</h3><ol><li>主题，字体，自动保存</li><li>代码片段 snippets</li><li>是否显示迷你地图</li><li>行最大字符数 &amp; 自动换行</li></ol><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li><p>工作区</p><p>我理解的工作区好比是一个大项目，然后其中可能包含好多子项目，例如前端项目，后端项目，数据库配置，Docker 里面的 Dockerfile 等。</p><p>所以在开发一个项目的时候，可以打开一个 工作区，然后打开全部相关的目录，保存为一个单独的工作区。</p></li></ol><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ol><li>Material Theme &amp; Material Icon Theme</li><li>Auto Rename Tag</li><li>Auto Close Tag</li><li>Live Server</li><li>Better Comments</li><li>CSS Peek</li><li>Sass</li><li>Live Sass Compiler</li><li>Prettier</li><li>TODO Highlight</li><li>Bracket Pair Colorizer 2</li><li>Settings Sync</li><li>ESLint</li><li>Color Highlight</li><li>Auto Import</li><li>IntelliSense for CSS class names in HTML</li><li>GitLens</li><li>Git History</li><li>Git Project Manager</li><li>File Utils</li><li>Debugger for Chrome</li><li>TypeScript Hero</li><li>WakaTime</li><li>Vetur —— VS Code 下面的 Vue 工具</li><li>JavaScript (ES6) code snippets</li><li>ES7 React/Redux/GraphQL/React-Native snippets</li><li>Document This</li><li>Code Spell Checker</li></ol><h3 id="其它工具"><a href="#其它工具" class="headerlink" title="其它工具"></a>其它工具</h3><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><table><thead><tr><th align="left">命令</th><th>描述</th></tr></thead><tbody><tr><td align="left">Command + Shift + P</td><td>命令面板，算是一个入口</td></tr><tr><td align="left">Option(Alt) + Shift + F</td><td>格式化文档</td></tr><tr><td align="left">Command + P</td><td>打开文件</td></tr><tr><td align="left">Command + Shift + F</td><td>搜索内容</td></tr><tr><td align="left">Ctrl + Alt + N</td><td>Code Runner</td></tr><tr><td align="left">Shift + Alt + U</td><td>保存配置到 Gist</td></tr><tr><td align="left">Ctrl + Alt + D 两次</td><td>快速添加注释</td></tr><tr><td align="left">Shift + Command + 4</td><td>删除行</td></tr><tr><td align="left">Shift + Alt + Up</td><td>向上复制行</td></tr><tr><td align="left">Shift + Ctrl + Command + D</td><td>向下复制行</td></tr><tr><td align="left">Shift + Command + 6</td><td>新建文件</td></tr><tr><td align="left">Shift + Command + 7</td><td>新建目录</td></tr><tr><td align="left">Alt+Up/Down</td><td>移动当前行</td></tr><tr><td align="left">Shift + Command + O</td><td>转到文件中的符号</td></tr><tr><td align="left">Command + T</td><td>转到工作区中的符号</td></tr><tr><td align="left">Ctrl + G</td><td>跳到指定行</td></tr><tr><td align="left">Comand + Shift + M</td><td>显示问题面板</td></tr><tr><td align="left">Comand + Shift + U</td><td>显示输出面板</td></tr><tr><td align="left">Comand + Shift + Y</td><td>显示调试控制台</td></tr><tr><td align="left">Ctrl + `</td><td>显示终端</td></tr><tr><td align="left">Command + E</td><td>打开最近的文件</td></tr><tr><td align="left">Command + K Command + S</td><td>打开快捷键设置窗口</td></tr><tr><td align="left">Command + Enter</td><td>在下面插入行</td></tr><tr><td align="left">Shift + Command + Enter</td><td>在上面插入行</td></tr><tr><td align="left">Shift + Command + L</td><td>选择所有匹配项</td></tr><tr><td align="left">Command + D</td><td>追加选择下一个匹配项</td></tr><tr><td align="left">Command + I</td><td>增长选择</td></tr><tr><td align="left">Shift + Ctrl + Command + Right</td><td>扩展选择</td></tr><tr><td align="left">Shift + Ctrl + Command + Left</td><td>收起选择</td></tr><tr><td align="left">Alt + Shift + F</td><td>格式化代码</td></tr><tr><td align="left">Ctrl + P</td><td>向上移动光标</td></tr><tr><td align="left">Ctrl + N</td><td>向下移动光标</td></tr><tr><td align="left">Ctrl + B</td><td>向左移动光标</td></tr><tr><td align="left">Ctrl + F</td><td>向右移动光标</td></tr><tr><td align="left">Command + F2</td><td>修改所有匹配项</td></tr><tr><td align="left">Shift + Command + ContextMenu</td><td>在侧边栏显示活动文件，在目录树显示活动文件</td></tr><tr><td align="left">Command + Ctrl + U</td><td>转换为小写</td></tr><tr><td align="left">Shift + Command + Ctrl + U</td><td>转换为小写</td></tr><tr><td align="left">Command + K Command + 0</td><td>折叠所有</td></tr><tr><td align="left">Command + K Command + L</td><td>切换折叠</td></tr><tr><td align="left">Command + K Command + J</td><td>全部展开</td></tr><tr><td align="left">Command + K Command + ]</td><td>已递归形式展开</td></tr></tbody></table><h3 id="代码片段-Snippets"><a href="#代码片段-Snippets" class="headerlink" title="代码片段(Snippets)"></a>代码片段(Snippets)</h3><ol><li>stless<br><code>StatelessWidget</code></li><li>stful<br><code>StatefulWidget</code></li><li>stanim<br><code>StatefulWidget with AnimationController</code></li><li>cl cll clll<br>console.log</li></ol><hr><h3 id="与-WebStorm-不同点"><a href="#与-WebStorm-不同点" class="headerlink" title="与 WebStorm 不同点"></a>与 WebStorm 不同点</h3><ol><li>同一个功能，只支持一个快捷键</li><li>没找到怎么一键关闭所有面板</li><li>默认 <strong>双击</strong> 才能打开一个文件，单击只是在浏览</li></ol><hr><h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><ol><li>zsh 图形显示的问题</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h3&gt;&lt;p&gt;一直使用 WebStorm 作为自己的 JavaScript 编码 IDE，用了两三年了，很不错。经过很长时间的打磨，各种配置，插件，快捷键，工具都得心应手了。也用 PhpStorm 写过 Laravel，用 PyCharm 写过 Flask，迁移配置文件后很快就上手了。&lt;/p&gt;
&lt;p&gt;前一段时间开始学习 Flutter，发现官方推荐的 IDE 是  或者 IDEA 后很高兴，就顺理成章的用起了 Android Studio，但是打开 Android Studio 后，我的 Mac 就开始风扇狂转，声音很大，很不爽。。。&lt;/p&gt;
&lt;p&gt;看到 Flutter 推荐的编辑器还有 VSCode，索性就开始配置一把。&lt;/p&gt;
&lt;p&gt;VSCode 刚出来的时候，就想要配置好自己的环境，期间还看了好多文章，听了好几期播客，但一直就搁置了。。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tips" scheme="http://yoursite.com/categories/Tips/"/>
    
    
      <category term="vscode" scheme="http://yoursite.com/tags/vscode/"/>
    
      <category term="IDE" scheme="http://yoursite.com/tags/IDE/"/>
    
      <category term="编辑器" scheme="http://yoursite.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
      <category term="editor" scheme="http://yoursite.com/tags/editor/"/>
    
  </entry>
  
  <entry>
    <title>高度配置 iTerm2 和 zsh</title>
    <link href="http://yoursite.com/2018/05/06/dive-into-iterm2&amp;zsh/"/>
    <id>http://yoursite.com/2018/05/06/dive-into-iterm2&amp;zsh/</id>
    <published>2018-05-06T04:30:32.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下 Mac 上 iTerm2 和 zsh 的配置，以及 iTerm 上一些快捷键。</p><a id="more"></a><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a><strong>标签</strong></h3><ul><li>新建标签：command + t</li><li>关闭标签：command + w</li><li>切换标签：command + 数字 command + 左右方向键</li><li>切换全屏：command + enter</li><li>查找：command + f</li></ul><h3 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a><strong>分屏</strong></h3><ul><li>垂直分屏：command + d</li><li>水平分屏：command + shift + d</li><li>切换屏幕：command + option + 方向键 或者 command + [ ]</li></ul><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a><strong>命令</strong></h3><ul><li>查看历史命令：command + ;</li><li>查看剪贴板历史：command + shift + h</li><li>上一条命令：ctrl + p</li><li>搜索命令历史：ctrl + r</li></ul><h3 id="行内"><a href="#行内" class="headerlink" title="行内"></a><strong>行内</strong></h3><ul><li>清除当前行：ctrl + u</li><li>到行首：ctrl + a</li><li>到行尾：ctrl + e</li><li>前进后退：ctrl + f/b (相当于左右方向键)</li><li>删除当前光标的字符：ctrl + d</li><li>删除光标之前的字符：ctrl + h</li><li>删除光标之前的单词：ctrl + w</li><li>删除到文本末尾：ctrl + k</li><li>交换光标处文本：ctrl + t</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a><strong>其他</strong></h3><ul><li>清屏1：command + r</li><li>清屏2：ctrl + l</li><li>清屏3：clear</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下 Mac 上 iTerm2 和 zsh 的配置，以及 iTerm 上一些快捷键。&lt;/p&gt;
    
    </summary>
    
    
      <category term="坑" scheme="http://yoursite.com/categories/%E5%9D%91/"/>
    
    
      <category term="坑" scheme="http://yoursite.com/tags/%E5%9D%91/"/>
    
      <category term="iTerm2" scheme="http://yoursite.com/tags/iTerm2/"/>
    
      <category term="zsh" scheme="http://yoursite.com/tags/zsh/"/>
    
      <category term="Vim" scheme="http://yoursite.com/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>渐渐开始，深入学习 Vim</title>
    <link href="http://yoursite.com/2018/05/03/dive-into-vim/"/>
    <id>http://yoursite.com/2018/05/03/dive-into-vim/</id>
    <published>2018-05-03T02:40:29.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>还是得学习一下 Vim，先从最常用的快捷键开始，把用过的一个一个记下来。</p><a id="more"></a><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>简单的移动光标</p><blockquote><ul><li><code>0</code> → 数字零，到行头</li><li><code>^</code> → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）</li><li><code>$</code> → 到本行行尾</li><li><code>g_</code> → 到本行最后一个不是blank字符的位置。</li><li><code>/pattern</code> → 搜索 <code>pattern</code> 的字符串（陈皓注：如果搜索出多个匹配，可按n键到下一个）</li></ul></blockquote><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://coolshell.cn/articles/5426.html" target="_blank" rel="noopener">简明 VIM 练级攻略</a></li><li><a href="https://coolshell.cn/articles/5479.html" target="_blank" rel="noopener">给程序员的VIM速查卡</a></li><li><a href="https://coolshell.cn/articles/7166.html" target="_blank" rel="noopener">游戏：VIM大冒险</a></li><li><a href="https://coolshell.cn/articles/894.html" target="_blank" rel="noopener">将VIM变得简单:如何在VIM中得到你最喜爱的IDE特性</a></li><li><a href="https://coolshell.cn/articles/1651.html" target="_blank" rel="noopener">VIM有趣的命令</a></li><li><a href="https://coolshell.cn/articles/1679.html" target="_blank" rel="noopener">VIM的分屏功能</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还是得学习一下 Vim，先从最常用的快捷键开始，把用过的一个一个记下来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="坑" scheme="http://yoursite.com/categories/%E5%9D%91/"/>
    
    
      <category term="坑" scheme="http://yoursite.com/tags/%E5%9D%91/"/>
    
      <category term="Vim" scheme="http://yoursite.com/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>《From JavaScript to TypeScript》阅读笔记</title>
    <link href="http://yoursite.com/2018/05/03/From-JavaScript-to-TypeScript-note/"/>
    <id>http://yoursite.com/2018/05/03/From-JavaScript-to-TypeScript-note/</id>
    <published>2018-05-03T02:36:13.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>《From JavaScript to TypeScript》的阅读笔记，<a href="https://ts.xcatliu.com/" target="_blank" rel="noopener">本书地址</a></p><a id="more"></a><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h3><ul><li>TypeScript 只会进行静态检查，如果发现有错误，编译的时候就会报错。**</li><li>声明一个 <code>void</code> 类型的变量没有什么用，因为你只能将它赋值为 <code>undefined</code> 和 <code>null</code>。</li><li>与 <code>void</code> 的区别是，<code>undefined</code> 和 <code>null</code> 是所有类型的子类型。也就是说 <code>undefined</code> 类型的变量，可以赋值给 <code>number</code> 类型的变量。而 <code>void</code> 类型的变量不能赋值给 <code>number</code> 类型的变量。</li></ul><h3 id="任意值"><a href="#任意值" class="headerlink" title="任意值"></a>任意值</h3><ul><li>任意值（Any）用来表示允许赋值为任意类型。再次赋值时也可以是任意类型。</li><li>可以认为，<strong>声明一个变量为任意值之后，对它的任何操作，返回的内容的类型都是任意值</strong>。</li></ul><h3 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h3><ul><li><strong>如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 any 类型而完全不被类型检查</strong>。如果赋值了就会进行<strong>类型推断</strong>。</li></ul><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><ul><li>当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们<strong>只能访问此联合类型的所有类型里共有的属性或方法</strong>。</li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul><li>TypeScript 中的接口是一个非常灵活的概念，除了可用于<a href="https://ts.xcatliu.com/advanced/class-and-interfaces.html#%E7%B1%BB%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3" target="_blank" rel="noopener">对类的一部分行为进行抽象</a>以外，也常用于对「对象的形状（Shape）」进行描述。</li><li><strong>赋值的时候，变量的形状必须和接口的形状保持一致</strong>。</li></ul><h3 id="数组的类型"><a href="#数组的类型" class="headerlink" title="数组的类型"></a>数组的类型</h3><ul><li><p><code>[1, &#39;1&#39;, 2, 3, 5]</code> 的类型被推断为 <code>(number | string)[]</code>，这是联合类型和数组的结合。</p></li><li><p>也可以使用数组泛型（Array Generic） <code>Array&lt;elemType&gt;</code> 来表示数组：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacci: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure></li><li><p>接口也可以用来描述数组：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> NumberArray &#123;</span><br><span class="line">    [index: <span class="built_in">number</span>]: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fibonacci: NumberArray = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure></li><li><p>类数组（Array-like Object）不是数组类型，比如 <code>arguments</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args: <span class="built_in">number</span>[] = <span class="built_in">arguments</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="函数的类型"><a href="#函数的类型" class="headerlink" title="函数的类型"></a>函数的类型</h3><ul><li><p>在 JavaScript 中，有两种常见的定义函数的方式——函数声明（Function Declaration）和函数表达式（Function Expression）。</p></li><li><p>在 ES6 中，我们允许给函数的参数添加默认值，<strong>TypeScript 会将添加了默认值的参数识别为可选参数</strong>。</p></li><li><p><strong>一个函数有输入和输出，要在 TypeScript 中对其进行约束，需要把输入和输出都考虑到。</strong></p></li><li><p>如果要我们现在写一个对函数表达式（Function Expression）的定义，可能会写成这样：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySum = <span class="function"><span class="keyword">function</span> (<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这是可以通过编译的，不过事实上，上面的代码只对等号右侧的匿名函数进行了类型定义，而等号左边的 <code>mySum</code>，是通过赋值操作进行类型推论而推断出来的。如果需要我们手动给 <code>mySum</code> 添加类型，则应该是这样：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySum: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span> (<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>我们也可以使用接口的方式来定义一个函数需要符合的形状。</p></li><li><p>在 ES6 中，我们允许给函数的参数添加默认值，<strong>TypeScript 会将添加了默认值的参数识别为可选参数</strong>，此时就不受「可选参数必须接在必需参数后面」的限制了。</p></li><li><p>我们可以使用重载定义多个 <code>reverse</code> 的函数类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="title">number</span> | <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'number'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Number</span>(x.toString().split(<span class="string">''</span>).reverse().join(<span class="string">''</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中，我们重复定义了多次函数 <code>reverse</code>，前几次都是函数定义，最后一次是函数实现。在编辑器的代码提示中，可以正确的看到前两个提示。</p><p>注意，TypeScript 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。</p></li></ul><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><ul><li><p>类型断言（Type Assertion）可以用来手动指定一个值的类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;类型&gt;值</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">值 as 类型</span><br></pre></td></tr></table></figure><p>在 tsx 语法（React 的 jsx 语法的 ts 版）中必须用后一种。</p></li><li><p><strong>类型断言不是类型转换，断言成一个联合类型中不存在的类型是不允许的</strong>。</p></li></ul><h3 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h3><ul><li><p>当使用第三方库时，我们需要引用它的声明文件。    </p></li><li><p>我们需要使用 <code>declare</code> 关键字来定义它的类型，帮助 TypeScript 判断我们传入的参数类型对不对：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> jQuery: <span class="function">(<span class="params"><span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">jQuery(<span class="string">'#foo'</span>);</span><br></pre></td></tr></table></figure></li><li><p>通常我们会把类型声明放到一个单独的文件中，这就是声明文件，我们约定声明文件以 <code>.d.ts</code> 为后缀。然后在使用到的文件的开头，用「三斜线指令」表示引用了声明文件：</p></li></ul><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><ul><li>ECMAScript 标准提供的内置对象有：<code>Boolean</code>、<code>Error</code>、<code>Date</code>、<code>RegExp</code> 等。</li><li>DOM 和 BOM 提供的内置对象有：<code>Document</code>、<code>HTMLElement</code>、<code>Event</code>、<code>NodeList</code> 等。</li></ul><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>类型别名用来给一个类型起个新名字。</p><p>简单的例子</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Name = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> NameResolver = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> NameOrResolver = Name | NameResolver;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">n: NameOrResolver</span>): <span class="title">Name</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中，我们使用 <code>type</code> 创建类型别名。</p><p>类型别名常用于联合类型。</p><h3 id="字符串字面量类型"><a href="#字符串字面量类型" class="headerlink" title="字符串字面量类型"></a>字符串字面量类型</h3><p>字符串字面量类型用来约束取值只能是某几个字符串中的一个。</p><p>简单的例子</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> EventNames = <span class="string">'click'</span> | <span class="string">'scroll'</span> | <span class="string">'mousemove'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">ele: Element, event: EventNames</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleEvent(<span class="built_in">document</span>.getElementById(<span class="string">'hello'</span>), <span class="string">'scroll'</span>);  <span class="comment">// 没问题</span></span><br><span class="line">handleEvent(<span class="built_in">document</span>.getElementById(<span class="string">'world'</span>), <span class="string">'dbclick'</span>); <span class="comment">// 报错，event 不能为 'dbclick'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(7,47): error TS2345: Argument of type '"dbclick"' is not assignable to parameter of type 'EventNames'.</span></span><br></pre></td></tr></table></figure><p>上例中，我们使用 <code>type</code> 定了一个字符串字面量类型 <code>EventNames</code>，它只能取三种字符串中的一种。</p><p>注意，<strong>类型别名与字符串字面量类型都是使用 type 进行定义。</strong></p><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><ul><li>数组合并了相同类型的对象，而元组（Tuple）合并了不同类型的对象。</li><li>当赋值或访问一个已知索引的元素时，会得到正确的类型，也可以只赋值其中一项。但是当直接对元组类型的变量进行初始化或者赋值的时候，需要提供所有元组类型中指定的项。</li><li>当赋值给越界的元素时，它类型会被限制为<strong>元组中每个类型的联合类型</strong>。</li></ul><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><ul><li><p>枚举成员会被赋值为从 <code>0</code> 开始递增的数字，同时也会对枚举值到枚举名进行反向映射：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Days &#123;Sun, Mon, Tue, Wed, Thu, Fri, Sat&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Sun"</span>] === <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Mon"</span>] === <span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Tue"</span>] === <span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Sat"</span>] === <span class="number">6</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">0</span>] === <span class="string">"Sun"</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">1</span>] === <span class="string">"Mon"</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">2</span>] === <span class="string">"Tue"</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">6</span>] === <span class="string">"Sat"</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>未手动赋值的枚举项会接着上一个枚举项递增。如果未手动赋值的枚举项与手动赋值的重复了，TypeScript 是不会察觉到这一点的。</p></li><li><p>手动赋值的枚举项可以不是数字，此时需要使用类型断言来让tsc无视类型检查 (编译出的js仍然是可用的)。</p></li><li><p>手动赋值的枚举项也可以为小数或负数，此时后续未手动赋值的项的递增步长仍为 <code>1</code>。</p></li><li><p>常数项和计算所得项的完整定义：</p><p>当满足以下条件时，枚举成员被当作是常数：</p><ul><li>不具有初始化函数并且之前的枚举成员是常数。在这种情况下，当前枚举成员的值为上一个枚举成员的值加 <code>1</code>。但第一个枚举元素是个例外。如果它没有初始化方法，那么它的初始值为 <code>0</code>。</li><li>枚举成员使用常数枚举表达式初始化。常数枚举表达式是 TypeScript 表达式的子集，它可以在编译阶段求值。当一个表达式满足下面条件之一时，它就是一个常数枚举表达式：<ul><li>数字字面量</li><li>引用之前定义的常数枚举成员（可以是在不同的枚举类型中定义的）如果这个成员是在同一个枚举类型中定义的，可以使用非限定名来引用</li><li>带括号的常数枚举表达式</li><li><code>+</code>, <code>-</code>, <code>~</code> 一元运算符应用于常数枚举表达式</li><li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code>, <code>&amp;</code>, <code>|</code>, <code>^</code> 二元运算符，常数枚举表达式做为其一个操作对象。若常数枚举表达式求值后为NaN或Infinity，则会在编译阶段报错</li></ul></li></ul></li><li><p>常数枚举是使用 <code>const enum</code> 定义的枚举类型。</p></li><li><p>常数枚举与普通枚举的区别是，它会在编译阶段被删除，并且不能包含计算成员。</p></li><li><p>外部枚举与声明语句一样，常出现在声明文件中。</p></li><li><p>同时使用 <code>declare</code> 和 <code>const</code> 也是可以的。</p></li></ul><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><ul><li>与类相关的概念：<ul><li>类(Class)：定义了一件事物的抽象特点，包含它的属性和方法</li><li>对象（Object）：类的实例，通过 <code>new</code> 生成</li><li>面向对象（OOP）的三大特性：封装、继承、多态</li><li>封装（Encapsulation）：将对数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能通过对外提供的接口来访问该对象，同时也保证了外界无法任意更改对象内部的数据</li><li>继承（Inheritance）：子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特性</li><li>多态（Polymorphism）：由继承而产生了相关的不同的类，对同一个方法可以有不同的响应。比如 <code>Cat</code> 和 <code>Dog</code> 都继承自 <code>Animal</code>，但是分别实现了自己的 <code>eat</code> 方法。此时针对某一个实例，我们无需了解它是 <code>Cat</code> 还是 <code>Dog</code>，就可以直接调用 <code>eat</code> 方法，程序会自动判断出来应该如何执行 <code>eat</code></li><li>存取器（getter &amp; setter）：用以改变属性的读取和赋值行为</li><li>修饰符（Modifiers）：修饰符是一些关键字，用于限定成员或类型的性质。比如 <code>public</code> 表示公有属性或方法</li><li>抽象类（Abstract Class）：抽象类是供其他类继承的基类，抽象类不允许被实例化。抽象类中的抽象方法必须在子类中被实现</li><li>接口（Interfaces）：不同类之间公有的属性或方法，可以抽象成一个接口。接口可以被类实现（implements）。一个类只能继承自另一个类，但是可以实现多个接口</li></ul></li><li>TypeScript 中类的用法<ul><li>public private 和 protected</li><li>需要注意的是，TypeScript 编译之后的代码中，并没有限制 private 属性在外部的可访问性。</li><li>abstract 用于定义抽象类和其中的抽象方法。抽象类是不允许被实例化的，只能被继承，抽象类中的抽象方法必须被子类实现。</li></ul></li></ul><h3 id="类与接口"><a href="#类与接口" class="headerlink" title="类与接口"></a>类与接口</h3><ul><li>接口的另一个用途，对类的一部分行为进行抽象。</li><li>实现（implements）是面向对象中的一个重要概念。一般来讲，一个类只能继承自另一个类，有时候不同类之间可以有一些共有的特性，这时候就可以把特性提取成接口（interfaces），用 <code>implements</code> 关键字来实现。这个特性大大提高了面向对象的灵活性。</li><li>一个类可以实现多个接口。</li><li>接口与接口之间可以是继承关系。</li><li>接口也可以继承类。</li><li>可以使用接口的方式来定义一个函数需要符合的形状。</li></ul><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><ul><li><p>泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。</p></li><li><p>泛型约束：</p><p>在函数内部使用泛型变量的时候，由于事先不知道它是哪种类型，所以不能随意的操作它的属性或方法，这时，我们可以对泛型进行约束。</p></li><li><p>泛型接口：</p><ul><li><p>可以使用含有泛型的接口来定义函数的形状</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> CreateArrayFunc &#123;</span><br><span class="line">    &lt;T&gt;(length: <span class="built_in">number</span>, value: T): <span class="built_in">Array</span>&lt;T&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> createArray: CreateArrayFunc;</span><br><span class="line">createArray = <span class="function"><span class="keyword">function</span>&lt;<span class="title">T</span>&gt;(<span class="params">length: <span class="built_in">number</span>, value: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result: T[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createArray(<span class="number">3</span>, <span class="string">'x'</span>); <span class="comment">// ['x', 'x', 'x']</span></span><br></pre></td></tr></table></figure></li><li><p>进一步，我们可以把泛型参数提前到接口名上，注意，此时在使用泛型接口的时候，需要定义泛型的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> CreateArrayFunc&lt;T&gt; &#123;</span><br><span class="line">    (length: <span class="built_in">number</span>, value: T): <span class="built_in">Array</span>&lt;T&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> createArray: CreateArrayFunc&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line">createArray = <span class="function"><span class="keyword">function</span>&lt;<span class="title">T</span>&gt;(<span class="params">length: <span class="built_in">number</span>, value: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result: T[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createArray(<span class="number">3</span>, <span class="string">'x'</span>); <span class="comment">// ['x', 'x', 'x']</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>泛型类：</p><p>与泛型接口类似，泛型也可以用于类的类型定义中：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> GenericNumber&lt;T&gt; &#123;</span><br><span class="line">    zeroValue: T;</span><br><span class="line">    add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure></li><li><p>泛型参数的默认类型</p><p>在 TypeScript 2.3 以后，我们可以为泛型中的类型参数指定默认类型。当使用泛型时没有在代码中直接指定类型参数，从实际值参数中也无法推测出时，这个默认类型就会起作用。</p></li></ul><h3 id="声明合并"><a href="#声明合并" class="headerlink" title="声明合并"></a>声明合并</h3><p>定义：如果定义了两个相同名字的函数、接口或类，那么它们会合并成一个类型。</p><ul><li>函数的合并：可以使用重载定义多个函数类型</li><li>接口的合并：接口中的属性在合并时会简单的合并到一个接口中，合并的属性的类型必须是唯一的。当属性类型不一致时会报错。接口中方法的合并，与函数的合并一样。</li><li>类的合并：类的合并与接口的合并规则一致。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《From JavaScript to TypeScript》的阅读笔记，&lt;a href=&quot;https://ts.xcatliu.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;本书地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>js-design-pattern-observer</title>
    <link href="http://yoursite.com/2018/04/07/js-design-pattern-observer/"/>
    <id>http://yoursite.com/2018/04/07/js-design-pattern-observer/</id>
    <published>2018-04-07T02:47:07.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>js-design-patterns</title>
    <link href="http://yoursite.com/2018/04/07/js-design-patterns/"/>
    <id>http://yoursite.com/2018/04/07/js-design-patterns/</id>
    <published>2018-04-07T02:45:21.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>用 JavaScript 描述数据结构之树</title>
    <link href="http://yoursite.com/2018/04/06/js-data-structure-tree/"/>
    <id>http://yoursite.com/2018/04/06/js-data-structure-tree/</id>
    <published>2018-04-06T08:03:14.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p><strong>树</strong> 是一种非顺序数据结构，它用于存储需要快速查找的数据非常有用。</p><a id="more"></a><blockquote><p>树是一种非常常用的数据结构，特别是二叉树。</p><p>二叉树是程序中一种非常重要的数据结构。</p><p>但其实树没有想象中的那么难，不要因为长得形状复杂，方法多，就害怕，其实还好。</p></blockquote><h2 id="树的概念"><a href="#树的概念" class="headerlink" title="树的概念"></a>树的概念</h2><h3 id="真实的树"><a href="#真实的树" class="headerlink" title="真实的树"></a>真实的树</h3><p>数据结构中的树来源于生活，一般而言，树都有一个根，上面是枝干，枝干分叉成树枝，树枝又会分叉成更小的树枝，树枝上还有叶子，如下图：</p><p><img src="/images/tree.jpg" alt="真实的树"></p><h3 id="树的抽象"><a href="#树的抽象" class="headerlink" title="树的抽象"></a>树的抽象</h3><p>树是一种分层数据的抽象模型。现实中最常见的例子是家谱，或是公司的组织架构：</p><p><img src="/images/tree-of-family.jpg" alt="家谱"></p><p><img src="/images/company-structure.jpg" alt="公司组织架构"></p><p>然后我们把这些抽象出来，就是数据结构中的树：</p><p><img src="/images/tree-structure.jpg" alt="数据结构中的树"></p><h3 id="树的术语"><a href="#树的术语" class="headerlink" title="树的术语"></a>树的术语</h3><ul><li><strong>树</strong>：一般而言，树不能为空，二叉树可以为空。树是包含 n（n&gt;0）个结点的有穷集。</li><li><strong>结点</strong>：树中的每个元素称为结点。</li><li><strong>根结点</strong>：位于树顶部的结点，它没有父结点。</li><li><strong>父结点</strong>：若一个结点含有子结点，则这个结点称为其子结点的父结点。</li><li><strong>子结点</strong>：一个结点含有的子树的根结点称为该结点的子结点。</li><li><strong>外部结点（叶子结点）</strong>：没有子结点的结点。</li><li><strong>内部结点（分枝结点）</strong>：至少有一个子结点的结点。</li><li><strong>兄弟结点</strong>：具有相同父结点的结点互称为兄弟结点。</li><li><strong>子树</strong>：以某结点为根的子树中任一结点都称为该结点的子孙。</li><li><strong>结点的层次</strong>：从根开始定义起，根为第1层，根的子结点为第2层，以此类推。</li><li><strong>树的深度（高度）</strong>：树中结点的最大层次。</li><li><strong>结点的度</strong>：一个结点含有的子树的个数称为该结点的度。</li><li><strong>树的度</strong>：一棵树中，最大的结点的度称为树的度。</li><li><strong>子孙</strong>：以某结点为根的子树中任一结点都称为该结点的子孙。</li><li><strong>森林</strong>：由 m（m&gt;=0）棵互不相交的树的集合称为森林。</li></ul><h3 id="树的种类"><a href="#树的种类" class="headerlink" title="树的种类"></a>树的种类</h3><ul><li><strong>无序树</strong>：树中任意结点的子结点之间没有顺序关系，这种树称为无序树,也称为自由树。父子结点之间都有顺序。</li><li><strong>有序树</strong>：树中任意结点的子结点之间有顺序关系，这种树称为有序树。父子结点之间都有顺序。</li><li><strong>二叉树</strong>：每个结点最多含有两个子树的树称为二叉树。</li></ul><h3 id="树的表示"><a href="#树的表示" class="headerlink" title="树的表示"></a>树的表示</h3><p>树可以有多种表示方法，例如双亲方法、孩子表示法、孩子-双亲表示法、孩子-兄弟表示法。</p><h4 id="双亲表示法"><a href="#双亲表示法" class="headerlink" title="双亲表示法"></a>双亲表示法</h4><p>取一块连续的内存空间，在存储每个结点的同时，各自都附加一个记录其父结点位置的变量。</p><p><img src="/images/parent-tree.png" alt="二叉树的双亲表示法"></p><p>当算法中需要在树结构中频繁地查找某结点的父结点时，使用双亲表示法最合适。当频繁地访问结点的孩子结点时，双亲表示法就很麻烦，采用孩子表示法就很简单。</p><h4 id="孩子表示法"><a href="#孩子表示法" class="headerlink" title="孩子表示法"></a>孩子表示法</h4><p>将树中的每个结点的孩子结点排列成一个线性表，用链表存储起来。对于含有 n 个结点的树来说，就会有 n 个单链表，将 n 个单链表的头指针存储在一个线性表中，这样的表示方法就是孩子表示法。</p><p>如果结点没有孩子（例如叶子结点），那么它的单链表为空表。</p><p><img src="/images/child-tree.png" alt="二叉树的孩子表示法"></p><h4 id="孩子双亲表示法"><a href="#孩子双亲表示法" class="headerlink" title="孩子双亲表示法"></a>孩子双亲表示法</h4><p>使用孩子表示法存储的树结构，正好和双亲表示法相反，适用于查找某结点的孩子结点，不适用于查找其父结点。可以将两种表示方法合二为一</p><p><img src="/images/child-parent-tree.png" alt="二叉树的孩子双亲表示法"></p><h4 id="孩子兄弟表示法"><a href="#孩子兄弟表示法" class="headerlink" title="孩子兄弟表示法"></a>孩子兄弟表示法</h4><p>使用链式存储结构存储普通树。链表中每个结点由 3 部分组成：</p><p><img src="/images/tree-node.png" alt="树结点的链表表示"></p><p>其中孩子指针域，表示指向当前结点的第一个孩子结点，兄弟结点表示指向当前结点的下一个兄弟结点。</p><p>通过孩子兄弟表示法，普通树转化为了二叉树，所以孩子兄弟表示法又被称为 <strong>二叉树表示法</strong> 或者 <strong>二叉链表表示法</strong>。</p><p><img src="/images/brothers-tree.png" alt="二叉树的孩子兄弟表示法"></p><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><ol><li><p>二叉树可以为空。</p></li><li><p>二叉树本身是有序树，分左子树和右子树。</p></li><li><p>二叉树中各结点的度最多是 2，可以是 0，1，2。</p></li><li><p>二叉树有五种基本形态</p><p><img src="/images/binary-tree-structure.jpg" alt="二叉树的五种基本形态"></p></li></ol><h4 id="二叉树的分类："><a href="#二叉树的分类：" class="headerlink" title="二叉树的分类："></a>二叉树的分类：</h4><ul><li><p><strong>根二叉树(Rooted Binary Tree)</strong>：有一个根结点，每个结点至多有两个孩子。一般而言的二叉树。</p></li><li><p><strong>满二叉树(Full Binary Tree)</strong>：</p><p>有两个定义：</p><ul><li>一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是满二叉树。也就是完美二叉树。</li><li>要么是叶子结点(结点的度为0)，要么结点同时具有左右子树(结点的度为2)。</li></ul></li><li><p><strong>完全二叉树(Complete Binary Tree)</strong>：每层结点都完全填满，在最后一层上如果不是满的，则只缺少右边的若干结点。</p></li><li><p><strong>完美二叉树(Perfect Binary Tree)</strong>：所有的非叶子结点都有两个孩子，所有的叶子结点都在同一层。即每层结点都完全填满。</p></li><li><p><strong>无限完全二叉树(Infinite Complete Binary Tree)</strong>：每个结点都有两个孩子，结点的层数是无限的。</p></li><li><p><strong>平衡二叉树(Balanced Binary Tree)</strong>： 也称为AVL树，它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p></li><li><p><strong>霍夫曼树(Huffman Tree)</strong>：带权路径最短的二叉树称为哈夫曼树或最优二叉树。</p></li></ul><h4 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h4><ol><li>二叉树中，第 i 层最多有 $2^i-1$ 个结点。</li><li>如果二叉树的深度为 K，那么此二叉树最多有 $2^K-1$ 个结点。</li><li>二叉树中，终端结点数（叶子结点数）为 n0，度为 2 的结点数为 n2，则<code>n0 = n2 + 1</code>。</li></ol><blockquote><p>性质 3 的计算方法为：</p><p>对于一个二叉树来说，除了度为 0 的叶子结点和度为 2 的结点，剩下的就是度为 1 的结点（设为 n1），那么总结点<code>n = n0 + n1 + n2</code>。<br>同时，对于每一个结点来说都是由其父结点分支表示的，假设树中分枝数为 B，那么总结点数<code>n = B + 1</code>。而分枝数是可以通过 n1 和 n2 表示的:<code>B = n1 + 2 * n2</code>。<br>所以，n 用另外一种方式表示为:<code>n=n1+2*n2+1</code>。<br>两种方式得到的 n 值组成一个方程组，就可以得出<code>n0 = n2 + 1</code>。</p></blockquote><h4 id="完全二叉树的性质"><a href="#完全二叉树的性质" class="headerlink" title="完全二叉树的性质"></a>完全二叉树的性质</h4><p>n 个结点的完全二叉树的深度为 $[log_2n]+1$。</p><blockquote><p>$[log_2n]$ 表示取小于 $log_2n$ 的最大整数。例如，$[log_24] = 2$,而 $[log_25]$ 结果也是 2。</p></blockquote><p>对于任意一个完全二叉树来说，将含有的结点按照层次从左到右依次标号，对于任意一个结点 i ，有以下几个结论：</p><ul><li>当 $i &gt; 1$ 时，父亲结点为结点 $[i / 2]$ 。（ $i = 1$ 时，表示的是根结点，无父亲结点）</li><li>如果 $2<em>i &gt; n$ ，则结点 i 肯定没有左孩子（为叶子结点）；否则其左孩子是结点 $2</em>i$ 。</li><li>如果 $2<em>i +1 &gt; n$ ，则结点 i 肯定没有右孩子；否则右孩子是结点 $2</em>i +1$ 。</li></ul><p>二叉树和完全二叉树的各自所特有的性质，需要熟记，在对其进行存储以及利用二叉树解决问题时，会经常用到。</p><h4 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h4><p>二叉树有两种存储结构：<strong>顺序存储结构</strong> 和 <strong>链式存储结构</strong>。</p><p>如果是普通二叉树，用链式存储结构；如果是完全二叉树，用顺序存储结构。</p><h5 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h5><p>借用数组将二叉树中的数据元素存储起来。此方式只适用于完全二叉树，如果想存储普通二叉树，需要将普通二叉树转化为完全二叉树。</p><p>使用数组存储完全二叉树时，从数组的起始地址开始，按层次顺序从左往右依次存储完全二叉树中的结点。当提取时，根据完全二叉树的第 2 条性质，可以将二叉树进行还原。</p><p>例如，上图中的 A 树，数组中存储为：</p><p><img src="/images/tree-A-storage.png" alt="A的顺序存储结构"></p><p>根据完全二叉树的第 2 条性质就可以根据数组中的数据重新搭建二叉树的结构。</p><p>如果普通二叉树也采取顺序存储的方式，就需要将其转化成完全二叉树，然后再存储，例如：</p><p><img src="/images/tree-A-transform.png" alt="普通二叉树转完全二叉树"></p><p>上图转化后的二叉树中，数据元素 0 表示此位置没有数据。将转化后的完全二叉树按照层次并从左到右的次序存储到数组中：</p><p><img src="/images/tree-A-new-storage.png" alt="转化后A的顺序存储结构"></p><p>由此可见。深度为 K 且只有 K 个结点的单支树（树中不存在度为 2 的结点），需要 <code>2K-1</code> 的数组空间，浪费存储空间。所以，顺序存储方式更适用于完全二叉树。</p><h5 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h5><p>采用链式存储结构存储二叉树，就非常容易理解了。根据每个结点的结构，至少需要 3 部分组成：</p><p><img src="/images/binary-tree-chain-storage.png" alt="二叉链表结点构成"></p><p>上图中 <code>Lchild</code> 代表指向左孩子的指针域；<code>data</code> 为数据域；<code>Rchild</code> 代表指向右孩子的指针域。使用此种结点构建的二叉树称为“二叉链表”。</p><p>如果程序中需要频繁地访问结点的父结点，就可以使用下面这种结点结构：</p><p><img src="/images/binary-tree-three-chain-storage.png" alt="三叉链表结点构成"></p><p>上图中，<code>Lchild</code> 指向左孩子；<code>Rchild</code> 指向右孩子；<code>data</code> 为数据域；<code>parent</code> 指向父结点。使用这种结构的结点创建的树称为“三叉链表”。</p><p>例如，分别用两种结点创建上图中的单支树：</p><p><img src="/images/single-tree.png" alt="单支树示意图"></p><h4 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h4><p>二叉树的遍历分为前序遍历，中序遍历和后序遍历。可以简单记为，前中后指的是根结点的位置。</p><ul><li>前序遍历：中左右</li><li>中序遍历：左中右</li><li>后序遍历：左右中</li></ul><p>JavaScript 代码实现，递归</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一棵树</span></span><br><span class="line"><span class="keyword">const</span> tree = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  left: &#123;</span><br><span class="line">    value: <span class="number">2</span>,</span><br><span class="line">    left: &#123;</span><br><span class="line">      value: <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  right: &#123;</span><br><span class="line">    value: <span class="number">3</span>,</span><br><span class="line">    left: &#123;</span><br><span class="line">      value: <span class="number">5</span>,</span><br><span class="line">      left: &#123;</span><br><span class="line">        value: <span class="number">7</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      right: &#123;</span><br><span class="line">        value: <span class="number">8</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    right: &#123;</span><br><span class="line">      value: <span class="number">6</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先序遍历</span></span><br><span class="line"><span class="keyword">const</span> preOrder = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (node) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(node.value)</span><br><span class="line">    preOrder(node.left)</span><br><span class="line">    preOrder(node.right)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'先序遍历：'</span>)</span><br><span class="line">preOrder(tree)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line"><span class="keyword">const</span> midOrder = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (node) &#123;</span><br><span class="line">    midOrder(node.left)</span><br><span class="line">    <span class="built_in">console</span>.log(node.value)</span><br><span class="line">    midOrder(node.right)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'中序遍历：'</span>)</span><br><span class="line">midOrder(tree)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历</span></span><br><span class="line"><span class="keyword">const</span> postOrder = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (node) &#123;</span><br><span class="line">    postOrder(node.left)</span><br><span class="line">    postOrder(node.right)</span><br><span class="line">    <span class="built_in">console</span>.log(node.value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'后序遍历：'</span>)</span><br><span class="line">postOrder(tree)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 层次遍历，获取二叉树深度（高度）</span></span><br><span class="line"><span class="keyword">const</span> getDepth = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!node) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> leftDepth = getDepth(node.left)</span><br><span class="line">  <span class="keyword">let</span> rightDepth = getDepth(node.right)</span><br><span class="line">  <span class="comment">// console.log('leftDepth---', leftDepth)</span></span><br><span class="line">  <span class="comment">// console.log('rightDepth---', rightDepth)</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max(leftDepth, rightDepth) + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'树的深度为：'</span>, getDepth(tree))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 层序遍历</span></span><br><span class="line"><span class="keyword">const</span> levelOrder = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> depth = getDepth(node)</span><br><span class="line">  <span class="keyword">const</span> showNodeOfLevel = <span class="function">(<span class="params">node, level</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span> || level &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (level === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(node.value)</span><br><span class="line">    &#125;</span><br><span class="line">    showNodeOfLevel(node.left, level - <span class="number">1</span>)</span><br><span class="line">    showNodeOfLevel(node.right, level - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; depth; i++) &#123;</span><br><span class="line">    showNodeOfLevel(node, i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'层序遍历：'</span>)</span><br><span class="line">levelOrder(tree)</span><br></pre></td></tr></table></figure><p>JavaScript 代码实现，非递归</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一棵树</span></span><br><span class="line"><span class="keyword">const</span> tree = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  left: &#123;</span><br><span class="line">    value: <span class="number">2</span>,</span><br><span class="line">    left: &#123;</span><br><span class="line">      value: <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  right: &#123;</span><br><span class="line">    value: <span class="number">3</span>,</span><br><span class="line">    left: &#123;</span><br><span class="line">      value: <span class="number">5</span>,</span><br><span class="line">      left: &#123;</span><br><span class="line">        value: <span class="number">7</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      right: &#123;</span><br><span class="line">        value: <span class="number">8</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    right: &#123;</span><br><span class="line">      value: <span class="number">6</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非递归先序遍历</span></span><br><span class="line"><span class="keyword">const</span> iterativePreOrder = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> stack = []</span><br><span class="line">  stack.push(node) <span class="comment">// 入栈</span></span><br><span class="line">  <span class="keyword">while</span> (stack.length !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((node = stack.pop()) != <span class="literal">null</span>) &#123; <span class="comment">//出栈</span></span><br><span class="line">      <span class="built_in">console</span>.log(node.value)</span><br><span class="line">      stack.push(node.right) <span class="comment">//右子结点入栈</span></span><br><span class="line">      stack.push(node.left) <span class="comment">//左子结点入栈</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'非递归先序遍历：'</span>)</span><br><span class="line">iterativePreOrder(tree)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非递归中序遍历</span></span><br><span class="line"><span class="keyword">const</span> iterativeMidOrder = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> stack = []</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (; node != <span class="literal">null</span>; node = node.left) &#123;</span><br><span class="line">      stack.push(node)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stack.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    node = stack.pop()</span><br><span class="line">    <span class="built_in">console</span>.log(node.value)</span><br><span class="line">    node = node.right</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'非递归中序遍历：'</span>)</span><br><span class="line">iterativeMidOrder(tree)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非递归后序遍历，单栈</span></span><br><span class="line"><span class="keyword">const</span> iterativePostOrder = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> stack = [], flag = node <span class="comment">//flag标识已经遍历过的结点</span></span><br><span class="line">  <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (; node.left != <span class="literal">null</span>; node = node.left) &#123;</span><br><span class="line">      stack.push(node) <span class="comment">//左子树的结点逐一入栈</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (node.right == <span class="literal">null</span> || node.right === flag) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(node.value)</span><br><span class="line">      flag = node</span><br><span class="line">      <span class="keyword">if</span> (stack.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      node = stack.pop()</span><br><span class="line">    &#125;</span><br><span class="line">    stack.push(node) <span class="comment">//可能是重新将该结点入栈</span></span><br><span class="line">    node = node.right <span class="comment">//转向右子树</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'非递归后序遍历，单栈：'</span>)</span><br><span class="line">iterativePostOrder(tree)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非递归后序遍历，双栈</span></span><br><span class="line"><span class="keyword">const</span> iterativeDoubleStackPostOrder = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> stack = [], result = []</span><br><span class="line">  <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">    stack.push(node)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 按照根左右顺序逐一入栈、出栈、二次入栈</span></span><br><span class="line">  <span class="keyword">while</span> (stack.length !== <span class="number">0</span>) &#123;</span><br><span class="line">    result.push(node = stack.pop())</span><br><span class="line">    <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">      stack.push(node.left)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">      stack.push(node.right)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (result.length !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result.pop().value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'非递归后序遍历，双栈：'</span>)</span><br><span class="line">iterativeDoubleStackPostOrder(tree)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非递归层序遍历</span></span><br><span class="line"><span class="keyword">const</span> iterativeLeverOrder = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> queue = []  <span class="comment">// 模拟队列</span></span><br><span class="line">  queue.unshift(node)  <span class="comment">//插入根结点到队列最前面</span></span><br><span class="line">  <span class="keyword">while</span> (queue.length !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((node = queue.pop()) != <span class="literal">null</span>) &#123;  <span class="comment">//从队列最后面取结点</span></span><br><span class="line">      <span class="built_in">console</span>.log(node.value)</span><br><span class="line">      queue.unshift(node.left)  <span class="comment">//左子结点入队</span></span><br><span class="line">      queue.unshift(node.right)  <span class="comment">//右子结点入队</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'非递归层序遍历：'</span>)</span><br><span class="line">iterativeLeverOrder(tree)</span><br></pre></td></tr></table></figure><h4 id="二叉树的还原（题型）"><a href="#二叉树的还原（题型）" class="headerlink" title="二叉树的还原（题型）"></a>二叉树的还原（题型）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据二叉树的前序遍历和中序遍历，还原二叉树</span></span><br><span class="line"><span class="comment">// 中序遍历一定是 &#123; 左子树中的结点集合 &#125;，root，&#123; 右子树中的结点集合 &#125;；</span></span><br><span class="line"><span class="comment">// 而前序遍历的作用就是找到每颗子树的root位置。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结点Node类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (value, left, right) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value</span><br><span class="line">    <span class="keyword">this</span>.left = left</span><br><span class="line">    <span class="keyword">this</span>.right = right</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 根据中序遍历和前序遍历创建二叉树</span></span><br><span class="line"><span class="comment"> * param:</span></span><br><span class="line"><span class="comment"> *      preOrder——前序遍历数组</span></span><br><span class="line"><span class="comment"> *      midOrder——中序遍历数组</span></span><br><span class="line"><span class="comment"> * return:</span></span><br><span class="line"><span class="comment"> *      node——构建好的二叉树的根</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> BTFromOrderings = <span class="function">(<span class="params">preOrder, midOrder</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (preOrder.length) &#123;</span><br><span class="line">    <span class="keyword">let</span> rootIndex = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//寻找中序遍历中通过前序遍历获得的根的位置</span></span><br><span class="line">    <span class="keyword">for</span> (; rootIndex &lt; preOrder.length; rootIndex++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (midOrder[rootIndex] === preOrder[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过根结点的位置将中序遍历数组切割</span></span><br><span class="line">    <span class="keyword">const</span> leftMidOrder = midOrder.slice(<span class="number">0</span>, rootIndex)</span><br><span class="line">    <span class="keyword">const</span> rightMidOrder = midOrder.slice(rootIndex + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过递归得到左右子树</span></span><br><span class="line">    <span class="keyword">const</span> leftNode = BTFromOrderings(preOrder.slice(<span class="number">1</span>, leftMidOrder.length + <span class="number">1</span>), leftMidOrder)</span><br><span class="line">    <span class="keyword">const</span> rightNode = BTFromOrderings(preOrder.slice(leftMidOrder.length + <span class="number">1</span>), rightMidOrder)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建二叉树结点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Node(preOrder[<span class="number">0</span>], leftNode, rightNode)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> preOrder = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">const</span> midOrder = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">console</span>.log(BTFromOrderings(preOrder, midOrder))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">Node &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  left: </span><br><span class="line">   Node &#123;</span><br><span class="line">     value: <span class="number">2</span>,</span><br><span class="line">     left: Node &#123; <span class="attr">value</span>: <span class="number">4</span>, <span class="attr">left</span>: <span class="literal">undefined</span>, <span class="attr">right</span>: <span class="literal">undefined</span> &#125;,</span><br><span class="line">     right: <span class="literal">undefined</span> &#125;,</span><br><span class="line">  right: </span><br><span class="line">   Node &#123;</span><br><span class="line">     value: <span class="number">3</span>,</span><br><span class="line">     left: Node &#123; <span class="attr">value</span>: <span class="number">5</span>, <span class="attr">left</span>: <span class="literal">undefined</span>, <span class="attr">right</span>: <span class="literal">undefined</span> &#125;,</span><br><span class="line">     right: Node &#123; <span class="attr">value</span>: <span class="number">6</span>, <span class="attr">left</span>: <span class="literal">undefined</span>, <span class="attr">right</span>: <span class="literal">undefined</span> &#125; &#125; &#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.jianshu.com/p/b7d501591eb7" target="_blank" rel="noopener">数据结构(十一)之树结构</a></li><li><a href="https://juejin.im/entry/59979aaaf265da24817a5928" target="_blank" rel="noopener">在JavaScript中的树</a></li><li><a href="https://www.zhihu.com/question/19809666" target="_blank" rel="noopener">为什么说“满二叉树也是完全二叉树”？</a></li><li><a href="https://en.wikipedia.org/wiki/Binary_tree" target="_blank" rel="noopener">Binary tree</a></li><li><a href="http://data.biancheng.net/view/30.html" target="_blank" rel="noopener">树的双亲表示法、孩子表示法和孩子兄弟表示法</a></li><li><a href="http://blog.51cto.com/mengliao/1178079" target="_blank" rel="noopener">遍历二叉树的九种算法</a></li><li><a href="https://blog.csdn.net/Wonder233/article/details/78412347" target="_blank" rel="noopener">【二叉树】根据二叉树的中序遍历和前序遍历，还原二叉树</a></li><li><a href="https://segmentfault.com/a/1190000004620352" target="_blank" rel="noopener">JS中的二叉树遍历</a></li><li><a href="http://data.biancheng.net/" target="_blank" rel="noopener">数据结构与算法教程，数据结构C语言版教程！</a></li><li><a href="https://www.jianshu.com/p/61f75e0f549f" target="_blank" rel="noopener">JavaScript二叉树深入理解</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;树&lt;/strong&gt; 是一种非顺序数据结构，它用于存储需要快速查找的数据非常有用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="遍历" scheme="http://yoursite.com/tags/%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>封装你的第一个 Vue 组件</title>
    <link href="http://yoursite.com/2018/04/05/package-your-first-vue-component/"/>
    <id>http://yoursite.com/2018/04/05/package-your-first-vue-component/</id>
    <published>2018-04-05T14:32:57.000Z</published>
    <updated>2020-08-04T07:29:12.116Z</updated>
    
    <content type="html"><![CDATA[<p>当被问到 <em>你封装过 Vue 组件吗？</em> 的时候，我是懵逼的。</p><p>心想，Vue 不都是组件嘛？组件化的思想呢？</p><p>后来才发觉，问题出在 <strong>封装</strong> 上。</p><p>封装组件其实很简单！</p><a id="more"></a><p>我们平时写的组件一般是 <strong>业务组件</strong>，需要根据具体的业务需求，完成页面的排布和数据的展示和交互等等，如商品展示组件、订单列表组件等。而 <strong>封装一个组件</strong> 一般指的是 <strong>功能组件</strong>，它是可以独立存在的，例如 按钮、日期选择器、文本编辑器等，UI 框架提供的一般是这种组件，所以才有封装一说。</p><p>这些功能组件一般要满足以下条件：</p><ol><li><p>高性能，高内聚，低耦合</p><p>组件不要有过多的依赖，尽量减少自己的体积，减去不必要的功能，专注自身。</p></li><li><p>数据从父组件传入</p><p>为了达到解耦的目的，组件本身不能生成数据。即使生成了，也只能在组件内部运作，不能传递出去。需要的数据要通过 <strong>props</strong> 传递进来，在父组件配置。</p></li><li><p>在父组件处理事件</p><p>这些功能组件一般会提供很多事件，比如点击，选择等，这时候要把组件的实现暴露出去写在父组件中，只在子组件中留一个调用方法，通过 <strong>emit</strong> 来调用父组件的方法。</p></li><li><p>记得留一个 slot</p><p>有的时候通用的组件不能满足业务的需要，就需要定制化，所以最好留一个 slot，方便解决问题。</p></li><li><p>不要依赖 Vuex</p><p>父子组件之间一般是通过 <strong>props</strong> 和 <strong>自定义事件</strong> 来传参，非父子组件通常会采用 Vuex 传参。一味的使用 Vuex 可能会造成数据泄露，并且在刷新页面的时候 Vuex 中的数据会丢失。</p></li><li><p>合理运用 scoped 编写 CSS</p><p>在编写功能组件的 CSS 时，要加上 scoped 防止污染全局样式。</p><p>但是一味的使用 scoped，肯定会产生大量的重复代码，所以在开发的时候，应该避免在组件中写样式，当全局样式写好之后，再针对每个组件，通过 scoped 属性添加组件样式。</p></li></ol><p>// todo 加上一个例子</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.cnblogs.com/wisewrong/p/6834270.html" target="_blank" rel="noopener">Vue 爬坑之路（九）—— 用正确的姿势封装组件</a></li><li><a href="https://blog.csdn.net/tangxiujiang/article/details/79620542" target="_blank" rel="noopener">Vue封装组件的过程</a></li><li><a href="https://segmentfault.com/a/1190000009090836" target="_blank" rel="noopener">手摸手，带你封装一个vue component</a></li><li><a href="https://www.zhihu.com/question/35820643" target="_blank" rel="noopener">如何使用vue.js构造modal(弹窗)组件?</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当被问到 &lt;em&gt;你封装过 Vue 组件吗？&lt;/em&gt; 的时候，我是懵逼的。&lt;/p&gt;
&lt;p&gt;心想，Vue 不都是组件嘛？组件化的思想呢？&lt;/p&gt;
&lt;p&gt;后来才发觉，问题出在 &lt;strong&gt;封装&lt;/strong&gt; 上。&lt;/p&gt;
&lt;p&gt;封装组件其实很简单！&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="封装" scheme="http://yoursite.com/tags/%E5%B0%81%E8%A3%85/"/>
    
      <category term="组件" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>什么是组件化开发？</title>
    <link href="http://yoursite.com/2018/03/31/what-is-componentization-development/"/>
    <id>http://yoursite.com/2018/03/31/what-is-componentization-development/</id>
    <published>2018-03-31T02:35:57.000Z</published>
    <updated>2020-08-04T07:29:12.116Z</updated>
    
    <content type="html"><![CDATA[<p>这几天面试的时候被问到一个问题，<strong>什么是组件化开发？说一下对组件化的理解？</strong></p><p>我当时说的是 <strong>可复用</strong>，balabala，然后面试官表达了不同的看法。</p><p>事后查了一下，发现自己说的太片面了，所以总结一下。</p><a id="more"></a><p>先补充一下，我发现平时工作中用到的知识，思考的点确实会在面试中暴露出来。哪怕之前可能看过某个知识点了，哪怕之前可能准备了某个问题，但是只要稍微一紧张，可能答出来的就不是准备的，而是 <strong>真实的想法</strong>。</p><p>不是说回答自己真实的思考不好，而是说可能不全面，可能会囿于自己。</p><p>比如还问了一个问题，<strong>Vue</strong> 爷孙组件通信的问题。虽然前几天刚看了 <strong>Vue</strong> 的文档，看到了官方给出的解决办法——<strong>使用一个空的 Vue 实例作为事件总线</strong>。但是因为我没有这么用过，所以回答的时候就忘记了，只说了可以用嵌套父子通信或者用 <strong>Vuex</strong>。</p><p>所以必须要做到活学活用，自己多写代码，多实现 API。</p><p>下面回到这篇文章。</p><h2 id="什么是组件化开发"><a href="#什么是组件化开发" class="headerlink" title="什么是组件化开发"></a>什么是组件化开发</h2><p>组件化的概念在后端早已存在多年，只不过近几年随着前端的发展，这个概念在前端开始被频繁提及，特别是在MV*的框架中。</p><p>我一开始回答的是，可复用。是因为我在工作中只这么用过，我自己用 UI 框架，没有写过组件。做项目一般也就我自己，不会跟别人合作，不存在多个人开发一个页面的问题，所以也就不存在需要 <strong>低耦合</strong> 的情况，所以，这个问题当时回答的不好。</p><blockquote><p>组件化从狭义的角度来说一般就是指把 DOM 结构封装成一个个的自定义标签，他们可以有自己的自定义属性。</p><p>组件化从广义的角度来说一般就是指对数据逻辑层的业务代码，把一些业务逻辑代码封装在组件内部，并对外提供接口。</p></blockquote><p>然后呢，这个概念现在没有官方明确的定义，以后估计也不会有。</p><p>可以说是，把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式</p><p>表现为，比如在项目中引入一个组件后，可能会在 <strong>node_modules</strong> 中生成一个组件的目录，里面有组件全部的代码，它自己所需要的依赖等等，它不会对其它组件和源程序本身有什么影响。</p><p>一个自己封装的 <strong>button</strong>，<strong>search</strong> 都可以叫做组件，<strong>组</strong> 是说一种组织方式，<strong>件</strong> 是说一个个的功能，可以随时替换为其它可以实现相同功能的 <strong>件</strong>。</p><h2 id="为什么要组件化开发"><a href="#为什么要组件化开发" class="headerlink" title="为什么要组件化开发"></a>为什么要组件化开发</h2><p>主要是因为现在随着前端迅猛的发展，越来越多的功能在往前端转移，于是页面越来越复杂，交互逻辑越来越复杂，于是就需要多人来共同完成一个页面的开发，之前那种直接写 HTML 的方法就不合适了，所以就需要封装，需要分工合作。</p><p>所以主要是为了完成两个目的：</p><ul><li>小组内可以多人协同开发</li><li>提高后期维护效率</li><li>复用</li></ul><p>其中从 <strong>网上找开源的组件包 *<em>或者 *</em>用 UI 框架</strong>，也可以理解为一种多人协作的方式，因为本质都是你的页面中的某个组件不是自己开发的嘛。</p><p>概括为：<strong>高内聚，低耦合。</strong></p><p>采用组件化开发后，小组内在开发项目时，自己只需要负责某一块内容即可，在需要其它组件的时候，只需要查看相应的 API即可，不需要关注其实现细节，而且关于数据，它只会对传给它的数据吐出相应的结果，不会对外部变量产生作用。</p><p>然后就是后期维护效率了，如果我要实现一个网站的头部，就可以把这个模块单独抽离出来进行封装，根据不同的业务要求，可以有效的定制不同的头部（当然要结构是一致的了，只不过是它只是关心你给我什么内容，我的展示不同而已，这和外界的数据是不一样的，你外界什么数据我不关心，我只关心你给我的）。</p><h2 id="组件化开发的优势"><a href="#组件化开发的优势" class="headerlink" title="组件化开发的优势"></a>组件化开发的优势</h2><ol><li>协同开发，提高开发效率</li><li>提高代码（组件）的复用性</li><li>开发、调试、找 Bug 都更简单，可以用排除法移除不相关组件</li><li>降低耦合度，当由于需求的变更某个组件不满足需求时，可以马上替换为新的组件</li><li>提高可维护性，由于每个组件的职责单一，并且组件在系统中是被复用的，所以对代码进行优化可获得系统的整体升级</li><li>组件可以积累下来，在不同的系统中使用，积累多了之后可以形成公司内的一套组件库，还可以不断更新</li><li>使用接口（props、events和methods）使少量的耦合明显且可控</li><li>拆分复杂度，减少你需要同时关注的代码量和状态，减轻程序员的思维负担</li><li>隔离复杂度，把高复杂度的代码隔离起来，易于维护和重构</li></ol><h2 id="哪些需要组件化"><a href="#哪些需要组件化" class="headerlink" title="哪些需要组件化"></a>哪些需要组件化</h2><p>从上面的优势可以看出来，大概分两类：</p><ol><li>可以复用的</li><li>可拆分的，一块比较大的逻辑比较复杂的单元</li></ol><p>复用代表这个组件要到处引用，一是为了抽象概念，二是为了后期更好地维护。</p><p>而比如像banner这种内部逻辑比较复杂的模块，为了更好梳理里面的逻辑也应该和父组件解耦，独立成一个单元。</p><h2 id="组件化的原则"><a href="#组件化的原则" class="headerlink" title="组件化的原则"></a>组件化的原则</h2><ol><li><p>标准化</p><p>多人协作如果不制定一套标准的话，显然是进行不下去的，任何一个组件都应该遵守一套标准，可以使得不同区域的开发人员据此标准开发出一套标准统一的组件。（组建命名规则、就近原则、样式分离独立文件）</p></li><li><p>组合性</p><p>组件必定是需要相互嵌套组合的，这就需要组件间具有相互的独立性以及有良好的接口，这也是一个组件最基本的构成。</p></li><li><p>重用性</p><p>组件内部应该是高聚合的，任何一个组件都应该是一个可以独立的单元，可以扩展到其他不同的应用场景。</p></li><li><p>可维护性</p><p>任何一个组件应该都具有一套自己的完整的稳定的功能，仅包含自身的，与其它组件无关的逻辑，使其更加的容易理解，使其更加的容易理解，同时大大减少发生bug的几率。</p></li></ol><h2 id="组件化-VS-模块化"><a href="#组件化-VS-模块化" class="headerlink" title="组件化 VS 模块化"></a>组件化 VS 模块化</h2><p>简而言之：</p><ul><li>模块化解决了分而治之的问题</li><li>组件化解决了代码复用的问题</li></ul><p>组件是高级别的模块，有着生命周期的概念</p><p>具体可以参考 贺老 的这篇博客，<a href="https://github.com/hax/hax.github.com/issues/21" target="_blank" rel="noopener">关于前端开发中“模块”和“组件”概念的思考</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://cn.vuejs.org/v2/guide/components.html#%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E9%80%9A%E4%BF%A1" target="_blank" rel="noopener">Vue 非父子组件的通信</a></li><li><a href="https://code.tutsplus.com/tutorials/componentizing-the-web--cms-20602" target="_blank" rel="noopener">Componentizing the Web</a></li><li><a href="https://blog.okfn.org/2007/04/30/what-do-we-mean-by-componentization-for-knowledge/" target="_blank" rel="noopener">What Do We Mean by Componentization (for Knowledge)?</a></li><li><a href="https://www.tandemseven.com/technology/6-reasons-component-based-ui-development/" target="_blank" rel="noopener">6 Reasons for Employing Component-based UI Development<br>View Larger Image</a></li><li><a href="https://www.zhihu.com/question/29735633" target="_blank" rel="noopener">什么叫组件化开发?</a></li><li><a href="https://www.jianshu.com/p/b304614005d4" target="_blank" rel="noopener">什么是前端组件化和模块化？</a></li><li><a href="https://www.kancloud.cn/zep-tsang/components" target="_blank" rel="noopener">组件化理解文档</a></li><li><a href="https://segmentfault.com/q/1010000004613981" target="_blank" rel="noopener">论前端模块化与组件化的区别？</a></li><li><a href="https://github.com/hax/hax.github.com/issues/21" target="_blank" rel="noopener">关于前端开发中“模块”和“组件”概念的思考</a>  贺师俊</li><li><a href="http://tutuge.me/2016/03/29/modular-and-component-summary/" target="_blank" rel="noopener">对组件化与模块化的思考与总结</a></li><li><a href="https://github.com/xufei/blog/issues/6" target="_blank" rel="noopener">Web应用的组件化（一）——基本思路</a></li><li><a href="https://github.com/xufei/blog/issues/7" target="_blank" rel="noopener">Web应用的组件化（二）——管控平台</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天面试的时候被问到一个问题，&lt;strong&gt;什么是组件化开发？说一下对组件化的理解？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我当时说的是 &lt;strong&gt;可复用&lt;/strong&gt;，balabala，然后面试官表达了不同的看法。&lt;/p&gt;
&lt;p&gt;事后查了一下，发现自己说的太片面了，所以总结一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="组件化" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 Virtual Dom</title>
    <link href="http://yoursite.com/2018/03/26/dive-into-virtual-dom/"/>
    <id>http://yoursite.com/2018/03/26/dive-into-virtual-dom/</id>
    <published>2018-03-26T10:48:35.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>之前在用 <strong>Vue</strong> 和 <strong>React</strong> 的时候知道了 <strong>Virtual Dom</strong> 这个概念， 大概知道是起什么作用的。最近深入理解了一下这个概念，从 <strong>what</strong>、<strong>why</strong> 到 <strong>how</strong>。</p><a id="more"></a><h2 id="什么是-Virtual-DOM"><a href="#什么是-Virtual-DOM" class="headerlink" title="什么是 Virtual DOM"></a>什么是 Virtual DOM</h2><p><strong>DOM</strong> 大家都知道，<strong>Document Object Model</strong>，<strong>文档对象模型</strong>，它将文档解析为一个由节点和对象（包含属性和方法的对象）组成的结构集合。简言之，它会将web页面和脚本或程序语言连接起来。详细参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Introduction" target="_blank" rel="noopener">什么是 DOM?</a></p><p>那 Virtual DOM 呢？</p><p>之前的前端工程师一般使用 JQuery 来操作 DOM，监控数据变化，完成各种需求。然而随着需求越来越复杂，页面也越来越复杂，臃肿，一直用 JQuery 来手动操作的话，有时候会不方便，比较烦。然后就出现了一些 <strong>数据驱动</strong> 的框架。</p><p>前端工程师通过监听页面中数据的变化，在浏览器中完成计算后，生成新的 DOM 节点，更新 DOM，完成页面上响应的改变。</p><p>由于要监听 <strong>数据的变化</strong>，就需要 <strong>作比较</strong>，分析哪里变化了，哪里没有变。也就是需要创造一个数据结构来存储旧的 DOM，然后根据数据的变化，生成新的 DOM，再作比较，在更新的时候，只更新变化的部分即可。</p><p>Virtual DOM 概括来讲，就是在数据和真实 DOM 之间建立了一层缓冲。</p><p>于是这里就有了两个操作，<strong>diff</strong> 和  <strong>patch</strong>，分别用来 <strong>比较差异 *<em>和 *</em>更新 DOM</strong>。</p><h2 id="为什么要用-Virtual-DOM"><a href="#为什么要用-Virtual-DOM" class="headerlink" title="为什么要用 Virtual DOM"></a>为什么要用 Virtual DOM</h2><p>按照我的理解，主要是写代码的便利性和一种编程思想的引入，性能优化是其次，而且关于 React 的 Virtual DOM 是否一定提高了性能是存疑的，网上有很多的讨论，例如 <a href="https://www.zhihu.com/question/31809713" target="_blank" rel="noopener">网上都说操作真实 DOM 慢，但测试结果却比 React 更快，为什么？</a>， [<a href="https://segmentfault.com/q/1010000010520929" target="_blank" rel="noopener">Vue为什么要用VDOM？</a>]，<a href="http://www.zcfy.cc/article/the-one-thing-that-no-one-properly-explains-about-react-why-virtual-dom-hashnode-1211.html" target="_blank" rel="noopener">React中一个没人能解释清楚的问题——为什么要使用Virtual DOM</a>，可以总结为下面节点：</p><ul><li><p>React 火是因为通过引入函数式思维来加强对状态的管理、组件系统让无缝使用第三方组件成为可能、Virtual DOM 可以渲染到非 DOM 的后端从而催生 ReactNative</p></li><li><p>说 Virtual DOM 提升性能那就是在比较，既然是比较，就得有一个标准，一个前提，而这里的前提就要区分是在进行怎样的一个更新 DOM 操作</p><p>比如如果是页面上只新增了一个 p 元素，而如果要刷新页面重新生成 DOM 的话必然会比用 VIrtual DOM 性能差，而如果是一个单页上有 1000 个 item 的 list 在进行翻页操作，这时候用原生的 DOM 操作或许会更快。</p></li><li><p>不论是 Vue 这样的 MVVM 是数据层面进行变化检查的，还是 React 这样的是基于 DOM 结构层面进行变化检查的，都要比直接操作 DOM 写起代码来简单许多 </p></li></ul><h2 id="实现一个-Virtual-DOM"><a href="#实现一个-Virtual-DOM" class="headerlink" title="实现一个 Virtual DOM"></a>实现一个 Virtual DOM</h2><p>自己实现一个 Virtual DOM 不添加 state 等复杂的功能，只进行最基本的 DOM 的渲染，其实并不难，网上也有开源的实现，比如 <a href="https://link.jianshu.com/?t=https://github.com/Matt-Esch/virtual-dom" target="_blank" rel="noopener">virtual-dom</a> 和 <a href="https://link.jianshu.com/?t=https://github.com/paldepind/snabbdom" target="_blank" rel="noopener">Snabbdom</a>，Vue 就是维护了一份 Snabbdom 从而实现的 Virtual DOM。</p><p>具体可以查看上面项目的 Github，或者查看以下链接：</p><ul><li><a href="https://mengera88.github.io/2017/07/24/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAMVVM%E6%A1%86%E6%9E%B6/" target="_blank" rel="noopener">从零开始编写一个MVVM框架（一）（译）</a></li><li><a href="https://mengera88.github.io/2017/07/28/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAMVVM%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%88%E8%AF%91%EF%BC%89/" target="_blank" rel="noopener">从零开始编写一个MVVM框架（二）（译）</a></li><li><a href="https://mengera88.github.io/2017/07/31/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAMVVM%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%88%E8%AF%91%EF%BC%89/" target="_blank" rel="noopener">从零开始编写一个MVVM框架（三）（译）</a></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.jianshu.com/p/bef1c1ee5a0e" target="_blank" rel="noopener">一起理解 Virtual DOM</a></li><li><a href="https://github.com/snabbdom/snabbdom" target="_blank" rel="noopener">snabbdom/snabbdom</a></li><li><a href="https://github.com/hpoenixf/vdom" target="_blank" rel="noopener">hpoenixf/vdom</a></li><li><a href="https://www.zhihu.com/question/67479886" target="_blank" rel="noopener">既然用 virtual dom 可以提高性能，为什么浏览器不直接自带这个功能呢？</a></li><li><a href="https://www.zhihu.com/question/29504639" target="_blank" rel="noopener">如何理解虚拟DOM?</a></li><li><a href="http://www.infoq.com/cn/articles/react-dom-diff" target="_blank" rel="noopener">深入浅出React（四）：虚拟DOM Diff算法解析</a></li><li><a href="https://juejin.im/entry/591a5f14128fe1005cdad9b5" target="_blank" rel="noopener">vue 的 Virtual Dom 实现 - snabbdom 解密</a></li><li><a href="https://segmentfault.com/q/1010000010520929" target="_blank" rel="noopener">Vue为什么要用VDOM？</a></li><li><a href="http://www.zcfy.cc/article/the-one-thing-that-no-one-properly-explains-about-react-why-virtual-dom-hashnode-1211.html" target="_blank" rel="noopener">React中一个没人能解释清楚的问题——为什么要使用Virtual DOM</a></li><li><a href="http://www.alloyteam.com/2015/10/react-virtual-analysis-of-the-dom/" target="_blank" rel="noopener">React虚拟DOM浅析</a></li><li><a href="https://www.zhihu.com/question/31809713" target="_blank" rel="noopener">网上都说操作真实 DOM 慢，但测试结果却比 React 更快，为什么？</a></li><li><a href="https://github.com/livoras/blog/issues/13" target="_blank" rel="noopener">深度剖析：如何实现一个 Virtual DOM 算法</a></li><li><a href="https://cloud.tencent.com/developer/article/1006029" target="_blank" rel="noopener">深入 Vue2.x 的虚拟 DOM diff 原理</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在用 &lt;strong&gt;Vue&lt;/strong&gt; 和 &lt;strong&gt;React&lt;/strong&gt; 的时候知道了 &lt;strong&gt;Virtual Dom&lt;/strong&gt; 这个概念， 大概知道是起什么作用的。最近深入理解了一下这个概念，从 &lt;strong&gt;what&lt;/strong&gt;、&lt;strong&gt;why&lt;/strong&gt; 到 &lt;strong&gt;how&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="Virtual Dom" scheme="http://yoursite.com/tags/Virtual-Dom/"/>
    
      <category term="虚拟 DOM" scheme="http://yoursite.com/tags/%E8%99%9A%E6%8B%9F-DOM/"/>
    
  </entry>
  
  <entry>
    <title>CSS Hacks</title>
    <link href="http://yoursite.com/2018/03/21/css-hacks/"/>
    <id>http://yoursite.com/2018/03/21/css-hacks/</id>
    <published>2018-03-21T12:35:56.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>搜集整理一下 CSS Hacks</p><a id="more"></a><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><p>如果 <code>.parent</code> 的 <code>height</code>不写，只需要 <code>padding: 10px 0;</code> 就能将 <code>.child</code> 垂直居中。<br>如果 <code>.parent</code> 的 <code>height</code> 写死了，就很难把 <code>.child</code> 居中，以下是垂直居中的方法：</p><blockquote><p>忠告：能不写 <code>height</code> 就千万别写 <code>height</code>。</p></blockquote><ol><li><a href="http://js.jirengu.com/gaquk/2/edit" target="_blank" rel="noopener">table自带功能</a></li><li><a href="http://js.jirengu.com/poveg/1/edit" target="_blank" rel="noopener">100% 高度的 afrer before 加上 inline block</a><br><a href="http://js.jirengu.com/poveg/3/edit" target="_blank" rel="noopener">它的优化</a></li><li><a href="http://js.jirengu.com/yusux/6/edit" target="_blank" rel="noopener">div 装成 table</a></li><li><a href="http://js.jirengu.com/sugex/1/edit" target="_blank" rel="noopener">margin-top -50%</a></li><li><a href="http://js.jirengu.com/sugex/3/edit" target="_blank" rel="noopener">translate -50%</a></li><li><a href="http://js.jirengu.com/sugex/5/edit" target="_blank" rel="noopener">absolute margin auto</a></li><li><a href="http://js.jirengu.com/sugex/7/edit" target="_blank" rel="noopener">flex</a></li></ol><h3 id="table自带功能"><a href="#table自带功能" class="headerlink" title="table自带功能"></a>table自带功能</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 垂直居中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      .parent &#123;</span><br><span class="line">        border: 1px solid red;</span><br><span class="line">      &#125;</span><br><span class="line">      .child &#123;</span><br><span class="line">        border: 1px solid green;</span><br><span class="line">        padding: 100px 10px;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">          一串文字</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="100-高度的-afrer-before-加上-inline-block"><a href="#100-高度的-afrer-before-加上-inline-block" class="headerlink" title="100% 高度的 afrer before 加上 inline block"></a>100% 高度的 afrer before 加上 inline block</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 垂直居中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      .parent &#123;</span><br><span class="line">        border: 3px solid red;</span><br><span class="line">        height: 1000px;</span><br><span class="line">        text-align: center;</span><br><span class="line">      &#125;</span><br><span class="line">      .child &#123;</span><br><span class="line">        border: 3px solid black;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        width: 300px;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">      &#125;</span><br><span class="line">      .parent .before &#123;</span><br><span class="line">        outline: 3px solid red;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        height: 100%;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">      &#125;</span><br><span class="line">      .parent .after &#123;</span><br><span class="line">        outline: 3px solid red;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        height: 100%;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">before</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">        一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字</span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">after</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="它的优化"><a href="#它的优化" class="headerlink" title="它的优化"></a>它的优化</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 垂直居中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      .parent &#123;</span><br><span class="line">        border: 3px solid red;</span><br><span class="line">        height: 600px;</span><br><span class="line">        text-align: center;</span><br><span class="line">      &#125;</span><br><span class="line">      .child &#123;</span><br><span class="line">        border: 3px solid black;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        width: 300px;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">      &#125;</span><br><span class="line">      .parent:before &#123;</span><br><span class="line">        content: '';</span><br><span class="line">        outline: 3px solid red;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        height: 100%;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">      &#125;</span><br><span class="line">      .parent:after &#123;</span><br><span class="line">        content: '';</span><br><span class="line">        outline: 3px solid red;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        height: 100%;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">        一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="div-装成-table"><a href="#div-装成-table" class="headerlink" title="div 装成 table"></a>div 装成 table</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 垂直居中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      div.table &#123;</span><br><span class="line">        display: table;</span><br><span class="line">        border: 1px solid red;</span><br><span class="line">        height: 600px;</span><br><span class="line">      &#125;</span><br><span class="line">      /* div.tr&#123;</span><br><span class="line">        display: table-row;</span><br><span class="line">        border: 1px solid green;</span><br><span class="line">      &#125; */</span><br><span class="line">      div.td &#123;</span><br><span class="line">        display: table-cell;</span><br><span class="line">        border: 1px solid blue;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">      &#125;</span><br><span class="line">      .child &#123;</span><br><span class="line">        border: 10px solid black;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"td"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">          一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="margin-top-50"><a href="#margin-top-50" class="headerlink" title="margin-top -50%"></a>margin-top -50%</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 垂直居中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      .parent &#123;</span><br><span class="line">        height: 600px;</span><br><span class="line">        border: 1px solid red;</span><br><span class="line">        position: relative;</span><br><span class="line">      &#125;</span><br><span class="line">      .child &#123;</span><br><span class="line">        border: 1px solid green;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: 50%;</span><br><span class="line">        left: 50%;</span><br><span class="line">        width: 300px;</span><br><span class="line">        margin-left: -150px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        margin-top: -50px;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">        一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="translate-50"><a href="#translate-50" class="headerlink" title="translate -50%"></a>translate -50%</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 垂直居中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      .parent&#123;</span><br><span class="line">        height: 600px;</span><br><span class="line">        border: 1px solid red;</span><br><span class="line">        position: relative;</span><br><span class="line">      &#125;</span><br><span class="line">      .child&#123;</span><br><span class="line">        border: 1px solid green;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: 50%;</span><br><span class="line">        left: 50%;</span><br><span class="line">        transform: translate(-50%,-50%);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">        一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="absolute-margin-auto"><a href="#absolute-margin-auto" class="headerlink" title="absolute margin auto"></a>absolute margin auto</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 垂直居中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      .parent &#123;</span><br><span class="line">        height: 600px;</span><br><span class="line">        border: 1px solid red;</span><br><span class="line">        position: relative;</span><br><span class="line">      &#125;</span><br><span class="line">      .child &#123;</span><br><span class="line">        border: 1px solid green;</span><br><span class="line">        position: absolute;</span><br><span class="line">        width: 300px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        margin: auto;</span><br><span class="line">        top: 0;</span><br><span class="line">        bottom: 0;</span><br><span class="line">        left: 0;</span><br><span class="line">        right: 0;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">        一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 垂直居中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      .parent &#123;</span><br><span class="line">        height: 600px;</span><br><span class="line">        border: 3px solid red;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">      &#125;</span><br><span class="line">      .child &#123;</span><br><span class="line">        border: 3px solid green;</span><br><span class="line">        width: 300px;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">        一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字一串文字</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搜集整理一下 CSS Hacks&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="Hacks" scheme="http://yoursite.com/tags/Hacks/"/>
    
  </entry>
  
  <entry>
    <title>Javascript Hacks</title>
    <link href="http://yoursite.com/2018/03/21/js-hacks/"/>
    <id>http://yoursite.com/2018/03/21/js-hacks/</id>
    <published>2018-03-21T12:35:18.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>收藏记录一下遇到的可以归并为 JavaScript Hacks 的内容</p><a id="more"></a><h3 id="与"><a href="#与" class="headerlink" title="! 与 !!"></a>! 与 !!</h3><p><code>!</code> 在 EcmaScript 中的定义是：</p><blockquote><p>产生式 <code>UnaryExpression : ! UnaryExpression</code> 按照下面的过程执行：</p><ul><li>令 <code>expr</code> 为解析执行 <code>UnaryExpression</code> 的结果</li><li>令 <code>oldValue</code> 为 ToBoolean(GetValue(<code>expr</code>))</li><li>如果 <code>oldValue</code> 为 true, 返回 false</li><li>返回 true</li></ul></blockquote><p>GetValue 处理取值的细节，例如依附于对象的属性、执行 getter 等，不再深究。重点看下 ToBoolean，它能够将各种类型的值最终转化为布尔类型。具体的规则可参考 <a href="http://es5.github.io/#x9.2" target="_blank" rel="noopener">ES5#9.2 ToBoolean</a> 一节。</p><p>接下来的处理很简单，如果 ToBoolen 得到的结果 <code>oldValue</code> 是 true，那就返回 false，否则返回 true。</p><p><code>!!</code> 在 EcmaScript 中的定义是：</p><blockquote><p>产生式 <code>UnaryExpression : !! UnaryExpression</code> 按照下面的过程执行：</p><ul><li>令 <code>expr</code> 为解析执行 <code>UnaryExpression</code> 的结果</li><li>返回 ToBoolean(GetValue(<code>expr</code>))</li></ul></blockquote><p>是的，比 <code>!</code> 的运算过程减少了两步，执行完 ToBoolean 后就直接返回了。这也是 <code>!!</code>最主要的用途：<strong>将操作数转化为布尔类型</strong>。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">!! <span class="literal">null</span> <span class="comment">// false</span></span><br><span class="line">!! <span class="literal">undefined</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">!! <span class="string">''</span> <span class="comment">// false</span></span><br><span class="line">!! <span class="string">'hello'</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">!! <span class="number">5</span> <span class="comment">// true</span></span><br><span class="line">!! <span class="number">0</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">!! &#123;&#125; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>值得提示的一点是，<code>!!</code> 实际上等效于 <code>Boolean</code> 被当做函数调用的效果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!!(value) === <span class="built_in">Boolean</span>(value)</span><br></pre></td></tr></table></figure><h3 id="与-1"><a href="#与-1" class="headerlink" title="~ 与 ~~"></a>~ 与 ~~</h3><p>按位非操作符 <code>~</code> 比逻辑非操作符 <code>!</code> 复杂一些，作用是将数值比特位中的 1 变成 0，0 变成 1。<code>~</code> 在 EcmaScript 中的定义为：</p><blockquote><p>产生式 <code>UnaryExpression : ~ UnaryExpression</code> 按照下面的过程执行：</p><ul><li>令 <code>expr</code> 为解析执行 <code>UnaryExpression</code> 的结果</li><li>令 <code>oldValue</code> 为 ToInt32(GetValue(<code>expr</code>))</li><li>返回 <code>oldValue</code> 按位取反的结果</li></ul></blockquote><p>与逻辑非执行过程第二步不同，按位非调用的是 ToInt32 而不是 ToBoolean。ToInt32 的处理过程比较复杂，简化为以下四步：</p><ul><li>令 <code>number</code> 为调用 ToNumber 将输入参数转化为数值类型的结果</li><li>如果 <code>number</code> 是 NaN，+0，-0，+∞ 或者 -∞，返回 +0</li><li>令 <code>posInt</code> 为 sign(<code>number</code>) * floor(abs(<code>number</code>))</li><li>将 <code>posInt</code> 进行取模处理，转化为在 −2^31 到 2^31−1 之间的 32 位有符号整数并返回</li></ul><p>从效果上看，ToInt32 依次做了这样几件事：</p><ul><li>类型转换，非数值类型的需要转化为数值类型</li><li>特殊值处理，NaN 和 ∞ 都被转化为 0</li><li>取整，如果是浮点数，会损失小数点后面的精度</li><li>取模，将整数调整到 32 位有符号整数区间内，如果整数原本不在这个区间，会丧失精度</li></ul><p>执行完 ToInt32 之后，将得到的 32 位有符号整数进行按位取反，并将结果返回。</p><p>需要注意的是，所有的位操作都会先将操作数转化为 32 位有符号整数。</p><p>和 <code>!!</code> 与 <code>!</code> 的关系类似，<code>~~</code> 实际上是 <code>~</code> 的简化版：</p><blockquote><p>产生式 <code>UnaryExpression : ~~ UnaryExpression</code> 按照下面的过程执行：</p><ul><li>令 <code>expr</code> 为解析执行 <code>UnaryExpression</code> 的结果</li><li>返回 ToInt32(GetValue(<code>expr</code>))</li></ul></blockquote><p>因为第一次执行 <code>~</code> 时已经将操作数转化为 32 位有符号整数，第二次执行 <code>~</code> 时实际只是将按位取反的结果再次按位取反，相当于取消掉 <code>~</code> 处理过程中的第三步。那么 <code>~~</code> 的用途也就很明确了：<strong>将操作数转化为 32 位有符号整数</strong>。</p><p>下面来看一些具体例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">~~ <span class="literal">null</span> <span class="comment">// 0</span></span><br><span class="line">~~ <span class="literal">undefined</span> <span class="comment">// 0</span></span><br><span class="line">~~ <span class="literal">NaN</span> <span class="comment">// 0</span></span><br><span class="line">~~ &#123;&#125; <span class="comment">// 0</span></span><br><span class="line">~~ <span class="literal">true</span> <span class="comment">// 1</span></span><br><span class="line">~~ <span class="string">''</span> <span class="comment">// 0</span></span><br><span class="line">~~ <span class="string">'string'</span> <span class="comment">// 0</span></span><br><span class="line">~~ <span class="string">'1'</span> <span class="comment">// 1</span></span><br><span class="line">~~ <span class="built_in">Number</span>.POSITIVE_INFINITY <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">~~ <span class="number">1.2</span> <span class="comment">// 1</span></span><br><span class="line">~~ <span class="number">-1.2</span> <span class="comment">// -1</span></span><br><span class="line">~~ <span class="number">1.6</span> <span class="comment">// 1</span></span><br><span class="line">~~ <span class="number">-1.6</span> <span class="comment">// -1</span></span><br><span class="line">~~ (<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>) <span class="comment">// 2147483647 = 2^31-1</span></span><br><span class="line">~~ (<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>)) <span class="comment">// -2147483648 = -2^31</span></span><br><span class="line">~~ (-<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>)) <span class="comment">// -2147483648 = -2^31</span></span><br><span class="line">~~ (-<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>) <span class="comment">// 2147483647 = 2^31-1</span></span><br><span class="line">~~ (<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">32</span>)) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>如果你需要将一个参数转化为 32 位有符号整数，那么 <code>~~</code> 将是最简便的方式。不过要切记，它会损失精度，包括小数和整数部分。</p><h3 id="JavaScript-原始类型转换表"><a href="#JavaScript-原始类型转换表" class="headerlink" title="JavaScript 原始类型转换表"></a>JavaScript 原始类型转换表</h3><table><thead><tr><th>原始值</th><th>转化为数值类型</th><th>转化为字符串类型</th><th>转化为 Boolean 类型</th></tr></thead><tbody><tr><td>false</td><td>0</td><td>“false”</td><td>false</td></tr><tr><td>true</td><td>1</td><td>“true”</td><td>true</td></tr><tr><td>0</td><td>0</td><td>“0”</td><td>false</td></tr><tr><td>1</td><td>1</td><td>“1”</td><td>true</td></tr><tr><td>“0”</td><td>0</td><td>“0”</td><td>true</td></tr><tr><td>“1”</td><td>1</td><td>“1”</td><td>true</td></tr><tr><td>NaN</td><td>NaN</td><td>“NaN”</td><td>false</td></tr><tr><td>Infinity</td><td>Infinity</td><td>“Infinity”</td><td>true</td></tr><tr><td>-Infinity</td><td>-Infinity</td><td>“-Infinity”</td><td>true</td></tr><tr><td>“”</td><td>0</td><td>“”</td><td>false</td></tr><tr><td>“20”</td><td>20</td><td>“20”</td><td>true</td></tr><tr><td>“twenty”</td><td>NaN</td><td>“twenty”</td><td>true</td></tr><tr><td>[ ]</td><td>0</td><td>“”</td><td>true</td></tr><tr><td>[20]</td><td>20</td><td>“20”</td><td>true</td></tr><tr><td>[10,20]</td><td>NaN</td><td>“10,20”</td><td>true</td></tr><tr><td>[“twenty”]</td><td>NaN</td><td>“twenty”</td><td>true</td></tr><tr><td>[“ten”,”twenty”]</td><td>NaN</td><td>“ten,twenty”</td><td>true</td></tr><tr><td>function(){}</td><td>NaN</td><td>“function(){}”</td><td>true</td></tr><tr><td>{ }</td><td>NaN</td><td>“[object Object]”</td><td>true</td></tr><tr><td>null</td><td>0</td><td>“null”</td><td>false</td></tr><tr><td>undefined</td><td>NaN</td><td>“undefined”</td><td>false</td></tr></tbody></table><h3 id="隐式转换举例"><a href="#隐式转换举例" class="headerlink" title="隐式转换举例"></a>隐式转换举例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比较</span></span><br><span class="line">[] == ![] <span class="comment">// true</span></span><br><span class="line"><span class="literal">NaN</span> !== <span class="literal">NaN</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> == <span class="literal">true</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">2</span> == <span class="literal">true</span> <span class="comment">// false</span></span><br><span class="line"><span class="string">"2"</span> == <span class="literal">true</span> <span class="comment">// flase</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> &gt; <span class="number">0</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> &lt; <span class="number">0</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="number">0</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> &gt;= <span class="number">0</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加法</span></span><br><span class="line"><span class="literal">true</span> + <span class="number">1</span> <span class="comment">// 2</span></span><br><span class="line"><span class="literal">undefined</span> + <span class="number">1</span> <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#123;&#125; + <span class="number">1</span> <span class="comment">// 1，这里的 &#123;&#125; 被当成了代码块</span></span><br><span class="line">&#123; <span class="number">1</span> + <span class="number">1</span> &#125; + <span class="number">1</span> <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">obj + <span class="number">1</span> <span class="comment">// [object Object]1</span></span><br><span class="line">&#123;&#125; + &#123;&#125; <span class="comment">// Chrome 上显示 "[object Object][object Object]"，Firefox 显示 NaN</span></span><br><span class="line"></span><br><span class="line">[] + &#123;&#125; <span class="comment">// [object Object]</span></span><br><span class="line">[] + a <span class="comment">// [object Object]</span></span><br><span class="line">+ [] <span class="comment">// 等价于 + "" =&gt; 0</span></span><br><span class="line">&#123;&#125; + [] <span class="comment">// 0</span></span><br><span class="line">a + [] <span class="comment">// [object Object]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>] + [<span class="number">1</span>,<span class="number">2</span>] <span class="comment">// '2,31,2'</span></span><br><span class="line">[<span class="number">2</span>] + <span class="number">1</span> <span class="comment">// '21'</span></span><br><span class="line">[<span class="number">2</span>] + (<span class="number">-1</span>) <span class="comment">// "2-1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 减法或其他操作，无法进行字符串连接，因此在错误的字符串格式下返回 NaN</span></span><br><span class="line">[<span class="number">2</span>] - <span class="number">1</span> <span class="comment">// 1</span></span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>] - <span class="number">1</span> <span class="comment">// NaN</span></span><br><span class="line">&#123;&#125; - <span class="number">1</span> <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h3 id="Javascript-的分号"><a href="#Javascript-的分号" class="headerlink" title="Javascript 的分号"></a>Javascript 的分号</h3><p>真正会导致上下行解析出问题的 token 有 5 个：括号，方括号，正则开头的斜杠，加号，减号。</p><p>总结下来就是一句话：一行开头是括号或者方括号的时候加上分号就可以了，其他时候全部不需要。</p><h2 id="如何判断当前脚本运行在浏览器还是node环境中？"><a href="#如何判断当前脚本运行在浏览器还是node环境中？" class="headerlink" title="如何判断当前脚本运行在浏览器还是node环境中？"></a>如何判断当前脚本运行在浏览器还是node环境中？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.window) <span class="built_in">console</span>.log( <span class="string">'window'</span> ); <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'node'</span>);</span><br><span class="line">&#125;)(<span class="keyword">this</span>)</span><br></pre></td></tr></table></figure><h2 id="A-improved-version-of-typeof"><a href="#A-improved-version-of-typeof" class="headerlink" title="A improved version of typeof"></a>A improved version of typeof</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">typeOf</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> type = <span class="keyword">typeof</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'object'</span>:</span><br><span class="line">        <span class="keyword">return</span> value === <span class="literal">null</span> ? <span class="string">'null'</span> : <span class="built_in">Object</span>.prototype.toString.call(value).</span><br><span class="line">            match(<span class="regexp">/^\[object (.*)\]$/</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'function'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Function'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://shangchun.net/bitwise-not-and-logical-not.htmlbackground" target="_blank" rel="noopener">js 中的 !! 与 ~~</a></li><li><a href="https://www.zhihu.com/question/50856132" target="_blank" rel="noopener">js中使用位操作符取整有没有什么副作用？</a></li><li><a href="https://segmentfault.com/a/1190000004482388" target="_blank" rel="noopener">聊一聊 JS 中的『隐式类型转换』</a></li><li><a href="https://www.zhihu.com/question/20298345" target="_blank" rel="noopener">JavaScript 语句后应该加分号么？</a></li><li>[从++[[]][+[]]+[+[]]==10?深入浅出弱类型JS的隐式转换](<a href="https://github.com/jawil/blog/issues/5" target="_blank" rel="noopener">https://github.com/jawil/blog/issues/5</a>)</li><li><a href="https://www.cnblogs.com/yugege/p/5277883.html" target="_blank" rel="noopener">有趣的JavaScript隐式类型转换</a></li><li><a href="https://stackoverflow.com/questions/472418/why-is-4-not-an-instance-of-number" target="_blank" rel="noopener">Why is 4 not an instance of Number?</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;收藏记录一下遇到的可以归并为 JavaScript Hacks 的内容&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Hacks" scheme="http://yoursite.com/tags/Hacks/"/>
    
  </entry>
  
  <entry>
    <title>常见排序算法的 JavaScript 实现</title>
    <link href="http://yoursite.com/2018/03/17/js-sorts/"/>
    <id>http://yoursite.com/2018/03/17/js-sorts/</id>
    <published>2018-03-17T10:10:03.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>最常用 6 种：冒泡排序、选择排序、计数排序、快速排序、插入排序、归并排序。</p><p>还有：二分插入排序，希尔排序、桶排序、堆排序，基数排序。</p> <a id="more"></a><table><thead><tr><th align="center">排序方法</th><th align="center">空间复杂度</th><th align="center">平均时间复杂度</th><th align="center">最好时间复杂度</th><th align="center">最差时间复杂度</th><th align="center">稳定性</th></tr></thead><tbody><tr><td align="center">冒泡排序</td><td align="center">O(1)</td><td align="center">O($n^2$)</td><td align="center">O($n$)</td><td align="center">O($n^2$)</td><td align="center">稳定</td></tr><tr><td align="center">选择排序</td><td align="center">O($1$)</td><td align="center">O($n^2$)</td><td align="center">O($n^2$)</td><td align="center">O($n^2$)</td><td align="center">不稳定</td></tr><tr><td align="center">计数排序</td><td align="center">O($n$)</td><td align="center">O($n+k$)</td><td align="center">O($n+k$)</td><td align="center">O($n+k$)</td><td align="center">稳定</td></tr><tr><td align="center">快速排序</td><td align="center">O($log_2n$)</td><td align="center">O($nlog_2n$)</td><td align="center">O($nlog_2n$)</td><td align="center">O($n^2$)</td><td align="center">不稳定</td></tr><tr><td align="center">插入排序</td><td align="center">O($1$)</td><td align="center">O($n^2$)</td><td align="center">O($n$)</td><td align="center">O($n^2$)</td><td align="center">稳定</td></tr><tr><td align="center">归并排序</td><td align="center">O($n$)</td><td align="center">O($nlog_2n$)</td><td align="center">O($nlog_2n$)</td><td align="center">O($nlog_2n$)</td><td align="center">稳定</td></tr><tr><td align="center">二分插入排序</td><td align="center">O($1$)</td><td align="center">O($n^2$)</td><td align="center">O($log_2n$)</td><td align="center">O($n^2$)</td><td align="center">稳定</td></tr><tr><td align="center">希尔排序</td><td align="center">O($1$)</td><td align="center">O($nlog_2n$)</td><td align="center">O($n$)</td><td align="center">O($nlog_2n$)</td><td align="center">不稳定</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>两两比较，如果前面的比后面的大，则交换位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bubbleSort = <span class="function">(<span class="params">array</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i ++)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; array.length - <span class="number">1</span> - i; j ++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(array[j] &gt; array[j + <span class="number">1</span>])&#123;</span><br><span class="line">        [array[j], array[j + <span class="number">1</span>]] = [array[j +<span class="number">1</span> ], array[j]]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变种1"><a href="#变种1" class="headerlink" title="变种1"></a>变种1</h3><p>加一个判断标志，如果一次比较没有交换位置，则表示前面的顺序正确，下次不会再次比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bubbleSort = <span class="function">(<span class="params">array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">      flag = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(array[i] &gt; array[i + <span class="number">1</span>])&#123;</span><br><span class="line">          [array[i], array[i + <span class="number">1</span>]] = [array[i + <span class="number">1</span>], array[i]]</span><br><span class="line">          flag = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变种2"><a href="#变种2" class="headerlink" title="变种2"></a>变种2</h3><p>判断后面几个元素，如果他们都是有序的，那就记录下他们起始的位置，下次遍历时，遍历到这里就好了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bubbleSort = <span class="function">(<span class="params">array</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> flag = array.length</span><br><span class="line">    <span class="keyword">while</span>(flag &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> k = flag</span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; k - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[i] &gt; array[i + <span class="number">1</span>])&#123;</span><br><span class="line">                [array[i], array[i + <span class="number">1</span>]] = [array[i + <span class="number">1</span>], array[i]]</span><br><span class="line">                flag = i</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> selectSort = <span class="function">(<span class="params">array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = array.length</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length <span class="number">-1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> min = array[i]</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j= i + <span class="number">1</span>; j &lt; array.length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[j] &lt; min)&#123;</span><br><span class="line">                [array[j], min] = [min, array[j]]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        array[i] = min</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变种1-1"><a href="#变种1-1" class="headerlink" title="变种1"></a>变种1</h3><p>记录最小值，每次不交换，只有等到第一个循环完毕时，检查最小值是否相同，再交换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> selectSort = <span class="function">(<span class="params">array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> min = i</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; array.length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[j] &lt; array[min])&#123;</span><br><span class="line">                min = j</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min !== i)&#123;</span><br><span class="line">            [array[min], array[i]] = [array[i], array[min]]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><ol><li>找出待排序的数组中最大和最小的元素；</li><li>统计数组中每个值为 i 的元素出现的次数，存入数组C的第 i 项；</li><li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；</li><li>反向填充目标数组：将每个元素i放在新数组的第C( i )项，每放一个元素就将C( i )减去1。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> countSort = <span class="function">(<span class="params">array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = array.length</span><br><span class="line">    <span class="keyword">let</span> min, max = array[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> count = []</span><br><span class="line">    <span class="keyword">let</span> newArray = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; array.length; i++)&#123;</span><br><span class="line">        min = min &lt; array[i] ? min : array[i]</span><br><span class="line">        max = max &lt; array[i] ? array[i] : max</span><br><span class="line">        count[array[i]] = count[array[i]] ? count[array[i]] + <span class="number">1</span> : <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(count)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = min; i &lt; max; i ++)&#123;</span><br><span class="line">        count[i + <span class="number">1</span>] = (count[i + <span class="number">1</span>] || <span class="number">0</span> ) + (count[i] || <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(count)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = len <span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        newArray[count[array[i]] - <span class="number">1</span>] = array[i]</span><br><span class="line">        count[array[i]]--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArray</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><ol><li>在数据集之中，选择一个元素作为”基准”（pivot）。</li><li>所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。</li><li>对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</li></ol><p>一般写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> quickSort = <span class="function">(<span class="params">array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (array.length &lt;= <span class="number">1</span>) &#123; <span class="keyword">return</span> array&#125;</span><br><span class="line">  <span class="keyword">let</span> pivotIndex = <span class="built_in">Math</span>.floor(array.length / <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">let</span> pivot = array.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> left = []</span><br><span class="line">  <span class="keyword">let</span> right = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = array.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array[i] &lt; pivot) &#123;</span><br><span class="line">      left.push(array[i])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      right.push(array[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> quickSort(left).concat([pivot], quickSort(right))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> qsort = <span class="function">(<span class="params">[x, ...xs]</span>) =&gt;</span> x === <span class="literal">undefined</span> ? [] : [...qsort(xs.filter(<span class="function"><span class="params">_</span> =&gt;</span> _ &lt;= x)), x, ...qsort(xs.filter(<span class="function"><span class="params">_</span> =&gt;</span> _ &gt; x))]</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><ol><li>从第一个元素开始，该元素可以认为已经被排序</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li><li>将新元素插入到该位置后</li><li>重复步骤2~5</li></ol><p>直接插入排序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> insertSort = <span class="function">(<span class="params">array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> length = array.length</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (array[j - <span class="number">1</span>] &gt; array[j]) &#123;</span><br><span class="line">        [array[j - <span class="number">1</span>], array[j]] = [array[j], array[j - <span class="number">1</span>]]</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原型写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.insertSort = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i, j</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>[j] &gt; <span class="keyword">this</span>[i]) &#123;</span><br><span class="line">        <span class="keyword">this</span>.splice(j, <span class="number">0</span>, <span class="keyword">this</span>[i])</span><br><span class="line">        <span class="keyword">this</span>.splice(i + <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变种1 - 可以减少交换次数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> insertSort = <span class="function">(<span class="params">array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> length = array.length</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> temp = array[i]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (array[j - <span class="number">1</span>] &gt; temp) &#123;</span><br><span class="line">        array[j] = array[j - <span class="number">1</span>]</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        array[j] = temp</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二分查找排序，加快查找速度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> insertSort2 = <span class="function">(<span class="params">array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> binarySearch = <span class="function">(<span class="params">array, start, end, temp</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> middle</span><br><span class="line">    <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">      middle = <span class="built_in">Math</span>.floor((start + end) / <span class="number">2</span>)</span><br><span class="line">      <span class="keyword">if</span> (array[middle] &lt; temp) &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp &lt;= array[middle + <span class="number">1</span>]) &#123;</span><br><span class="line">          <span class="keyword">return</span> middle + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          start = middle + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (end === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          end = middle</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> binarySort = <span class="function">(<span class="params">array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> temp = array[i]</span><br><span class="line">      <span class="keyword">let</span> k</span><br><span class="line">      <span class="keyword">if</span> (array[i - <span class="number">1</span>] &lt;= temp) &#123;</span><br><span class="line">        k = i</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        k = binarySearch(array, <span class="number">0</span>, i - <span class="number">1</span>, temp)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &gt; k; j--) &#123;</span><br><span class="line">          array[j] = array[j - <span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      array[k] = temp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> binarySort(array)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>递归法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mergeSort =  <span class="function">(<span class="params">array</span>)=&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> merge = <span class="function">(<span class="params">left, right</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> final = []</span><br><span class="line">    <span class="keyword">while</span> (left.length &amp;&amp; right.length)</span><br><span class="line">      final.push(left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>] ? left.shift() : right.shift())</span><br><span class="line">    <span class="keyword">return</span> final.concat(left.concat(right))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> len = array.length</span><br><span class="line">  <span class="keyword">if</span> (len &lt; <span class="number">2</span>) <span class="keyword">return</span> array</span><br><span class="line">  <span class="keyword">let</span> mid = len / <span class="number">2</span></span><br><span class="line">  <span class="keyword">return</span> merge(mergeSort(array.slice(<span class="number">0</span>, <span class="built_in">parseInt</span>(mid))),</span><br><span class="line">    mergeSort(array.slice(<span class="built_in">parseInt</span>(mid))))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迭代法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mergeSort = <span class="function">(<span class="params">array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> merge = <span class="function">(<span class="params">left, right</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> final = []</span><br><span class="line">    <span class="keyword">while</span> (left.length &amp;&amp; right.length) &#123;</span><br><span class="line">      final.push(left[<span class="number">0</span>] &lt; right[<span class="number">0</span>] ? left.shift() : right.shift())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> final.concat(left, right)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (array.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> work = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    work.push([array[i]])</span><br><span class="line">  &#125;</span><br><span class="line">  work.push([])  <span class="comment">// 如果数组长度为奇数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = array.length; i &gt; <span class="number">1</span>; i = ~~((i + <span class="number">1</span>) / <span class="number">2</span>)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>, k = <span class="number">0</span>; k &lt; i; j++, k += <span class="number">2</span>) &#123;</span><br><span class="line">      work[j] = merge(work[k], work[k + <span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    work[<span class="built_in">Math</span>.ceil(i / <span class="number">2</span>)] = []  <span class="comment">// 如果数组长度为奇数</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> work[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>希尔排序是一种分组直接插入排序方法，其原理是：先将整个序列分割成若干小的子序列，再分别对子序列进行直接插入排序，使得原来序列成为基本有序。这样通过对较小的序列进行插入排序，然后对基本有序的数列进行插入排序，能够提高插入排序算法的效率。</p><p>具体如下<strong>（实现为升序）</strong>：</p><ol><li>先取一个小于n的整数d1作为第一个增量，将所有距离为d1的倍数的记录放在同一个组中，把无序数组分割为若干个子序列。</li><li>在各子序列内进行直接插入排序。</li><li>然后取第二个增量d2&lt;d1，重复步骤1~2，直至所取的增量dt=1(dt&lt;dt-l&lt;…&lt;d2&lt;d1)，即所有记录放在同一组中进行直接插入排序为止。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shellSort = <span class="function">(<span class="params">array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> length = array.length</span><br><span class="line">  <span class="keyword">let</span> gap = <span class="built_in">Math</span>.floor(length / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (gap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = gap; i &lt; length; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &gt; <span class="number">0</span>; j -= gap) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[j - gap] &gt; array[j]) &#123;</span><br><span class="line">          [array[j - gap], array[j]] = [array[j], array[j - gap]]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    gap = <span class="built_in">Math</span>.floor(gap / <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://www.cnblogs.com/nannanITeye/archive/2013/04/11/3013737.html" target="_blank" rel="noopener">常用排序算法稳定性、时间复杂度分析（转，有改动）</a></li><li><a href="https://juejin.im/post/57dcd394a22b9d00610c5ec8" target="_blank" rel="noopener">十大经典排序算法总结（JavaScript描述）</a></li><li><a href="https://segmentfault.com/a/1190000002595152" target="_blank" rel="noopener">常用排序算法总结（性能+代码）</a></li><li>​</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最常用 6 种：冒泡排序、选择排序、计数排序、快速排序、插入排序、归并排序。&lt;/p&gt;
&lt;p&gt;还有：二分插入排序，希尔排序、桶排序、堆排序，基数排序。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>ES6 学习笔记</title>
    <link href="http://yoursite.com/2018/03/12/es6-note/"/>
    <id>http://yoursite.com/2018/03/12/es6-note/</id>
    <published>2018-03-12T13:28:50.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>再次过一遍 ES6 的基础知识。</p><a id="more"></a><h2 id="var-let-const"><a href="#var-let-const" class="headerlink" title="var let const"></a>var let const</h2><ol><li><p>var 声明的是 <strong>函数级作用域</strong>，如果不写在某个函数内部，那就是 <strong>全局作用域</strong>。</p><p>let 和 const 是块级作用域，一般而言是在 {} 中。</p></li><li><p>var 声明的变量可以重复声明，let 和 const 的不行。</p><p>const 声明的值类型变量不能重新赋值，引用类型变量可以重新赋值。如果不想被重新赋值，可以用 <code>Object.freeze()</code> 来实例化一个对象。</p></li><li><p>自动执行函数 <code>(function (){})()</code>。</p></li><li><p>for 循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`i:<span class="subst">$&#123;i&#125;</span>`</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>变量提升</p><p>var 的先引用再声明会输出 <strong>undefined</strong>，而 let 和 const 会报引用错误。</p><p>有一个临时性死去问题。</p></li></ol><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><ol><li><p>隐式返回，函数和返回值写在一行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>,,<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> double = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span> number * <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p>箭头函数本身是一个 <strong>匿名函数</strong>，但可以赋值给一个变量</p></li><li><p>箭头函数没有自己的 <strong>this</strong> 值，而是继承父作用域的</p></li><li><p>参数的默认值可以直接写在函数声明的参数部分括号内，不用写在下面的语句中。在调用的时候，如果不指定第一个参数，需要写上 <code>undefined</code>，<strong>不能留空</strong>，其余的可以直接留空</p></li><li><p>箭头函数不适应的场景</p><ol><li><p>作为构造函数，一个方法需要绑定到对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name, points</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.points = points</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Jelly = <span class="keyword">new</span> Person(<span class="string">'jelly'</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">Person.prototype.updatePoints = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>.points++</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.points)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当真的需要 this 的时候</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> button = <span class="built_in">document</span>.querySelector(<span class="string">'.zoom'</span>)</span><br><span class="line">button.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.classList.add(<span class="string">'in'</span>)</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.classList.remove(<span class="string">'in'</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>当需要使用 arguments 对象的时候</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">arguments</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>).reduce(<span class="function">(<span class="params">prevSum, value</span>) =&gt;</span> prevSum + value, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><ol><li><p>反引号来包裹，${}</p></li><li><p>会保留 <strong>空格</strong></p></li><li><p>支持嵌套，模板字符串里面可以嵌套模板字符串</p></li><li><p>标签模板字符串</p><p>在模板字符串前面加一个标签，一个函数名，一般用 map 方法来遍历模板字符串中的项，然后添加样式用。</p><p>使用场景：过滤用户的输入，防止 XSS 攻击</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用了 DOMPurify 这个库，sanitize 这个方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sanitize</span>(<span class="params">string, ...values</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> dirty = strings.reduce(<span class="function">(<span class="params">prev, curr, i</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;prev&#125;</span><span class="subst">$&#123;curr&#125;</span><span class="subst">$&#123;values[i] || <span class="string">''</span>&#125;</span>`</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span> DOMPurify.sanitize(dirty)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="新增的字符串方法"><a href="#新增的字符串方法" class="headerlink" title="新增的字符串方法"></a>新增的字符串方法</h2><h3 id="startsWith"><a href="#startsWith" class="headerlink" title="startsWith()"></a>startsWith()</h3><p>大小写敏感，可以传入两个参数，字符串和起始位置</p><h3 id="endsWith"><a href="#endsWith" class="headerlink" title="endsWith()"></a>endsWith()</h3><p>大小写敏感，可以传入两个参数，字符串和起始位置</p><h3 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h3><p>是否包含某个字符串，，可以传入两个参数，字符串和起始位置</p><h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h3><p>参数为重复的次数</p><h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Tom = &#123;</span><br><span class="line">  name: <span class="string">'Tom Jones'</span>,</span><br><span class="line">  age: <span class="number">25</span>,</span><br><span class="line">  family: &#123;</span><br><span class="line">    mother: <span class="string">'Norah Jones'</span>,</span><br><span class="line">    father: <span class="string">'Richard Jones'</span>,</span><br><span class="line">    brother: <span class="string">'Howard Jones'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; name, age &#125; = Tom</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">let</span> name</span><br><span class="line">(&#123;name, age&#125;) = Tom</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; father, mother, brother &#125; = Tom.family</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">const</span> father = <span class="string">'father'</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">father</span>: f, mother, brother &#125; = Tom.family</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置默认值的方式</span></span><br><span class="line"><span class="comment">// 这里在定义 Tom 的时候，family 的 sister 必须为 undefined， null, false, 0 都不行</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">father</span>: f, mother, brother, sister = <span class="string">'have no sister'</span> &#125; = Tom.family</span><br></pre></td></tr></table></figure><h2 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h2><p>跟 <strong>对象解构</strong> 类似</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [one, ...others] = numbers</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [one, two, three, four, five = <span class="string">'five'</span>] = newNumbers  <span class="comment">// 默认值</span></span><br></pre></td></tr></table></figure><p>应用场景：交换变量的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">[a, b] = [b, a]</span><br></pre></td></tr></table></figure><h2 id="For-of-Loop"><a href="#For-of-Loop" class="headerlink" title="For of Loop"></a>For of Loop</h2><p>可用于 <strong>数组</strong>，<strong>字符串</strong>，<strong>Map</strong>，<strong>Set</strong> 等，暂不支持 <strong>对象</strong>，可以用于 Nodelist 等</p><p>数组的 forEach 循环不能跳过</p><p>for in 循环会循环所有属性，包括原型上的。</p><p>for of 循环 <strong>不会遍历数组上的非数字属性</strong>，在循环体内可以用 <code>break</code> 或者 <code>continue</code> 来终止循环或者跳过某个值</p><p>关于可迭代属性，可迭代对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">'Apple'</span>, <span class="string">'Banana'</span>, <span class="string">'Orange'</span>, <span class="string">'Mango'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> fruit <span class="keyword">of</span> fruits)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(fruit)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iterator = fruits.entries()</span><br><span class="line">iterator.next()  <span class="comment">// 这么做可以遍历完这个数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> fruit <span class="keyword">of</span> fruits.entries())&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(fruit[<span class="number">0</span>], fruit[<span class="number">1</span>])</span><br><span class="line">&#125;  <span class="comment">// 这么遍历既有索引，又有值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, fruit] <span class="keyword">of</span> fruits.entries())&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;fruit&#125;</span> ranks <span class="subst">$&#123;index + <span class="number">1</span>&#125;</span> in the list`</span>)</span><br><span class="line">&#125;  <span class="comment">// 这么遍历既有索引，又有值</span></span><br></pre></td></tr></table></figure><h3 id="插一个知识点"><a href="#插一个知识点" class="headerlink" title="插一个知识点"></a>插一个知识点</h3><p><code>arguments</code>对象是所有（非箭头）函数中都可用的 <strong>局部变量</strong>。你可以使用<code>arguments</code>对象在函数中引用函数的参数。此对象包含传递给函数的每个参数的条目，第一个条目的索引从0开始。</p><p><code>arguments</code>对象不是一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array" target="_blank" rel="noopener"><code>Array</code></a> 。它类似于<code>Array</code>，但除了length属性和索引元素之外没有任何<code>Array</code>属性。</p><h2 id="数组新方法"><a href="#数组新方法" class="headerlink" title="数组新方法"></a>数组新方法</h2><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todos = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>)</span><br><span class="line"><span class="keyword">const</span> names = <span class="built_in">Array</span>.from(todos, todo =&gt; todo.textContent)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(names)</span><br></pre></td></tr></table></figure><p>Array.from() 可以把 <strong>Nodelist</strong>，<strong>arguments</strong>，<strong>字符串</strong> 转化为数组</p><h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h3><p>可以避免函数行为不一致的情况，传入 1 个或者多个参数，都返回一个数组。之前的 <code>new Array(1)</code> 返回的是一个长度为 1 空数组，其中元素为 <code>undefined</code>,<code>new Array(1, 2, 3)</code> 返回的是 <code>[1, 2, 3]</code></p><h3 id="find"><a href="#find" class="headerlink" title=".find()"></a>.find()</h3><p>找到第一个符合条件的结果后就返回</p><p><code>const bananas = inventory.find(fruit =&gt; fruit.name === &#39;bananas&#39;)</code></p><h3 id="findIndex"><a href="#findIndex" class="headerlink" title=".findIndex()"></a>.findIndex()</h3><p>找到第一个符合条件的结果后就返回</p><h3 id="some"><a href="#some" class="headerlink" title=".some()"></a>.some()</h3><p>找到第一个符合条件的结果后就返回</p><h3 id="every"><a href="#every" class="headerlink" title=".every()"></a>.every()</h3><p>找到第一个不符合条件的结果后就返回 <strong>false</strong>，所有都符合条件才返回 <strong>true</strong></p><h2 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h2><p>是一个真正的数组，之前的 arguments 是一个对象类数组，不能用数组的方法，只能遍历，除了length属性和索引元素之外没有任何<code>Array</code>属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertCurrenvy</span>(<span class="params">rate, ...amounts</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> amounts.map(<span class="function"><span class="params">amount</span> =&gt;</span> amount * rate)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> amounts = converCurrency(<span class="number">0.89</span>, <span class="number">12</span>, <span class="number">34</span>, <span class="number">656</span>, <span class="number">23</span>)</span><br><span class="line"><span class="built_in">console</span>.log(amounts)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> player = [<span class="string">'Jelly'</span>, <span class="number">123</span>, <span class="number">5.4</span>, <span class="number">6.7</span>, <span class="number">3.4</span>, <span class="number">7.8</span>, <span class="number">8.9</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [name, id, ...scores] = player</span><br><span class="line"><span class="built_in">console</span>.log(name, id, scores)</span><br></pre></td></tr></table></figure><h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><p>把一个数组的每个成员添加到另一个数组中，或者把一个字符串中的每个字符添加到一个数组中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = [...<span class="string">'zcdll'</span>]</span><br><span class="line"><span class="built_in">console</span>.log(name)</span><br><span class="line"><span class="comment">// ['z','c','d','l','l',]</span></span><br></pre></td></tr></table></figure><p> <strong>这种写法复制的并不是值，而是引用。所以如果修改了新数组的某个元素，旧数组里面的值也会相应改变。</strong>字符串的没事。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> youngers = [<span class="string">'John'</span>]</span><br><span class="line"><span class="keyword">const</span> olders = [<span class="string">'James'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> members = [...youngers, <span class="string">'Mary'</span>, ...olders]</span><br><span class="line"><span class="keyword">const</span> currentMembers = [...members]</span><br><span class="line"><span class="comment">// 这么写就不会有问题了，可以修改了</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"heading"</span>&gt;</span></span><br><span class="line">      LARAVIST!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> heading = <span class="built_in">document</span>.querySelector(<span class="string">'.heading'</span>)</span></span><br><span class="line">  heading.innerHTML = wrapWithSpan(heading.textContent)</span><br><span class="line">  </span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">wrapWithSpan</span>(<span class="params">word</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> [...word].map(<span class="function"><span class="params">letter</span> =&gt;</span> <span class="string">`&lt;span&gt;<span class="subst">$&#123;letter&#125;</span>&lt;/span&gt;`</span>).join(<span class="string">''</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todos = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Go to store'</span>, <span class="attr">completed</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'Watch Tv'</span>, <span class="attr">completed</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'Go Shopping'</span>, <span class="attr">completed</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> id = <span class="number">2</span></span><br><span class="line"><span class="keyword">const</span> todoIndex = todos.findIndex(<span class="function"><span class="params">todo</span> =&gt;</span> todo.id === id)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newTodos = [...todos.slice(<span class="number">0</span>, todoIndex), ...todos.slice(todoIndex + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">// this.setState(&#123;todos: newTodos&#125;)  在 React 中可以这么用</span></span><br></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruit = [<span class="string">'apple'</span>, <span class="string">'banans'</span>, <span class="string">'pear'</span>]</span><br><span class="line"><span class="keyword">const</span> newFruit = [<span class="string">'orange'</span>, <span class="string">'mongo'</span>]</span><br><span class="line">fruit.push(...newFruit)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dateFields = [<span class="number">2017</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(...dateFields)</span><br><span class="line"><span class="built_in">console</span>.log(date)</span><br></pre></td></tr></table></figure><h3 id="对象字面量的扩展"><a href="#对象字面量的扩展" class="headerlink" title="对象字面量的扩展"></a>对象字面量的扩展</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象属性简写</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'Laravist'</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">2</span></span><br><span class="line"><span class="keyword">const</span> birthday = <span class="string">'2015-09'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Laravist = &#123;</span><br><span class="line">  name, age, birthday</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Laravist)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象方法简写</span></span><br><span class="line"><span class="keyword">const</span> Laravist = &#123;</span><br><span class="line">  name, age, birthday,</span><br><span class="line">  greet()&#123;</span><br><span class="line">    alert(<span class="string">"Hello"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算属性</span></span><br><span class="line"><span class="keyword">let</span> id = <span class="number">0</span></span><br><span class="line"><span class="keyword">const</span> userIds = &#123;</span><br><span class="line">  [<span class="string">`user-<span class="subst">$&#123;++id&#125;</span>`</span>]: id,</span><br><span class="line">  [<span class="string">`user-<span class="subst">$&#123;++id&#125;</span>`</span>]: id,</span><br><span class="line">  [<span class="string">`user-<span class="subst">$&#123;++id&#125;</span>`</span>]: id,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(userIds)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> keys = [<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'birthday'</span>]</span><br><span class="line"><span class="keyword">const</span> values = [<span class="string">'Laravist'</span>, <span class="number">2</span>, <span class="string">'2015-09'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Laravist = &#123;</span><br><span class="line">  <span class="comment">//[keys[0]]: values[0],</span></span><br><span class="line">  <span class="comment">//[keys[1]]: values[1],</span></span><br><span class="line">  <span class="comment">//[keys[2]]: values[2],</span></span><br><span class="line">  [keys.shift()]: values.shift(),</span><br><span class="line">  [keys.shift()]: values.shift(),</span><br><span class="line">  [keys.shift()]: values.shift(),</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Laravist)</span><br></pre></td></tr></table></figure><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>用于执行异步操作，可以链式调用。<code>.then()</code> <code>.catch()</code></p><p>一个简单的构建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// setTimeout(()=&gt;&#123;</span></span><br><span class="line">    <span class="comment">// resolve('You are awesome!')</span></span><br><span class="line">    <span class="comment">// &#125;, 2000)</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        reject(<span class="built_in">Error</span>(<span class="string">'You are awesome!'</span>))</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(data)&#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span>&#123;<span class="built_in">console</span>.error(error)&#125;)</span><br></pre></td></tr></table></figure><p>Promise 有两个方法，<code>.all()</code> 和 <code>.race()</code>，<strong>all</strong> 只有当全部为 <strong>resolve</strong> 时，才整体返回 <strong>then</strong> 中的方法，否则返回 <strong>catch</strong> 中的方法，而 <strong>race</strong> 会返回先返回的那个方法，看时间。</p><p><strong>手写一个 ajax</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'http://www.google.com'</span>)</span><br><span class="line">xhr.opreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(xhr.responseText)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xhr.send()</span><br><span class="line"></span><br><span class="line"><span class="comment">// open 的第三个参数，ture 表示异步，false 表示同步。默认为 true</span></span><br><span class="line"><span class="comment">// 如果为 POST，则可以再 send 中写参数</span></span><br></pre></td></tr></table></figure><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><blockquote><p>The data type “<strong>symbol</strong>“ is a primitive data type having the quality that, values of this type can be used to make object properties that are anonymous. This data type is used as the key for an object property when the property is intended to be private, for the internal use of a class or an object type. For example, keys of type <strong>symbol</strong> exist in various built-in JavaScript objects. Similarly, custom classes can also create private members this way. The <strong>symbol</strong> data type is highly specialized in purpose, and remarkable for its lack of versatility; an instance of <strong>Symbol</strong> can be assigned to an L-value, it can be examined for identity, and that’s all; no other operators apply.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> peter = <span class="built_in">Symbol</span>(<span class="string">'peter'</span>)</span><br><span class="line"><span class="keyword">const</span> student = <span class="built_in">Symbol</span>(<span class="string">'student'</span>)</span><br><span class="line"><span class="keyword">const</span> classRoom = &#123;</span><br><span class="line">    [<span class="built_in">Symbol</span>(<span class="string">'lily'</span>)]: &#123; <span class="attr">grade</span>: <span class="number">16</span>, <span class="attr">gender</span>: <span class="string">'female'</span> &#125;,</span><br><span class="line">    [<span class="built_in">Symbol</span>(<span class="string">'nina'</span>)]: &#123; <span class="attr">grade</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">'female'</span> &#125;,</span><br><span class="line">    [<span class="built_in">Symbol</span>(<span class="string">'nina'</span>)]: &#123; <span class="attr">grade</span>: <span class="number">20</span>, <span class="attr">gender</span>: <span class="string">'female'</span> &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> classRoom)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> syms = <span class="built_in">Object</span>.getOwnPropertySymbols(classRoom).map(<span class="function"><span class="params">sym</span> =&gt;</span> classRoom[sym])</span><br><span class="line"><span class="built_in">console</span>.log(syms)</span><br></pre></td></tr></table></figure><p>一般作为 key，因为可以避免重复，是匿名的，不能遍历，不能 <code>getOwnPropertyNames()</code>，只能通过 <code>Object.getOwnPropertySymbols()</code> 的方式来获取。</p><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p>export  import</p><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>类的声明，类的表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;  <span class="comment">// 类的声明</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> User = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="comment">// 类的表达式</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, email)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.email = email</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    info()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'This is ES6!'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> description()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Im a user of ES6!'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">set</span> github(value)&#123;</span><br><span class="line">        <span class="keyword">this</span>.githubName = value</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">get</span> github()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'https://www.githuib.com'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> zcdll = <span class="keyword">new</span> User(<span class="string">'zcdll'</span>, <span class="string">'zcdll@zcdll.com'</span>)</span><br></pre></td></tr></table></figure><p>class 可以用来扩展对象数组</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">iterator.next()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">nums.entries()</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.values = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> items = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        next()&#123;</span><br><span class="line">            <span class="keyword">const</span> done = i &gt;= items.length</span><br><span class="line">            <span class="keyword">const</span> value = done ? <span class="literal">undefined</span> : items[i++]</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                value, done</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>]</span><br></pre></td></tr></table></figure><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>generator</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">listColors</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'red'</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'green'</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'blue'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> colors = listColors()</span><br></pre></td></tr></table></figure><p> 用 Generator 控制 ajax 请求流</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">    axios.get(url).then(<span class="function"><span class="params">res</span> =&gt;</span> userGen.next(res.data))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">steps</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fetching users'</span>)</span><br><span class="line">    <span class="keyword">const</span> users = <span class="keyword">yield</span> ajax(<span class="string">'https://api.github.com/users'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(users)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fetching firstUser'</span>)</span><br><span class="line">    <span class="keyword">const</span> firstUser = <span class="keyword">yield</span> ajax(<span class="string">`https://api.github.com/users/<span class="subst">$&#123;users[<span class="number">0</span>].login&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'firstUser'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fetching followers'</span>)</span><br><span class="line">    <span class="keyword">const</span> followers = <span class="keyword">yield</span> ajax(firstUser.followers_url)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'followers'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userGen = steps()</span><br><span class="line">userGen.next()</span><br></pre></td></tr></table></figure><h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p>在调用对象的属性或方法之前做一些操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">'laravist'</span>, <span class="attr">age</span>: <span class="number">2000</span> &#125;</span><br><span class="line"><span class="keyword">const</span> personProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(person, &#123;</span><br><span class="line">    <span class="keyword">get</span>(target, key) &#123;</span><br><span class="line">        <span class="keyword">return</span> target[key].toUpperCase()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>(target, key, value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">'string'</span>)&#123;</span><br><span class="line">            target[key] = value.trim()</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">personProxy.name = <span class="string">'codecasts'</span></span><br></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>对于数字和字符串是敏感的，可以同时存在 5 和 ‘5’</p><p>API</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.size()</span><br><span class="line">.add()</span><br><span class="line">.delete()</span><br><span class="line">.has()</span><br><span class="line">.clear()</span><br><span class="line">.values()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> colors = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">colors.add(<span class="string">'red'</span>)</span><br><span class="line">colors.add(<span class="string">'green'</span>)</span><br><span class="line">colors.add(<span class="string">'blue'</span>)</span><br><span class="line">colors.values()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> color <span class="keyword">of</span> colors)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(color)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">colors.forEach(<span class="function">(<span class="params">item, key, ownSet</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item, key, ownSet)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对数组去重</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> numbersSet = <span class="keyword">new</span> <span class="built_in">Set</span>(numbers)</span><br><span class="line"><span class="keyword">const</span> uniqueNumber = [...numbersSet]</span><br></pre></td></tr></table></figure><h2 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h2><p>相比于 Set：</p><ol><li>元素只能是对象</li><li>不能用 for of 迭代</li><li>没有 .clear() 方法，有自动清理机制</li></ol><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>相比于 对象：</p><ol><li>Key 可以是任意类型，例如对象</li></ol><p>API</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.set()</span><br><span class="line">.get()</span><br><span class="line">.size()</span><br><span class="line">.has()</span><br><span class="line">.delete()</span><br><span class="line">.clear()</span><br><span class="line">.forEach()</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">of</span> 循环</span><br><span class="line">.entries() 返回一个数组</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fruits = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'apple'</span>, <span class="number">6</span>], [<span class="string">'banana'</span>, <span class="number">5</span>]])</span><br></pre></td></tr></table></figure><p>Map 应用场景，可以用在想要存储关于对象的信息，key 为对象时。而不是，把一个信息存储在对象上。</p><h2 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h2><p>相比于 Map</p><ol><li>没有 .size()</li><li>不能循环</li><li>没有 .clear() 方法</li><li>key 必须是 对象</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;再次过一遍 ES6 的基础知识。&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>Python 爬虫学习笔记</title>
    <link href="http://yoursite.com/2018/02/27/python-crawler-tutorial/"/>
    <id>http://yoursite.com/2018/02/27/python-crawler-tutorial/</id>
    <published>2018-02-27T07:59:38.000Z</published>
    <updated>2020-08-04T07:29:12.116Z</updated>
    
    <content type="html"><![CDATA[<p>Python 爬虫的学习笔记</p><p>之前简单学习了 <strong>scrapy</strong>，写了几个爬虫，现在在写新的爬虫的时候需要了不少问题，比如怎么写的更规范，怎么解决禁止爬取的问题等等，所以要系统学习并深入学习一下爬虫的知识。</p><p>这次学习以 <a href="https://cuiqingcai.com/4320.html" target="_blank" rel="noopener">Python3爬虫视频学习教程-崔庆才</a> 为主，这套爬虫教程很详细，很全，有配套的视频和文档，深入浅出，内容丰富，从最基本的安装到代理池的使用都有。</p><a id="more"></a><h3 id="反爬方法和反反爬方法"><a href="#反爬方法和反反爬方法" class="headerlink" title="反爬方法和反反爬方法"></a>反爬方法和反反爬方法</h3><h4 id="检测-Request-Headers"><a href="#检测-Request-Headers" class="headerlink" title="检测 Request Headers"></a>检测 Request Headers</h4><p>意思是说某些网站会检查请求头中的信息，检测是否是伪造的请求，例如检查 <strong>User-Agent</strong>，<strong>Host</strong>，<strong>Accept</strong>，<strong>Upgrade-Insecure-Requests</strong> 以及 <strong>Cookie</strong> 和一些特殊的自由字段。</p><p>这些信息都是可以在请求中看到的，各浏览器基本都提供了相应的开发者工具，来查看网络请求信息，例如 Chrome 的开发者工具中的  <strong>Network</strong>。</p><p>当然了，这些一般针对 GET 请求比较有效。</p><p>反反爬方法就是在构造请求的时候，加入相应的字段。</p><p>针对 Cookie 中的字段，有时候看着有好多，但是某些不是要爬的网站写入的，而有可能是比如百度统计这样的统计工具写入的，例如 <strong>HMACCOUNT</strong>，<strong>HMVT</strong>，这些字段。可以根据 Cookie 的 Domain 和 过期时间等参数来甄别。</p><h4 id="登录认证"><a href="#登录认证" class="headerlink" title="登录认证"></a>登录认证</h4><p>登录认证的方式有好多种，从最简单的把账号密码到第三方认证+两步验证，一般来说，认证后的一段时间之内都是不用再次登录的。也就是说，会在浏览器中写入一些数据，或者在构造查询 API 的时候，添加 Token 等字段来进行认证。</p><p>所以反反爬方法就是分析相应的查询请求，一般是 <strong>Doc</strong> 或者 <strong>XHR</strong>，然后判断相应的认证方法，从而破解反爬措施。</p><ul><li>如果请求链接很短，但是请求头中 Cookie 字段很多，那有可能是采取的 Cookie 验证，然后就要分析 Cookie。</li><li>如果请求链接很长，在查询参数后还有几个明显的字段，那有可能是采取的 Token 验证方式，这时候可以用 <strong>Postman</strong> 构造请求测试一下。</li></ul><h4 id="IP-请求频率限制"><a href="#IP-请求频率限制" class="headerlink" title="IP 请求频率限制"></a>IP 请求频率限制</h4><p>IP 请求频率的限制属于杀伤性比较大的，有时候会误伤真实用户，但是比较有效。</p><p>这时候有两个措施：降低请求频率和使用代理。</p><ul><li>降低请求频率可以一定程度上避免被发现，但是爬取的效率会降低很多。可以在程序代码中加入等待时间，或者在 <strong>Scrapy</strong> 框架的 <strong>settings</strong> 中设置 <strong>DOWNLOAD_DELAY</strong>，单位为秒。</li><li>为请求加入代理，从而隐藏真实 IP。这个方法比较有效，但是需要额外配置和维护一个代理池，需要时间和精力。有时候免费的代理效果不好，还需要付费购买 IP。</li></ul><h4 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h4><p>有时候如果误触了网站的反爬措施，可能需要输入验证码来解锁。</p><p>这时候就需要从网上找一些验证码识别的 API 来识别一下，或者找打码平台。这种方式耗时耗力，成本比较大。</p><p>所以最好不要误触发验证码。</p><p>有时候当误触了验证码后，换一个 IP，不换 Cookie 等或许就好了，可以检查请求中是否含有 <strong>captcha</strong> 字段，有的话一般是输入验证码的页面，遇到后换一个 IP 继续请求。</p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ol><li>可以利用 PhantomJs 来模拟浏览器，从而获取数据</li><li>爬虫与反爬措施的高低比较是一个道高一尺魔高一丈的过程，需要耐心</li><li>知己知彼才能编写高级爬虫</li><li>移动端的页面往往更好分析，因为元素相对更少</li><li>爬取完要分析数据是否是脏数据</li></ol><h3 id="一些工具-amp-Python-库"><a href="#一些工具-amp-Python-库" class="headerlink" title="一些工具 &amp; Python 库"></a>一些工具 &amp; Python 库</h3><h4 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h4><p>Python 内置的发请求的库，working with URLs</p><h4 id="re"><a href="#re" class="headerlink" title="re"></a>re</h4><p>Python 内置的正则表达式库</p><h4 id="Requests"><a href="#Requests" class="headerlink" title="Requests"></a>Requests</h4><p>Requests 唯一的一个<strong>非转基因</strong>的 Python HTTP 库，人类可以安全享用。</p><h4 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h4><p>一个浏览器自动化测试的框架，可以通过 Python 代码来控制浏览器完成相关的测试，同时也能辅助完成数据的爬取。利用它我们可以驱动浏览器执行特定的动作，如点击、下拉等操作。对于一些JavaScript渲染的页面来说，这种抓取方式非常有效。</p><h4 id="PhantomJS"><a href="#PhantomJS" class="headerlink" title="PhantomJS"></a>PhantomJS</h4><p>PhantomJS是一个无界面的、可脚本编程的WebKit浏览器引擎，它原生支持多种Web标准：DOM操作、CSS选择器、JSON、Canvas以及SVG。</p><h4 id="lxml"><a href="#lxml" class="headerlink" title="lxml"></a>lxml</h4><p>解析 HTML 和 XML</p><h4 id="beautifulsoup"><a href="#beautifulsoup" class="headerlink" title="beautifulsoup"></a>beautifulsoup</h4><p>一个可以从HTML或XML文件中提取数据的Python库。</p><h4 id="pyquery"><a href="#pyquery" class="headerlink" title="pyquery"></a>pyquery</h4><p>a jquery-like library for python，也是用来解析 HTML 的。 </p><h4 id="pymysql"><a href="#pymysql" class="headerlink" title="pymysql"></a>pymysql</h4><p>操作 MySQL 数据库</p><h4 id="pymongo"><a href="#pymongo" class="headerlink" title="pymongo"></a>pymongo</h4><p>操作 mongoDB</p><h4 id="redis-sudo-find-name-“apt-pkg-cpython-35m-x86-64-linux-gnu-so”"><a href="#redis-sudo-find-name-“apt-pkg-cpython-35m-x86-64-linux-gnu-so”" class="headerlink" title="redis sudo find / -name “apt_pkg.cpython-35m-x86_64-linux-gnu.so”"></a>redis sudo find / -name “apt_pkg.cpython-35m-x86_64-linux-gnu.so”</h4><p>如题</p><h4 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h4><p>设置代理的时候可能会用到</p><h4 id="django"><a href="#django" class="headerlink" title="django"></a>django</h4><p>web 框架，分布式爬虫时可能会用到</p><h4 id="jupyter"><a href="#jupyter" class="headerlink" title="jupyter"></a>jupyter</h4><p>notebook</p><h4 id="Splash"><a href="#Splash" class="headerlink" title="Splash"></a>Splash</h4><p>Lightweight, scriptable browser as a service with an HTTP API </p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://segmentfault.com/a/1190000005840672" target="_blank" rel="noopener">关于反爬虫，看这一篇就够了</a></li><li><a href="https://www.zhihu.com/question/28168585" target="_blank" rel="noopener">如何应对网站反爬虫策略？如何高效地爬大量数据?</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 爬虫的学习笔记&lt;/p&gt;
&lt;p&gt;之前简单学习了 &lt;strong&gt;scrapy&lt;/strong&gt;，写了几个爬虫，现在在写新的爬虫的时候需要了不少问题，比如怎么写的更规范，怎么解决禁止爬取的问题等等，所以要系统学习并深入学习一下爬虫的知识。&lt;/p&gt;
&lt;p&gt;这次学习以 &lt;a href=&quot;https://cuiqingcai.com/4320.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python3爬虫视频学习教程-崔庆才&lt;/a&gt; 为主，这套爬虫教程很详细，很全，有配套的视频和文档，深入浅出，内容丰富，从最基本的安装到代理池的使用都有。&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="crawl" scheme="http://yoursite.com/tags/crawl/"/>
    
      <category term="scrapy" scheme="http://yoursite.com/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>搭建 MacBook 上的开发环境</title>
    <link href="http://yoursite.com/2018/02/10/mac-coder-env-init/"/>
    <id>http://yoursite.com/2018/02/10/mac-coder-env-init/</id>
    <published>2018-02-10T04:31:43.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>之前一直在 <strong>Windows</strong> 下写代码，公司是 <strong>Ubuntu</strong> + <strong>Windows</strong>，家里的 <strong>MacBook</strong> 偶尔用一下，出去玩或者回老家的时候会带上，但是很少写代码。</p><p>最近在家里 <strong>挖 ETH</strong>，虽说只需要显卡的算力，对 CPU 要求不高，但是在挖矿的时候，干别的很不爽，程序（动画）切换慢，想看高清视频又害怕影响挖矿的效率，以及 <strong>Windows</strong> 下没有特别好看+好用的 <strong>终端</strong>，<strong>Cmder</strong> 还是不能和 <strong>Mac</strong>，<strong>Linux</strong> 下的比，又不想开虚拟机，各种奇葩的解决方案也只是权宜之计，有时候在配置环境的时候不顺心，需要填坑，看网上的好多视频都是 MacBook，太好看了。。。</p><p>种种原因，最后决定搞一搞这台 13 寸 的 2013 Late MacBook Pro。</p><a id="more"></a><h3 id="回忆"><a href="#回忆" class="headerlink" title="回忆"></a>回忆</h3><p>之前一直不用这台 <strong>MacBook</strong> 的原因，还有一个，就是在用 <strong>Chrome</strong> 的时候很容易卡顿，一卡就会卡好几秒种，虽然不长，但是很难忍！</p><p>最近用了一款叫做 <a href="https://chrome.google.com/webstore/detail/extension-manager/gjldcdngmdknpinoemndlidpcabkggco" target="_blank" rel="noopener">扩展程序扩展管理器（Extension Manager)</a> 的扩展，可以较方便的临时 <strong>开、关</strong> 某个扩展，以及禁用全部扩展，对于暂时性解决 <strong>Chrome 占用内存过多</strong> 有一定疗效。</p><p>我在 <strong>Ubuntu</strong> 下尤其明显，在只开 <strong>2-3</strong> 个扩展的情况下，一般占用 <strong>6-8G</strong> 的内存，如果开 <strong>5</strong> 个以上的扩展的话，很容易占用 <strong>10G</strong> 以上的内存，把内存吃完，而当我结束 <strong>Chrome</strong> 进程后，内存使用马上降到 3G 左右。</p><p>所以打算试一下，前一段时间把 MacBook 重装了系统，很情况，空间也多了。昨天晚上加上这个扩展，一共开了 3 个扩展，一晚上都没有卡主，很开心 ^_^！于是打算搞一搞，配置一下 <strong>MacBook</strong> 下的 <strong>JavaScript</strong>，<strong>Python</strong>，<strong>PHP</strong>，<strong>Go</strong>，<strong>Docker</strong> 等开发环境。</p><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><h4 id="基本软件"><a href="#基本软件" class="headerlink" title="基本软件"></a>基本软件</h4><h5 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h5><p>跟下面的代理部分有些重复，不过还好。主要是有了代理才能够下很多别的软件。</p><p>这里我主要用 ShadowsocksX-NG-R8 和 Surge 2。</p><p>没钱，还没升级到 Surge 3。</p><p>Surge Mac 2 下载地址：<a href="https://manual.nssurge.com/release-note/surge-mac.html" target="_blank" rel="noopener">https://manual.nssurge.com/release-note/surge-mac.html</a></p><p>配置文件在 iCloud 上，需要把 Shadowsocks 的 Socks5 端口号给我 9086</p><h5 id="辅助软件"><a href="#辅助软件" class="headerlink" title="辅助软件"></a>辅助软件</h5><ol><li><p>SmoothScroll</p><p>平滑鼠标滚动以及改变滚动方向的。Mac 下如果用第三方鼠标，滚动方向会和 Apple 自己的鼠标以及触摸板方向相反。所以需要配置一下。还有就是掉帧问题，这个软件都可以解决。</p></li><li><p>karabiner-Elements</p><p>用来改变键盘按键位置的。</p><p>一般的键盘相当于是把 Mac 键盘的 option 和 command 换了位置。这个软件可以改过来。</p><p>同事它也可以修改鼠标。不过没有 SmoothScroll 好用。</p></li></ol><h5 id="系统设置调整"><a href="#系统设置调整" class="headerlink" title="系统设置调整"></a>系统设置调整</h5><ol><li>打开 <strong>辅助功能</strong> 中的 <strong>三指拖动</strong></li><li>修改 节能 不让 Mac 自动休眠</li><li>修改屏幕保护程序的显示文字，添加时间显示</li></ol><h4 id="安装一般软件"><a href="#安装一般软件" class="headerlink" title="安装一般软件"></a>安装一般软件</h4><ol><li>XCode</li><li>SetApp</li><li>Jetbrains ToolBox + WebStorm</li><li>Office</li><li>百度网盘</li><li>Alfred</li><li>搜狗输入法</li><li>微信</li><li>QQ</li><li>阿里旺旺</li><li>钉钉</li><li>Snipaste</li><li>IINA</li><li>Dropbox</li><li>Google Backup and Sync</li><li>微信开发者工具</li><li>Firefox</li><li>Typora</li><li>VSCode</li><li>Notion</li><li>幕布</li><li>TeamViewer</li><li>Lepton</li><li>Postman</li><li>Sequel Pro</li><li>SwitchResX</li><li>Fork</li><li>SourceTree</li><li>PicGo</li><li>网易云音乐</li><li>印象笔记</li><li>VirtualBox</li><li>iTerm2</li></ol><h4 id="安装-Homebrew"><a href="#安装-Homebrew" class="headerlink" title="安装 Homebrew"></a>安装 Homebrew</h4><p><a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a> 是一个 MacOS 的包管理器，很强大。安装很简单，在终端运行下面的命令就可以。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><p>由于 <strong>Homebrew</strong> 跟 <strong>pip</strong>，<strong>npm</strong> 这些包管理器类似，源都在国外，<strong>Homebrew</strong> 的源主要在 <strong>Github</strong>，所以在国内安装的时候速度有时候不理想。</p><p>有两种解决办法：<strong>换源</strong>，或者安装的时候通过 <strong>代理</strong>。</p><ul><li><p>换源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span> &amp;&amp; git remote <span class="built_in">set</span>-url origin https://git.coding.net/homebrew/homebrew.git</span><br><span class="line">$ <span class="built_in">cd</span> <span class="variable">$home</span> &amp;&amp; brew update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个是 coding.net 的源</span></span><br><span class="line"><span class="comment"># 也可以换 ustc 或者 清华的源</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/tmp</span><br><span class="line">//以下两个选一个(要与你之前选择的镜像源相同)</span><br><span class="line">git <span class="built_in">clone</span> git://mirrors.tuna.tsinghua.edu.cn/homebrew.git</span><br><span class="line">git <span class="built_in">clone</span> http://mirrors.ustc.edu.cn/homebrew.git</span><br><span class="line"></span><br><span class="line">rm -rf /usr/<span class="built_in">local</span>/.git</span><br><span class="line">rm -rf /usr/<span class="built_in">local</span>/Library</span><br><span class="line">cp -R homebrew/.git /usr/<span class="built_in">local</span>/</span><br><span class="line">cp -R homebrew/Library /usr/<span class="built_in">local</span>/</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$home</span> &amp;&amp; brew update</span><br></pre></td></tr></table></figure></li><li><p>代理</p><p>我选择的是通过代理的方式安装，这样比较灵活吧，而且都是最新的源。</p><p>跟在 <strong>Windows</strong> 和 <strong>Linux</strong> 下类似，可以通过 <code>export http_proxy</code> 或者 <strong>proxychains4</strong> 的方式安装，具体安装方式见下面。</p></li></ul><h3 id="安装和改造-iTerm2"><a href="#安装和改造-iTerm2" class="headerlink" title="安装和改造 iTerm2"></a>安装和改造 iTerm2</h3><h4 id="安装-iTerm2"><a href="#安装-iTerm2" class="headerlink" title="安装 iTerm2"></a>安装 iTerm2</h4><p>直接 <a href="http://www.iterm2.com/index.html" target="_blank" rel="noopener">下载</a> 就好啦，这个 <strong>终端</strong> 比自带的好很多</p><p>安装完成后，在 <strong>Preferences</strong> 中的 <strong>keys</strong> 选项卡中，添加一键隐藏和显示 iTerm2 的按键，<strong>Show/hide iTerm2 with a system-wide hotkey</strong> 这一项，我填写的是 <strong>Command + .</strong></p><p><strong>设置 iTerm2 的历史行数为无限</strong></p><p><img src="/images/unlimited-scrollback.png" alt="unlimited-scrollback"></p><p>MacOS 自带了很多 shell，可以通过下面的命令查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">zcdll@mbp cat /etc/shells</span><br><span class="line"><span class="comment"># List of acceptable shells for chpass(1).</span></span><br><span class="line"><span class="comment"># Ftpd will not allow users to connect who are not using</span></span><br><span class="line"><span class="comment"># one of these shells.</span></span><br><span class="line"></span><br><span class="line">/bin/bash</span><br><span class="line">/bin/csh</span><br><span class="line">/bin/ksh</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/zsh</span><br></pre></td></tr></table></figure><p>最后那个 zsh 的功能比较强大，改造这个。</p><h4 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh-my-zsh"></a>安装 oh-my-zsh</h4><p><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a> 是 <strong>A delightful community-driven (with 1,000+ contributors) framework for managing your zsh configuration</strong> ，就是一套现成的 zsh 配置方案，运行下面的命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><h4 id="美化-zsh"><a href="#美化-zsh" class="headerlink" title="美化 zsh"></a>美化 zsh</h4><h5 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h5><p><strong>oh-my-zsh</strong> 自带了很多主题，<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" target="_blank" rel="noopener">查看</a>，我选择但是 <strong>agnoster</strong> 这个主题，比较强大，也好看。执行 <code>vi ~/.zshrc</code>，修改主题的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ZSH_THEME="robbyrussell"</span></span><br><span class="line">ZSH_THEME=<span class="string">"agnoster"</span></span><br></pre></td></tr></table></figure><p>修改后发现，会有字体乱码，这时候就需要安装 <a href="http://powerline.readthedocs.io/en/latest/overview.html" target="_blank" rel="noopener">Powerline</a> 这个插件，然后安装 <strong>Powerline fonts 字体库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Powerline 需要通过 pip 安装，MacBook 自带 easy_install，通过它安装 pip</span></span><br><span class="line"></span><br><span class="line">sudo easy_install pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可能需要先更换一下 pip源</span></span><br><span class="line">pip install powerline-status</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/powerline/fonts ~/Downloads/fonts</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/Downloads/fonts</span><br><span class="line">./install.sh <span class="comment"># 安装字体，其实就是复制啦</span></span><br></pre></td></tr></table></figure><h5 id="切换字体"><a href="#切换字体" class="headerlink" title="切换字体"></a>切换字体</h5><p>其实我这里选择的是 <a href="https://github.com/tracyone/program_font/blob/master/YaHei%20Consolas%20Hybrid%201.12%20For%20Powerline.ttf" target="_blank" rel="noopener">YaHei Consolas Hybrid 1.12 For Powerline</a> 这个字体，之前在 Windows 和 Linux 上一直用这个字体，是 <strong>微软雅黑</strong> 和 Consolas 的混合字体，用起来很棒！</p><p><img src="/images/change-font.png" alt="change-font"></p><h5 id="切换配色"><a href="#切换配色" class="headerlink" title="切换配色"></a>切换配色</h5><p>这里更新的是 iTerm2 的配色，<a href="http://iterm2colorschemes.com/" target="_blank" rel="noopener">官网</a> 上有这些配色方案，先下载下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/mbadolato/iTerm2-Color-Schemes ~/Downloads/colors</span><br></pre></td></tr></table></figure><p>需要先导入配色，导入单个配色就好啦，然后选择这个配色。</p><p><img src="/images/change-color.png" alt="change-color"></p><h5 id="修改-hostname"><a href="#修改-hostname" class="headerlink" title="修改 hostname"></a>修改 hostname</h5><p>就是修改路径前面的那一长串，<strong>agnoster</strong> 主题可以隐藏掉这些</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.oh-my-zsh/themes/agnoster.zsh-theme</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到 prompt_context，修改 $USER@mbp 这里</span></span><br><span class="line"><span class="function"><span class="title">prompt_context</span></span>() &#123;</span><br><span class="line">  <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$USER</span>"</span> != <span class="string">"<span class="variable">$DEFAULT_USER</span>"</span> || -n <span class="string">"<span class="variable">$SSH_CLIENT</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    prompt_segment black default <span class="string">"%(!.%&#123;%F&#123;yellow&#125;%&#125;.)<span class="variable">$USER</span>@mbp"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，iTerm2 和 oh-my-zsh 就基本配置的差不多了，我还调整了一下透明度，剩下的就是按照需要安装一些插件，等需要的时候再写。</p><h5 id="添加-zsh-插件"><a href="#添加-zsh-插件" class="headerlink" title="添加 zsh 插件"></a>添加 zsh 插件</h5><p>有个插件后，zsh 的威力将大幅加强，比如自动补全，历史操作记录，语法高亮等。</p><ul><li>autojump 自动跳转</li><li>zsh-syntax-highlighting 语法高亮</li><li>zsh-autosuggestions 自动建议</li></ul><p>安装方式均为 <code>brew install xxx</code></p><p>安装完成后修改 zsh 的配置文件，<code>vi ~/.zshrc</code>，找到 <strong>plugins</strong> 这行，添加全部的插件，再添加 <strong>source</strong> 下面的那行，以及最后那两行，之后重开一个 <strong>shell</strong> 就能看到效果了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">  git zsh-syntax-highlighting zsh-autosuggestions Z autojump</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$ZSH</span>/oh-my-zsh.sh</span><br><span class="line"></span><br><span class="line">[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] &amp;&amp; . $(brew --prefix)/etc/profile.d/autojump.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文件末尾添加这两行</span></span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/share/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br></pre></td></tr></table></figure><h5 id="开启-Vim-语法高亮"><a href="#开启-Vim-语法高亮" class="headerlink" title="开启 Vim 语法高亮"></a>开启 Vim 语法高亮</h5><p>这个跟 <strong>zsh</strong> 没啥关系，主要是为了在 <strong>vim</strong> 中能够有语法高亮。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先复制配置文件到用户文件夹中</span></span><br><span class="line">cp /usr/share/vim/vimrc ~/.vimrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后在  set backspace=2下面一行插入如下代码</span></span><br><span class="line"><span class="built_in">set</span> ai                  <span class="string">" auto indenting</span></span><br><span class="line"><span class="string">set ruler               "</span> show the cursor position</span><br><span class="line"><span class="built_in">set</span> hlsearch            <span class="string">" highlight the last searched term</span></span><br><span class="line"><span class="string">set history=1000        "</span> keep 1000 lines of <span class="built_in">history</span></span><br><span class="line">syntax on               <span class="string">" syntax highlighting</span></span><br><span class="line"><span class="string">filetype plugin on      "</span> use the file <span class="built_in">type</span> plugins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其它选项</span></span><br><span class="line"><span class="built_in">set</span> nocompatible                 <span class="string">"去掉有关vi一致性模式，避免以前版本的bug和局限</span></span><br><span class="line"><span class="string">set nu!                          "</span>显示行号</span><br><span class="line"><span class="built_in">set</span> guifont=Luxi/ Mono/ 9        <span class="string">"设置字体，字体名称和字号</span></span><br><span class="line"><span class="string">filetype on                      "</span>检测文件的类型</span><br><span class="line"><span class="built_in">set</span> <span class="built_in">history</span>=1000                 <span class="string">"记录历史的行数</span></span><br><span class="line"><span class="string">set background=dark              "</span>背景使用黑色</span><br><span class="line">syntax on                        <span class="string">"语法高亮度显示</span></span><br><span class="line"><span class="string">set autoindent                   "</span>vim使用自动对齐，也就是把当前行的对齐格式应用到下一行(自动缩进）</span><br><span class="line"><span class="built_in">set</span> cindent         <span class="string">"（cindent是特别针对 C语言语法自动缩进）</span></span><br><span class="line"><span class="string">set smartindent                  "</span>依据上面的对齐格式，智能的选择对齐方式，对于类似C语言编写上有用</span><br><span class="line"><span class="built_in">set</span> tabstop=4                    <span class="string">"设置tab键为4个空格，</span></span><br><span class="line"><span class="string">set shiftwidth =4                "</span>设置当行之间交错时使用4个空格</span><br><span class="line"><span class="built_in">set</span> ai!                          <span class="string">"设置自动缩进</span></span><br><span class="line"><span class="string">set showmatch                    "</span>设置匹配模式，类似当输入一个左括号时会匹配相应的右括号</span><br><span class="line"><span class="built_in">set</span> guioptions-=T                <span class="string">"去除vim的GUI版本中得toolbar</span></span><br><span class="line"><span class="string">set vb t_vb=                     "</span>当vim进行编辑时，如果命令错误，会发出警报，该设置去掉警报</span><br><span class="line"><span class="built_in">set</span> ruler                        <span class="string">"在编辑过程中，在右下角显示光标位置的状态行</span></span><br><span class="line"><span class="string">set nohls                        "</span>默认情况下，寻找匹配是高亮度显示，该设置关闭高亮显示</span><br><span class="line"><span class="built_in">set</span> backspace=2                  <span class="string">"设置退格键可用</span></span><br><span class="line"><span class="string">set incsearch                    "</span>在程序中查询一单词，自动匹配单词的位置；如查询desk单词，当输到/d时，  会自动找到第一个d开头的单词，当输入到/de时，会自动找到第一个以ds开头  的单词，以此类推，进行查找；当找到要匹配的单词时，别忘记回车</span><br></pre></td></tr></table></figure><h3 id="配置-ssh-agent"><a href="#配置-ssh-agent" class="headerlink" title="配置 ssh-agent"></a>配置 ssh-agent</h3><p>通过 修改 <code>~/.ssh/config</code> 文件，使得系统重启后，不用再次添加 <strong>SSH Key</strong> 到 <strong>ssh-agent</strong> ，可以直接通过 <strong>ssh</strong> 方式来使用 git，不用输入账号密码。参考之前写的博文即可，<a href="https://zcdll.github.io/2018/01/10/git-ssh/" target="_blank" rel="noopener">通过 SSH 操作 Git 终极教程</a> 。</p><h3 id="搭建代理"><a href="#搭建代理" class="headerlink" title="搭建代理"></a>搭建代理</h3><h4 id="选择代理服务商"><a href="#选择代理服务商" class="headerlink" title="选择代理服务商"></a>选择代理服务商</h4><p>这个不多说</p><h4 id="选择代理方式"><a href="#选择代理方式" class="headerlink" title="选择代理方式"></a>选择代理方式</h4><p>Mac 上可以选择 <strong>pac 文件方式</strong>，直接添加一个 <strong>自动代理配置</strong> 就能用了。不过这种方式不灵活，不能根据需求随时选择哪些走代理，哪些直接连接。</p><p>然后就是选择一个服务商，找一个代理软件，我觉得 <strong>Surge</strong> 比较好用一点，直接添加三个代理，<strong>Google 备份与同步</strong> 直接就连上了。</p><h4 id="终端代理"><a href="#终端代理" class="headerlink" title="终端代理"></a>终端代理</h4><p>给终端代理与 Windows 和 Linux 下差不多，可以通过 <code>export http_proxy</code> 或者 <strong>proxychains4</strong> 的方式安装。</p><h4 id="为-Git-设置代理"><a href="#为-Git-设置代理" class="headerlink" title="为 Git 设置代理"></a>为 Git 设置代理</h4><p>主要是为 git 协议设置代理，方便通过 git 协议 clone 和 push 代码</p><p>之前，可以通过 proxychains4 来走 socks 代理，但是现在 Mac 的 SIP 禁止了这种方式。所以只能通过以下的方式。</p><ol><li><p>创建文件 <code>/usr/local/bin/proxy-wrapper</code>，编辑内容如下，其中端口号替换为自己的端口号，socks5 的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">nc -x127.0.0.1:9086 -X5 $*</span><br></pre></td></tr></table></figure></li><li><p>编辑 <code>~/.ssh/config</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    User zcdll</span><br><span class="line">    IdentityFile ~/.ssh/github</span><br><span class="line">    ProxyCommand /usr/local/bin/proxy-wrapper &apos;%h %p&apos;</span><br></pre></td></tr></table></figure><p>在最后一行添加新生成的文件</p></li></ol><h5 id="Alias"><a href="#Alias" class="headerlink" title="Alias"></a>Alias</h5><p>新建或修改文件 <code>vi ~/.zshrc</code></p><p>因为这里用了 <strong>zsh</strong> 这个 bash，不是默认的了，所以这些 alias 需要添加到 zsh 的配置文件中，默认暴露给用户的是 <code>~/.zshrc</code> 这个文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在文件末尾添加如下</span></span><br><span class="line"><span class="comment"># git 部分，我发现 zsh 自带的 alias 已经很全了，可以用它的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># proxy alias</span></span><br><span class="line"><span class="built_in">alias</span> pc=<span class="string">"proxychains4"</span></span><br><span class="line"><span class="built_in">alias</span> hp=<span class="string">"export http_proxy=http://127.0.0.1:6152"</span></span><br><span class="line"><span class="built_in">alias</span> hps=<span class="string">"export https_proxy=http://127.0.0.1:6152"</span></span><br><span class="line"><span class="built_in">alias</span> hpc=<span class="string">"export http_proxy="</span></span><br><span class="line"><span class="built_in">alias</span> hpsc=<span class="string">"export https_proxy="</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git alias</span></span><br><span class="line"><span class="built_in">alias</span> ga=<span class="string">'git add .'</span></span><br><span class="line"><span class="built_in">alias</span> gb=<span class="string">'git branch'</span></span><br><span class="line"><span class="built_in">alias</span> gcm=<span class="string">'git commit -m'</span></span><br><span class="line"><span class="built_in">alias</span> gd=<span class="string">'git diff'</span></span><br><span class="line"><span class="built_in">alias</span> gpu=<span class="string">'git push'</span></span><br><span class="line"><span class="built_in">alias</span> gpl=<span class="string">'git pull'</span></span><br><span class="line"><span class="built_in">alias</span> gl=<span class="string">'git ll'</span></span><br><span class="line"><span class="built_in">alias</span> gl3=<span class="string">'git ll -3'</span></span><br><span class="line"><span class="built_in">alias</span> gl5=<span class="string">'git ll -5'</span></span><br><span class="line"><span class="built_in">alias</span> gl10=<span class="string">'git ll -10'</span></span><br><span class="line"><span class="built_in">alias</span> gs=<span class="string">'git status'</span></span><br><span class="line"><span class="built_in">alias</span> gpu=<span class="string">'git push -u origin master'</span></span><br><span class="line"><span class="built_in">alias</span> gpr=<span class="string">'git pull --rebase --autostash'</span></span><br><span class="line"><span class="built_in">alias</span> axx=<span class="string">"cd /Users/zcdll/coder/axx-code"</span></span><br><span class="line"><span class="built_in">alias</span> mc=<span class="string">"cd /Users/zcdll/coder/code"</span></span><br><span class="line"><span class="built_in">alias</span> wb=<span class="string">"cd /Users/zcdll/coder/wenba-code"</span></span><br></pre></td></tr></table></figure><p>修改 zsh 配置文件 <code>vi ~/.zshrc</code>，添加如下，使得在 zsh 加载的时候加载这个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> -f ~/.bash_profile  &amp;&amp; <span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><h5 id="proxychains4"><a href="#proxychains4" class="headerlink" title="proxychains4"></a>proxychains4</h5><p>用 <strong>Homebrew</strong> 安装 <strong>proxychains4</strong> 很简单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">brew install proxychains-ng</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑配置文件 /usr/local/etc/proxychains.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推荐配置</span></span><br><span class="line">strict_chain</span><br><span class="line">proxy_dns</span><br><span class="line">remote_dns_subnet 224</span><br><span class="line">tcp_read_time_out 15000</span><br><span class="line">tcp_connect_time_out 8000</span><br><span class="line">localnet 127.0.0.0/255.0.0.0</span><br><span class="line">quiet_mode</span><br><span class="line"></span><br><span class="line">[ProxyList]</span><br><span class="line">socks5  127.0.0.1 1080</span><br></pre></td></tr></table></figure><h3 id="用-Homebrew-安装-curl"><a href="#用-Homebrew-安装-curl" class="headerlink" title="用 Homebrew 安装 curl"></a>用 Homebrew 安装 curl</h3><p>由于 <strong>MacOS</strong> 的 <strong>SIP</strong> 策略的影响，不能修改一些系统文件，所以直接运行 <code>proxychains4 curl xxx</code> 不会走代理。解决办法就是安装自己用户的 <strong>proxychains4</strong> 和 <strong>curl</strong>。终点参考 Github 上的这篇 <a href="https://github.com/rofl0r/proxychains-ng/issues/78" target="_blank" rel="noopener">issue</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">brew install curl</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH="/usr/local/opt/curl/bin:$PATH"'</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="comment"># 替换系统的 curl</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后测试</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为上面设置了 alias，所以这里通过 pc curl -vv http://www.google.com 就可以测试网络了，也可以通过 pc curl -i http://ip.cn 来测试。</span></span><br><span class="line"></span><br><span class="line">pc curl -vv http://www.google.com</span><br><span class="line"></span><br><span class="line">pc curl -i http://ip.cn</span><br></pre></td></tr></table></figure><h3 id="安装-Node-和-NPM"><a href="#安装-Node-和-NPM" class="headerlink" title="安装 Node 和 NPM"></a>安装 Node 和 NPM</h3><p>可以通过 <code>brew install node</code> 直接安装最新版的 <strong>nodejs</strong>，9.x 版本的，但是这个不是官方推荐的 <strong>稳定版</strong>，通过 <code>brew install node@8</code> 可以安装最新版的 <strong>稳定版</strong>，但是不会自动安装 <strong>npm</strong>，而且还需要自己导入 <strong>PATH</strong>，我觉得比较麻烦，就没有采用这种方式。</p><h4 id="安装-nvm"><a href="#安装-nvm" class="headerlink" title="安装 nvm"></a>安装 nvm</h4><p>可以安装 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> 这个 node 的版本管理器，很方便，通过下面的命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面是安装过程，注意最后那段</span></span><br><span class="line"></span><br><span class="line">% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100 12540  100 12540    0     0  11223      0  0:00:01  0:00:01 --:--:-- 11226</span><br><span class="line">=&gt; Downloading nvm from git to <span class="string">'/Users/zcdll/.nvm'</span></span><br><span class="line">=&gt; Cloning into <span class="string">'/Users/zcdll/.nvm'</span>...</span><br><span class="line">remote: Counting objects: 264, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (229/229), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 264 (delta 31), reused 107 (delta 25), pack-reused 0</span><br><span class="line">Receiving objects: 100% (264/264), 116.46 KiB | 76.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (31/31), <span class="keyword">done</span>.</span><br><span class="line">Note: checking out <span class="string">'7ad6d98cedde01809e32d56ab8ced064f6f28175'</span>.</span><br><span class="line"></span><br><span class="line">You are <span class="keyword">in</span> <span class="string">'detached HEAD'</span> state. You can look around, make experimental</span><br><span class="line">changes and commit them, and you can discard any commits you make <span class="keyword">in</span> this</span><br><span class="line">state without impacting any branches by performing another checkout.</span><br><span class="line"></span><br><span class="line">If you want to create a new branch to retain commits you create, you may</span><br><span class="line"><span class="keyword">do</span> so (now or later) by using -b with the checkout <span class="built_in">command</span> again. Example:</span><br><span class="line"></span><br><span class="line">  git checkout -b &lt;new-branch-name&gt;</span><br><span class="line"></span><br><span class="line">=&gt; Compressing and cleaning up git repository</span><br><span class="line"></span><br><span class="line">=&gt; Appending nvm <span class="built_in">source</span> string to /Users/zcdll/.zshrc</span><br><span class="line">=&gt; Appending bash_completion <span class="built_in">source</span> string to /Users/zcdll/.zshrc</span><br><span class="line">=&gt; Close and reopen your terminal to start using nvm or run the following to use it now:</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure><p>安装完之后，运行下面的命令来 <strong>加载 nvm</strong> 和 <strong>把 nvm 加入 bash_completion</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure><h4 id="通过-nvm-安装-Node-和-NPM"><a href="#通过-nvm-安装-Node-和-NPM" class="headerlink" title="通过 nvm 安装 Node 和 NPM"></a>通过 nvm 安装 Node 和 NPM</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm install 8.9.4</span><br><span class="line"></span><br><span class="line">nvm install lts=dubnium --reinstall-packages-from=lts/dubnium  <span class="comment">#重新安装包</span></span><br></pre></td></tr></table></figure><p>这样就可以安装 node 和 npm 了，npm 是自动安装的，同时会设置好 PATH，新开一个终端就可以运行 node 了。</p><h3 id="安装-Python3-和-pip"><a href="#安装-Python3-和-pip" class="headerlink" title="安装 Python3 和 pip"></a>安装 Python3 和 pip</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>MacOS 默认安装了 <strong>Python2</strong> 和 Python2 版本的 <strong>pip</strong>，没有默认安装 <strong>Python3</strong>。</p><p>由于上面已经安装了 <strong>Homebrew</strong>，所以通过 <strong>Homebrew</strong> 安装 <strong>Python3</strong> 是最简单的，还会同时安装 <strong>pip3</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew install python3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过打印出的日志可以看到，会自动安装需要的依赖，比如 sqlite</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在同时安装好了 Python2 和 Python3，pip 安装的默认是 Python2 的包，pip3 默认安装的是 Python3 的包</span></span><br></pre></td></tr></table></figure><h4 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.pip/pip.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个设置的单个账户的，换了账户需要重新设置。</span></span><br><span class="line"><span class="comment"># 有可能没有 .pip 这个目录，可能需要先创建</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 阿里云的源貌似同步更及时一些</span></span><br><span class="line">[global]</span><br><span class="line">index-url = http://mirrors.aliyun.com/pypi/simple</span><br><span class="line">trusted-host = mirrors.aliyun.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 豆瓣的</span></span><br><span class="line">[global]</span><br><span class="line">index-url = http://pypi.douban.com/simple</span><br><span class="line">trusted-host = pypi.douban.com</span><br></pre></td></tr></table></figure><h3 id="安装-PHP7-和-Composer"><a href="#安装-PHP7-和-Composer" class="headerlink" title="安装 PHP7 和 Composer"></a>安装 PHP7 和 Composer</h3><h4 id="安装-PHP7"><a href="#安装-PHP7" class="headerlink" title="安装 PHP7"></a>安装 PHP7</h4><p>macOS High Sierra 已经自带了 PHP 7.1 和 Apache 2.4</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">zcdll@mbp php -v</span><br><span class="line">PHP 7.1.7 (cli) (built: Jul 15 2017 18:08:09) ( NTS )</span><br><span class="line">Copyright (c) 1997-2017 The PHP Group</span><br><span class="line">Zend Engine v3.1.0, Copyright (c) 1998-2017 Zend Technologies</span><br><span class="line"></span><br><span class="line">zcdll@mbp apachectl -v</span><br><span class="line">Server version: Apache/2.4.28 (Unix)</span><br><span class="line">Server built:   Oct  9 2017 19:54:20</span><br></pre></td></tr></table></figure><p>这个对我来说够用了，暂时不升级到 PHP 7.2 了。升级的话可以参考这两篇文章 <a href="https://medium.com/@romaninsh/install-php-7-2-on-macos-high-sierra-with-homebrew-bdc4d1b04ea6" target="_blank" rel="noopener">Install PHP 7.2 on MacOS High Sierra (with homebrew)</a>，<a href="https://laravel-china.org/articles/6243/build-php-development-environment-in-macos-high-sierra-1013" target="_blank" rel="noopener">在 macOS High Sierra 10.13 搭建 PHP 开发环境</a></p><h4 id="安装-Composer"><a href="#安装-Composer" class="headerlink" title="安装 Composer"></a>安装 Composer</h4><h5 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://getcomposer.org/installer | php</span><br><span class="line">mv composer.phar /usr/<span class="built_in">local</span>/bin/composer</span><br></pre></td></tr></table></figure><h5 id="换源-1"><a href="#换源-1" class="headerlink" title="换源"></a>换源</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>从 <a href="https://store.docker.com/editions/community/docker-ce-desktop-mac" target="_blank" rel="noopener">官网</a> 下载安装即可，安装完了打开运行的时候，需要 <strong>授予管理员的权限</strong>。</p><h4 id="换源-2"><a href="#换源-2" class="headerlink" title="换源"></a>换源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.docker/daemon.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 registry-mirrors 这项，也可以通过 Mac 的 桌面应用修改</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"debug"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"experimental"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"registry-mirrors"</span> : [</span><br><span class="line">    <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="安装其他工具"><a href="#安装其他工具" class="headerlink" title="安装其他工具"></a>安装其他工具</h3><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">brew install mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完成之后的提示</span></span><br><span class="line"></span><br><span class="line">To connect run:</span><br><span class="line">    mysql -uroot</span><br><span class="line"></span><br><span class="line">To have launchd start mysql now and restart at login:</span><br><span class="line">  brew services start mysql</span><br><span class="line">Or, <span class="keyword">if</span> you don<span class="string">'t want/need a background service you can just run:</span></span><br><span class="line"><span class="string">  mysql.server start</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 这样安装的 MySQL 是没有 root 密码的，通过下面的命令设置密码</span></span><br><span class="line"><span class="string">mysql -uroot</span></span><br><span class="line"><span class="string">&gt; set password for '</span>root<span class="string">'@'</span>localhost<span class="string">' = password('</span>newpassword<span class="string">');</span></span><br></pre></td></tr></table></figure><h4 id="sqlqueue"><a href="#sqlqueue" class="headerlink" title="sqlqueue"></a>sqlqueue</h4><p>从 <a href="http://www.sequelpro.com/" target="_blank" rel="noopener">官网</a> 下载安装即可</p><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">brew install redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 redis</span></span><br><span class="line">redis-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆</span></span><br><span class="line">redis-cli -h host -p port -a password</span><br></pre></td></tr></table></figure><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><h4 id="Homestead"><a href="#Homestead" class="headerlink" title="Homestead"></a>Homestead</h4><h4 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">brew install mongodb</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the data directory</span></span><br><span class="line">mkdir -p /data/db</span><br><span class="line"></span><br><span class="line">mongod</span><br></pre></td></tr></table></figure><h4 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install yarn</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://yq.aliyun.com/articles/5055" target="_blank" rel="noopener">brew 更新镜像源进行 update</a></li><li><a href="https://www.jianshu.com/p/6ff47e388d2d" target="_blank" rel="noopener">Terminal 改造：iterm2+Oh my ZSH+powerline 字体</a></li><li><a href="https://www.jianshu.com/p/bb1c97269b11" target="_blank" rel="noopener">mac－改造你的 terminal</a></li><li><a href="http://www.dreamxu.com/mac-terminal/" target="_blank" rel="noopener">Mac 下配置终端环境 iTerm2 + Zsh + Oh My Zsh + tmux</a></li><li><a href="https://www.jianshu.com/p/53eb1075f627" target="_blank" rel="noopener">最简单 iTerm2 + oh-my-zsh 打造 Mac 炫酷终端教程-菜鸟版实操整理</a></li><li><a href="https://www.jianshu.com/p/59a3f1601cfc" target="_blank" rel="noopener">最简单 oh-my-zsh mac 版基本插件安装-菜鸟实操整理</a></li><li><a href="https://zcdll.github.io/2018/01/10/git-ssh/" target="_blank" rel="noopener">通过 SSH 操作 Git 终极教程</a></li><li><a href="https://juejin.im/entry/5821840cd203090055134cc0" target="_blank" rel="noopener">macOS 终端走代理（科学上网）</a></li><li><a href="http://harttle.land/2015/11/07/vim-cursor.html" target="_blank" rel="noopener">Vim 中如何快速进行光标移动？</a></li><li><a href="https://www.douban.com/note/577926866/" target="_blank" rel="noopener">mac 下 alias 配置终端命令的别名与 zsh 的配合</a></li><li><a href="https://my.oschina.net/dyl226/blog/752030" target="_blank" rel="noopener">Mac 终端 Terminal 光标移动快捷键</a></li><li><a href="https://zcdll.github.io/2017/11/27/Ubuntu-init/" target="_blank" rel="noopener">搭建 Ubuntu 上的开发环境</a></li><li><a href="http://pythonguidecn.readthedocs.io/zh/latest/starting/install3/osx.html" target="_blank" rel="noopener">在 Mac OS X 上安装 Python 3</a></li><li><a href="https://medium.com/@romaninsh/install-php-7-2-on-macos-high-sierra-with-homebrew-bdc4d1b04ea6" target="_blank" rel="noopener">Install PHP 7.2 on MacOS High Sierra (with homebrew)</a></li><li><a href="https://laravel-china.org/articles/6243/build-php-development-environment-in-macos-high-sierra-1013" target="_blank" rel="noopener">在 macOS High Sierra 10.13 搭建 PHP 开发环境</a></li><li><a href="http://blog.sina.com.cn/s/blog_684196ad0102w84r.html" target="_blank" rel="noopener">MAC 下 iterm+oh my zsh 在 vim 编辑时语法高亮</a></li><li><a href="http://wdxtub.com/2016/02/18/oh-my-zsh/" target="_blank" rel="noopener">zsh 全程指南</a></li><li><a href="https://github.com/rofl0r/proxychains-ng/issues/258" target="_blank" rel="noopener">Proxychains-ng fails after upgrading to macOS Mojave</a></li><li><a href="https://segmentfault.com/q/1010000000118837" target="_blank" rel="noopener">如何为 Git 设置代理？</a></li><li><a href="https://wiki.archlinux.org/index.php/SSH_keys_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">SSH keys-archlinux</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h3&gt;&lt;p&gt;之前一直在 &lt;strong&gt;Windows&lt;/strong&gt; 下写代码，公司是 &lt;strong&gt;Ubuntu&lt;/strong&gt; + &lt;strong&gt;Windows&lt;/strong&gt;，家里的 &lt;strong&gt;MacBook&lt;/strong&gt; 偶尔用一下，出去玩或者回老家的时候会带上，但是很少写代码。&lt;/p&gt;
&lt;p&gt;最近在家里 &lt;strong&gt;挖 ETH&lt;/strong&gt;，虽说只需要显卡的算力，对 CPU 要求不高，但是在挖矿的时候，干别的很不爽，程序（动画）切换慢，想看高清视频又害怕影响挖矿的效率，以及 &lt;strong&gt;Windows&lt;/strong&gt; 下没有特别好看+好用的 &lt;strong&gt;终端&lt;/strong&gt;，&lt;strong&gt;Cmder&lt;/strong&gt; 还是不能和 &lt;strong&gt;Mac&lt;/strong&gt;，&lt;strong&gt;Linux&lt;/strong&gt; 下的比，又不想开虚拟机，各种奇葩的解决方案也只是权宜之计，有时候在配置环境的时候不顺心，需要填坑，看网上的好多视频都是 MacBook，太好看了。。。&lt;/p&gt;
&lt;p&gt;种种原因，最后决定搞一搞这台 13 寸 的 2013 Late MacBook Pro。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="http://yoursite.com/categories/Mac/"/>
    
    
      <category term="折腾" scheme="http://yoursite.com/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
      <category term="环境" scheme="http://yoursite.com/tags/%E7%8E%AF%E5%A2%83/"/>
    
      <category term="开发环境" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>在使用 Ubuntu，Linux 时遇到的坑</title>
    <link href="http://yoursite.com/2018/02/09/ubuntu-linux-traps/"/>
    <id>http://yoursite.com/2018/02/09/ubuntu-linux-traps/</id>
    <published>2018-02-09T02:39:45.000Z</published>
    <updated>2020-08-04T07:29:12.116Z</updated>
    
    <content type="html"><![CDATA[<p>在用 Linux，用 Ubuntu 的过程中，时不时会遇到一些坑，一些 traps，往往是花了很多时间才解决掉，而且很多时候有可能就是单纯的解决了，问题后面的原因可能没有搞清楚。在此先记录下来，争取能够慢慢理解。<br>个人觉得学习 Linux 不会一蹴而就，是一个量变到质变的过程。</p><a id="more"></a><hr><p>制定一个格式，方便书写</p><ol><li>问题描述</li><li>解决办法</li><li>一些思考</li><li>相关链接</li></ol><hr><h3 id="AppImage-程序的安装，使用和卸载"><a href="#AppImage-程序的安装，使用和卸载" class="headerlink" title="AppImage 程序的安装，使用和卸载"></a>AppImage 程序的安装，使用和卸载</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>AppImage是一种在 Linux系统中用于分发便携式软件而不需要超级用户权限来安装它们的格式。它还试图让允许Linux的上游开发者来分发他们的程序而不用考虑不同Linux发行版间的区别。</p><p>它有如下特点：</p><ol><li><p>AppImage不把Linux应用程序安装在文件系统相应的目录中。相反,它没有进行实际的安装。AppImage文件只是个压缩文件，在它运行时候挂载。</p></li><li><p>用AppImage打包的程序，一个程序就是一个文件。每一个文件都包含了该程序在其所要运行的目标平台上所需的运行库。AppImage文件是基于ISO 9660并经过zisofs压缩的包含有一个最小化的AppDir目录和一个极小的运行环境的文件。只要把这个文件添加到live CD中，这个程序便可被轻而易举地添加进live CD中。</p></li><li><p>用AppImage文件比安装一个应用程序更加简单。它不需要解压也不需要为系统环境做调整。使用主流Linux发行版的用户可以下载它，使其可执行，并且运行即可。</p></li></ol><p>在我想安装一个 Gist 管理软件 <a href="https://github.com/hackjutsu/Lepton" target="_blank" rel="noopener">Lepton</a> 的时候，发现它提供给 Linux 用户的打包格式是 <strong>AppImage</strong> ，一开始不知道怎么用，后来查询了下发现 <strong>直接双击打开</strong> 就行。</p><p>在打开的时候，程序可能会自己询问是否给它 <strong>可执行</strong> 的权限，如果不询问的话，执行 <code>sudo chmod a+u XXX</code> 就行了，或者在 Ubuntu 下右击赋予权限也行。</p><p>但是后来在我移动 <strong>AppImage</strong> 源文件到新的位置后，我发现不能用了，系统以为我卸载了这个程序，但是并没有删除掉它生成的一些配置文件，比如 <strong>icon</strong> 等，以至于在我再次启动程序后，发现 <strong>没有正确的显示图标</strong>，以及 <strong>在 Ubuntu 的 Dash 中找不到 lepton 了</strong>。</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>一开始我先尝试删除源文件，重启电脑，重新下载，再安装，发现并没有解决问题。</p><p>然后在网上搜索，发现这个 <strong>AppImage</strong> 在至少以下两个目录新创建了文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/home/<span class="variable">$USERNAME</span>/.config/Lepton  <span class="comment"># 这个目录中是一些配置文件</span></span><br><span class="line"></span><br><span class="line">/home/<span class="variable">$USERNAME</span>/.<span class="built_in">local</span>/share/applications  <span class="comment"># 这个目录中是一个桌面文件 appimagekit-lepton.desktop</span></span><br></pre></td></tr></table></figure><p>然后我就把第一个目录清空，删除了第二个文件，再次启动 <strong>AppImage</strong> 文件发现可以用了。</p><h4 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h4><ol><li>一般程序都是需要往系统中写入一些自己的配置信息的，Mac，Windows，Linux 都不例外，所以这种自己可执行的程序，也一样，我最开始的思路是对的，只是没有找全，以及没有联想到 <strong>.desktop</strong> 文件的事情</li><li>想要在 Ubuntu 的 <a href="https://www.lifewire.com/complete-guide-ubuntu-unity-dash-2202066" target="_blank" rel="noopener">Dash</a> 中添加某个程序的话，在 <code>/home/$USERNAME/.local/share/applications</code> 中添加一个 <strong>.desktop</strong> 文件就好了，格式参照别的文件写就行。</li></ol><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul><li><a href="https://askubuntu.com/questions/774490/what-is-an-appimage-how-do-i-install-it" target="_blank" rel="noopener">What is an “AppImage”? How do I install it?</a></li><li><a href="https://discourse.appimage.org/t/standardise-removal-of-appimage/62" target="_blank" rel="noopener">Standardise Removal of AppImage</a></li><li><a href="https://github.com/AppImage/AppImageKit/blob/master/desktopintegration" target="_blank" rel="noopener">AppImage/AppImageKit/desktopintegration</a></li><li><a href="https://www.lifewire.com/complete-guide-ubuntu-unity-dash-2202066" target="_blank" rel="noopener">The Complete Guide To The Ubuntu Unity Dash</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在用 Linux，用 Ubuntu 的过程中，时不时会遇到一些坑，一些 traps，往往是花了很多时间才解决掉，而且很多时候有可能就是单纯的解决了，问题后面的原因可能没有搞清楚。在此先记录下来，争取能够慢慢理解。&lt;br&gt;个人觉得学习 Linux 不会一蹴而就，是一个量变到质变的过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="坑" scheme="http://yoursite.com/tags/%E5%9D%91/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="折腾" scheme="http://yoursite.com/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>Linux 中 Crontab 定时任务执行时的环境变量问题</title>
    <link href="http://yoursite.com/2018/01/30/own-crontab/"/>
    <id>http://yoursite.com/2018/01/30/own-crontab/</id>
    <published>2018-01-30T02:58:32.000Z</published>
    <updated>2020-08-04T07:29:12.116Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>在 <strong>Ubuntu</strong> 上设置了一个 <strong>crontab</strong> 的定时任务，每天上午十点执行一个爬虫。</p><p>今天早上检查爬虫的输出文件，发现并没有成功执行，报错 <code>scrapy: 未找到命令</code> 没找到。</p><a id="more"></a><p>因为不是在 <strong>root</strong> 用户下安装的 <strong>scrapy</strong>，是在 <strong>crawl</strong> 用户下，然后一开始没注意，应该是用 <strong>root</strong> 用户配置的定时任务，导致定时任务找不到 <strong>scrapy</strong>，这个可以理解。但是当我在 <strong>crawl</strong> 用户下，重新配置了爬虫，发现还是报同样的错误。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l  <span class="comment"># 通过这个命令，可以查看当前用户下的定时任务</span></span><br></pre></td></tr></table></figure><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>后来经过查阅得知，<strong>crontab</strong> 有自己的环境变量配置，在 <code>/etc/crontab</code> 文件中，并不会自动加载当前用户的环境变量。所以在执行命令之前，应该先配置好环境变量。</p><p>所以在 <strong>crontab</strong> 用户下，执行命令前先载入环境变量，如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00 10 * * * <span class="built_in">source</span> <span class="variable">$HOME</span>/.bash_profile &amp;&amp; <span class="variable">$HOME</span>/path/to/script;sh /home/crawl/exec_aqi.sh &amp;  &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>如果直接修改 <code>/etc/crontab</code> 文件，如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=root</span><br><span class="line"></span><br><span class="line"><span class="comment"># For details see man 4 crontabs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name  command to be executed</span></span><br><span class="line">00 10 * * * crawl sh /home/crawl/exec_aqi.sh &amp;</span><br></pre></td></tr></table></figure><p>这样不行，因为这样只是制定了运行的用户，并没有修改 <strong>环境变量</strong>。倒不如在当前用户下添加定时任务，同时修改环境变量。</p><p>修改完之后，最好执行命令 <code>sudo service crond restart</code> 使立即生效。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="http://blog.csdn.net/dancen/article/details/24355287" target="_blank" rel="noopener">Linux中crontab的坑爹环境变量问题</a></li><li><a href="http://www.ha97.com/910.html" target="_blank" rel="noopener">（总结）CentOS Linux使用crontab运行定时任务详解</a></li><li><a href="http://www.netingcn.com/crontab-designate.html" target="_blank" rel="noopener">crontab 指定执行用户</a></li><li><a href="https://segmentfault.com/a/1190000002724336" target="_blank" rel="noopener">总是出问题的Crontab</a></li><li><a href="http://josh-persistence.iteye.com/blog/2229300" target="_blank" rel="noopener">Linux执行Cron Job失败，在Shell sh下执行却能成功 - 环境变量？</a></li><li><a href="http://blog.csdn.net/brad_chen/article/details/50318297" target="_blank" rel="noopener">CentOS crontab 定时任务不执行的常见解决方法</a></li><li><a href="http://www.blogdaren.com/m/?post=1351" target="_blank" rel="noopener">crontab 中的指定特定的用户身份来运行相关的命令或者脚本</a></li><li><a href="http://www.cnblogs.com/b028/archive/2011/01/07/1930243.html" target="_blank" rel="noopener">linux下的定时任务，Crontab用法</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h3&gt;&lt;p&gt;在 &lt;strong&gt;Ubuntu&lt;/strong&gt; 上设置了一个 &lt;strong&gt;crontab&lt;/strong&gt; 的定时任务，每天上午十点执行一个爬虫。&lt;/p&gt;
&lt;p&gt;今天早上检查爬虫的输出文件，发现并没有成功执行，报错 &lt;code&gt;scrapy: 未找到命令&lt;/code&gt; 没找到。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="坑" scheme="http://yoursite.com/tags/%E5%9D%91/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="crontab" scheme="http://yoursite.com/tags/crontab/"/>
    
      <category term="定时任务" scheme="http://yoursite.com/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>给非 root 用户安装自己的 Python3 和 pip3</title>
    <link href="http://yoursite.com/2018/01/29/own-python-pip/"/>
    <id>http://yoursite.com/2018/01/29/own-python-pip/</id>
    <published>2018-01-29T03:39:36.000Z</published>
    <updated>2020-08-04T07:29:12.116Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>需要在一台服务器上部署一套爬虫，用 Python 的 <a href="https://scrapy.org/" target="_blank" rel="noopener">Scrapy</a> 框架写的。由于不想跟系统的 Python 包混用，所以需要自己安装一套 Python 包。开发的时候用的是 <a href="https://github.com/pypa/pipenv" target="_blank" rel="noopener">pipenv</a> 来管理包，在服务器上部署之后可以使用，但是因为还需要用 <strong>crontab</strong> 来写一个定时任务每天运行一次爬虫，在写定时任务的时候发现，运行 <code>pipenv shell</code> 后不能继续执行 <strong>.sh 文件</strong> 中下一行的命令，发现是切换了 <strong>bash</strong> ，在 <code>exit</code> 退出 <strong>pipenv</strong> 后会继续运行 <strong>.sh 文件</strong> 中下一行的命令，所以只得舍弃 <strong>pipenv</strong>。</p><a id="more"></a><p>然后在服务器上新建了 <strong>crawl</strong> 用户，发现还得安装一套自己的 python 和 pip，才可以与系统的包区分开。。。</p><p>于是在搞通这一套程序后，记录下来整个过程。</p><h3 id="准备非-root-用户"><a href="#准备非-root-用户" class="headerlink" title="准备非 root 用户"></a>准备非 root 用户</h3><p>通过 <code>useradd</code> 和 <code>passwd</code> 命令新建一个用户，设置密码。</p><p>最好把用户加入 soduers 文件，方便使用。（不加入也能用）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sudoers  <span class="comment">#把用户加入 sudo 组，仿照 root 写</span></span><br></pre></td></tr></table></figure><h3 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装 Python"></a>安装 Python</h3><p>通常情况下通过 apt 或者 yum 安装的都不是最新版本，编译安装可以选择版本，比较合心意。</p><h4 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到非 root 用户的 home 目录，此处为 crawl 用户</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ mkdir ~/software/python3  <span class="comment"># 创建安装目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载安装文件，就是从这个网站，版本后可能不同</span></span><br><span class="line">$ wget --no-check-certificate https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz</span><br><span class="line"><span class="comment"># 注意：wget获取https的时候要加上：--no-check-certificate</span></span><br><span class="line"></span><br><span class="line">$ tar -xzvf Python-3.6.4.tgz <span class="comment"># 解压缩包</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> Python-3.6.4 <span class="comment"># 进入解压目录</span></span><br></pre></td></tr></table></figure><h4 id="编译安装-Python3"><a href="#编译安装-Python3" class="headerlink" title="编译安装 Python3"></a>编译安装 Python3</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/home/crawl/software/python3  <span class="comment"># 这里的 prefix 指明了安装目录，必须写上</span></span><br><span class="line"></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>安装完成后，执行 <code>python</code> 或者 <code>python3</code> 发现还是系统的，不是自己的。这是因为默认会从 <code>/usr/bin</code> 下去寻找可执行文件。</p><p>这里采取 <code>alias</code> 策略，采取软链接的话，貌似不可以？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bashrc  <span class="comment"># 添加下面内容</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> mypython=/home/crawl/software/python3/bin/python3</span><br></pre></td></tr></table></figure><h3 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h3><h4 id="安装准备和安装"><a href="#安装准备和安装" class="headerlink" title="安装准备和安装"></a>安装准备和安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源代码</span></span><br><span class="line">$ wget --no-check-certificate https://github.com/pypa/pip/archive/9.0.1.tar.gz</span><br><span class="line">$ tar -zvxf 9.0.1.tar.gz    <span class="comment"># 解压文件</span></span><br><span class="line">$ <span class="built_in">cd</span> pip-9.0.1</span><br></pre></td></tr></table></figure><h4 id="安装pip3"><a href="#安装pip3" class="headerlink" title="安装pip3"></a>安装pip3</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 mypython 安装</span></span><br><span class="line">$ mypython setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 alias</span></span><br><span class="line">vi ~/.bashrc  <span class="comment"># 添加下面内容</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> mypip=/home/crawl/software/python3/bin/pip3</span><br><span class="line"></span><br><span class="line">pip install --upgrade pip  <span class="comment"># 升级 pip</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>之后在 <strong>crawl</strong> 用户下使用 <code>mypython</code> 和 <code>mypip</code> 命令，就会调用自己的 <strong>python</strong> 和 <strong>pip。</strong></p><p>在此记录下安装 <strong>scrapy</strong> 的过程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要先单独安装 Twisted，因为直接安装 scrapy 的话会报错，通过阿里的源 pip 安装不了 Twisted，不知道为什么</span></span><br><span class="line"><span class="comment"># 需要先修改为阿里的 pip 源，参考 https://zcdll.github.io/2017/11/27/Ubuntu-init</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Twisted</span></span><br><span class="line">wget --no-check-certificate https://pypi.python.org/packages/a2/37/298f9547606c45d75aa9792369302cc63aa4bbcf7b5f607560180dd099d2/Twisted-17.9.0.tar.bz2</span><br><span class="line"></span><br><span class="line">bzip2 -d Twisted-17.9.0.tar.bz2</span><br><span class="line"></span><br><span class="line">tar -xvf Twisted-17.9.0.tar</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> Twisted-17.9.0</span><br><span class="line"></span><br><span class="line">mypython setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 scrapy</span></span><br><span class="line"></span><br><span class="line">mypip install scrapy</span><br></pre></td></tr></table></figure><h4 id><a href="#" class="headerlink" title></a></h4><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://ehlxr.me/2017/01/07/CentOS-7-%E5%AE%89%E8%A3%85-Python3%E3%80%81pip3/" target="_blank" rel="noopener">CentOS 7 安装 Python3、pip3</a></li><li><a href="https://www.cnblogs.com/linuxbug/p/4923970.html" target="_blank" rel="noopener">scrapy初体验 - 安装遇到的坑及第一个范例</a></li><li><a href="http://blog.csdn.net/xiaotuni/article/details/2099609" target="_blank" rel="noopener">tar.bz2 解压命令。</a></li><li><a href="http://blog.csdn.net/dream_angel_z/article/details/51338546" target="_blank" rel="noopener">Linux环境下非root用户安装Python及相关库</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h3&gt;&lt;p&gt;需要在一台服务器上部署一套爬虫，用 Python 的 &lt;a href=&quot;https://scrapy.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Scrapy&lt;/a&gt; 框架写的。由于不想跟系统的 Python 包混用，所以需要自己安装一套 Python 包。开发的时候用的是 &lt;a href=&quot;https://github.com/pypa/pipenv&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pipenv&lt;/a&gt; 来管理包，在服务器上部署之后可以使用，但是因为还需要用 &lt;strong&gt;crontab&lt;/strong&gt; 来写一个定时任务每天运行一次爬虫，在写定时任务的时候发现，运行 &lt;code&gt;pipenv shell&lt;/code&gt; 后不能继续执行 &lt;strong&gt;.sh 文件&lt;/strong&gt; 中下一行的命令，发现是切换了 &lt;strong&gt;bash&lt;/strong&gt; ，在 &lt;code&gt;exit&lt;/code&gt; 退出 &lt;strong&gt;pipenv&lt;/strong&gt; 后会继续运行 &lt;strong&gt;.sh 文件&lt;/strong&gt; 中下一行的命令，所以只得舍弃 &lt;strong&gt;pipenv&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="pipenv" scheme="http://yoursite.com/tags/pipenv/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="折腾" scheme="http://yoursite.com/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="环境" scheme="http://yoursite.com/tags/%E7%8E%AF%E5%A2%83/"/>
    
      <category term="crontab" scheme="http://yoursite.com/tags/crontab/"/>
    
      <category term="Pip" scheme="http://yoursite.com/tags/Pip/"/>
    
      <category term="定时" scheme="http://yoursite.com/tags/%E5%AE%9A%E6%97%B6/"/>
    
  </entry>
  
  <entry>
    <title>Docker 学习笔记（3）</title>
    <link href="http://yoursite.com/2018/01/28/docker-tutorial-3/"/>
    <id>http://yoursite.com/2018/01/28/docker-tutorial-3/</id>
    <published>2018-01-28T14:06:30.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<h3 id="操作-Docker-容器"><a href="#操作-Docker-容器" class="headerlink" title="操作 Docker 容器"></a>操作 Docker 容器</h3><p>简单的说，容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。</p><a id="more"></a><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><p>启动容器有两种方式</p><ul><li>基于镜像 <strong>新建</strong> 一个容器并启动</li><li>将在终止状态（<code>stopped</code>）的容器 <strong>重新启动</strong>。</li></ul><h5 id="新建并启动"><a href="#新建并启动" class="headerlink" title="新建并启动"></a>新建并启动</h5><p>当利用 <code>docker run</code> 来创建容器时，Docker 在后台运行的标准操作包括：</p><ul><li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li><li>利用镜像创建并启动一个容器</li><li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li><li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li><li>从地址池配置一个 ip 地址给容器</li><li>执行用户指定的应用程序</li><li>执行完毕后容器被终止</li></ul><p>例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run ubuntu:16.04 /bin/<span class="built_in">echo</span> <span class="string">'Hello world'</span></span><br><span class="line">Hello world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出一个 “Hello World”，之后终止容器。</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -t -i ubuntu:16.04 /bin/bash</span><br><span class="line">root@af8bae53bdd3:/<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动一个 bash 终端，允许用户进行交互。</span></span><br></pre></td></tr></table></figure><h5 id="启动已终止容器"><a href="#启动已终止容器" class="headerlink" title="启动已终止容器"></a>启动已终止容器</h5><p>可以利用 <code>docker container start</code> 命令，直接将一个已经终止的容器启动运行。</p><h4 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h4><p>更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 <code>-d</code> 参数来实现。</p><p><strong>注：</strong> 容器是否会长久运行，是和 <code>docker run</code> 指定的命令有关，和 <code>-d</code> 参数无关。</p><h4 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h4><p>可以使用 <code>docker container stop</code> 来终止一个运行中的容器。</p><p><code>docker container restart</code> 命令会将一个运行态的容器终止，然后再重新启动它。</p><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><p>使用 <code>docker attach</code> 命令或 <code>docker exec</code> 命令，推荐使用 <code>docker exec</code> 命令，因为使用 <code>docker attach</code> 命令进入容器再使用 <code>exit</code> 命令退出后，会导致容器的停止。</p><h5 id="exec-命令的-i-t-参数"><a href="#exec-命令的-i-t-参数" class="headerlink" title="exec 命令的 -i -t 参数"></a><code>exec</code> 命令的 -i -t 参数</h5><p>只用 <code>-i</code> 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。</p><p>当 <code>-i</code> <code>-t</code> 参数一起使用时，则可以看到熟悉的 Linux 命令提示符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -i 69d1 bash</span><br><span class="line">ls</span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ docker <span class="built_in">exec</span> -it 69d1 bash</span><br><span class="line">root@69d137adef7a:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><h4 id="导出和导入容器"><a href="#导出和导入容器" class="headerlink" title="导出和导入容器"></a>导出和导入容器</h4><ul><li><p>使用 <code>docker export</code> 命令导出容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker export 7691a814370e &gt; ubuntu.tar</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>docker import</code> 从容器快照文件中再导入为镜像，可以通过指定 URL 或者某个目录来导入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat ubuntu.tar | docker import - test/ubuntu:v1.0</span><br><span class="line"></span><br><span class="line">docker import http://example.com/exampleimage.tgz example/imagerepo</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</p></blockquote><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><p><code>docker container rm</code> 来删除一个处于终止状态的容器</p><p><code>docker container prune</code> 清理所有处于终止状态的容器</p><h3 id="Docker-数据管理"><a href="#Docker-数据管理" class="headerlink" title="Docker 数据管理"></a>Docker 数据管理</h3><p>在容器中管理数据主要有两种方式：</p><ul><li>数据卷（Volumes）</li><li>挂载主机目录 (Bind mounts)</li></ul><h4 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h4><p> <code>数据卷</code> 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p><ul><li><code>数据卷</code> 可以在容器之间共享和重用</li><li>对 <code>数据卷</code> 的修改会立马生效</li><li>对 <code>数据卷</code> 的更新，不会影响镜像</li><li><code>数据卷</code> 默认会一直存在，即使容器被删除</li></ul><blockquote><p>注意：<code>数据卷</code> 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会隐藏掉，能显示看的是挂载的 <code>数据卷</code>。</p></blockquote><h5 id="启动一个挂载数据卷的容器"><a href="#启动一个挂载数据卷的容器" class="headerlink" title="启动一个挂载数据卷的容器"></a>启动一个挂载数据卷的容器</h5><p>在用 <code>docker run</code> 命令的时候，使用 <code>--mount</code> 标记来将 <code>数据卷</code> 挂载到容器里。在一次 <code>docker run</code> 中可以挂载多个 <code>数据卷</code>。</p><p>下面创建一个名为 <code>web</code> 的容器，并加载一个 <code>数据卷</code> 到容器的 <code>/webapp</code> 目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -P \</span><br><span class="line">    --name web \</span><br><span class="line">    # -v my-vol:/wepapp \</span><br><span class="line">    --mount source=my-vol,target=/webapp \</span><br><span class="line">    training/webapp \</span><br><span class="line">    python app.py</span><br></pre></td></tr></table></figure><h4 id="挂载主机目录"><a href="#挂载主机目录" class="headerlink" title="挂载主机目录"></a>挂载主机目录</h4><p>使用 <code>--mount</code> 标记可以指定挂载一个本地主机的目录到容器中去。<strong>本地目录的路径必须是绝对路径</strong> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -P \</span><br><span class="line">    --name web \</span><br><span class="line">    # -v /src/webapp:/opt/webapp \</span><br><span class="line">    --mount type=bind,source=/src/webapp,target=/opt/webapp \</span><br><span class="line">    training/webapp \</span><br><span class="line">    python app.py</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;操作-Docker-容器&quot;&gt;&lt;a href=&quot;#操作-Docker-容器&quot; class=&quot;headerlink&quot; title=&quot;操作 Docker 容器&quot;&gt;&lt;/a&gt;操作 Docker 容器&lt;/h3&gt;&lt;p&gt;简单的说，容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="最佳实践" scheme="http://yoursite.com/tags/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="容器" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Docker 学习笔记（2）</title>
    <link href="http://yoursite.com/2018/01/28/docker-tutorial-2/"/>
    <id>http://yoursite.com/2018/01/28/docker-tutorial-2/</id>
    <published>2018-01-28T04:11:26.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用-Dockerfile-定制镜像"><a href="#使用-Dockerfile-定制镜像" class="headerlink" title="使用 Dockerfile 定制镜像"></a>使用 Dockerfile 定制镜像</h3><p><code>docker commit</code> 镜像的定制实际上就是定制每一层所添加的配置、文件。</p><a id="more"></a><p>为了解决镜像无法重复的问题、镜像构建透明性的问题和体积的问题，我们把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像。这个脚本就是 Dockerfile。</p><p>Dockerfile 是一个文本文件，其内包含了一条条的<strong>指令(Instruction)</strong>，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p><h4 id="FROM-指定基础镜像"><a href="#FROM-指定基础镜像" class="headerlink" title="FROM 指定基础镜像"></a>FROM 指定基础镜像</h4><p>所谓定制镜像，一定是以一个镜像为基础，在其上进项定制。</p><p>一个 <code>Dockerfile</code> 中 <code>FROM</code> 是必备的指令，<strong>并且必须是第一条指令</strong>。</p><p>除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 <code>scratch</code>。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。如果以 <code>scratch</code> 为基础镜像的话，意味着不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。</p><h4 id="RUN-执行命令"><a href="#RUN-执行命令" class="headerlink" title="RUN 执行命令"></a>RUN 执行命令</h4><p><code>RUN</code> 指令是用来执行命令行命令的。其格式有两种：</p><ul><li><em>shell</em> 格式：<code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 <code>RUN</code> 指令就是这种格式。</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure><ul><li><em>exec</em> 格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式。</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:jessie</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> buildDeps=<span class="string">'gcc libc6-dev make'</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get update \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get install -y <span class="variable">$buildDeps</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; wget -O redis.tar.gz <span class="string">"http://download.redis.io/releases/redis-3.2.5.tar.gz"</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mkdir -p /usr/src/redis \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; make -C /usr/src/redis \</span></span><br><span class="line"><span class="bash">    &amp;&amp; make -C /usr/src/redis install \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /var/lib/apt/lists/* \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm redis.tar.gz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -r /usr/src/redis \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get purge -y --auto-remove <span class="variable">$buildDeps</span></span></span><br></pre></td></tr></table></figure><blockquote><p>Dockerfile 支持 Shell 类的行尾添加 <code>\</code> 的命令换行方式，以及行首 <code>#</code> 进行注释的格式。良好的格式，比如换行、缩进、注释等，会让维护、排障更为容易，这是一个比较好的习惯。</p></blockquote><blockquote><p>此外，还可以看到这一组命令的最后添加了清理工作的命令，删除了为了编译构建所需要的软件，清理了所有下载、展开的文件，并且还清理了 <code>apt</code> 缓存文件。这是很重要的一步，我们之前说过，镜像是多层存储，每一层的东西并不会在下一层被删除，会一直跟随着镜像。<strong>因此镜像构建时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。</strong></p></blockquote><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><p>使用 <code>docker build</code> 命令进行镜像构建。其格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build [选项] &lt;上下文路径/URL/-&gt;</span><br></pre></td></tr></table></figure><h4 id="镜像构建上下文（Context）"><a href="#镜像构建上下文（Context）" class="headerlink" title="镜像构建上下文（Context）"></a>镜像构建上下文（Context）</h4><p>这里还是说 <strong>Context</strong> 好理解一些，说上下文太别扭了。</p><p>其实就是在 <code>docker build</code> 的时候告诉 docker 要把哪个 <strong>目录</strong> ，哪些文件复制到这个 <strong>image</strong> 里面。</p><p>一般来说，应该会将 <code>Dockerfile</code> 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 <code>.gitignore</code> 一样的语法写一个 <code>.dockerignore</code>，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。</p><p>可以用 <code>-f ../Dockerfile.php</code> 参数指定某个文件作为 <code>Dockerfile</code>。不过一般都用默认的文件名 <code>Dockerfile</code>。</p><h4 id="其它-docker-build-的用法"><a href="#其它-docker-build-的用法" class="headerlink" title="其它 docker build 的用法"></a>其它 <code>docker build</code> 的用法</h4><h5 id="直接用-Git-repo-进行构建"><a href="#直接用-Git-repo-进行构建" class="headerlink" title="直接用 Git repo 进行构建"></a>直接用 Git repo 进行构建</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build https://github.com/twang2218/gitlab-ce-zh.git<span class="comment">#:8.14</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这行命令指定了构建所需的 Git repo，并且指定默认的 master 分支，构建目录为 /8.14/，然后 Docker 就会自己去 git clone 这个项目、切换到指定分支、并进入到指定目录后开始构建。</span></span><br></pre></td></tr></table></figure><h5 id="用给定的-tar-压缩包构建"><a href="#用给定的-tar-压缩包构建" class="headerlink" title="用给定的 tar 压缩包构建"></a>用给定的 tar 压缩包构建</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build http://server/context.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker 引擎会下载这个包，并自动解压缩，以其作为上下文，开始构建。</span></span><br></pre></td></tr></table></figure><h5 id="从标准输入中读取-Dockerfile-进行构建"><a href="#从标准输入中读取-Dockerfile-进行构建" class="headerlink" title="从标准输入中读取 Dockerfile 进行构建"></a>从标准输入中读取 Dockerfile 进行构建</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker build - &lt; Dockerfile</span><br><span class="line"></span><br><span class="line">cat Dockerfile | docker build -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果标准输入传入的是文本文件，则将其视为 Dockerfile，并开始构建。这种形式由于直接从标准输入中读取 Dockerfile 的内容，它没有上下文，因此不可以像其他方法那样可以将本地文件 COPY 进镜像之类的事情。</span></span><br></pre></td></tr></table></figure><h5 id="从标准输入中读取上下文压缩包进行构建"><a href="#从标准输入中读取上下文压缩包进行构建" class="headerlink" title="从标准输入中读取上下文压缩包进行构建"></a>从标准输入中读取上下文压缩包进行构建</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build - &lt; context.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果发现标准输入的文件格式是 gzip、bzip2 以及 xz 的话，将会使其为上下文压缩包，直接将其展开，将里面视为上下文，并开始构建。</span></span><br></pre></td></tr></table></figure><h3 id="Dockerfile-指令详解"><a href="#Dockerfile-指令详解" class="headerlink" title="Dockerfile 指令详解"></a>Dockerfile 指令详解</h3><h4 id="COPY-复制文件"><a href="#COPY-复制文件" class="headerlink" title="COPY 复制文件"></a>COPY 复制文件</h4><ul><li><code>COPY &lt;源路径&gt;... &lt;目标路径&gt;</code></li><li><code>COPY [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPY package.json /usr/src/app/</span><br></pre></td></tr></table></figure><p><code>&lt;源路径&gt;</code> 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 <a href="https://golang.org/pkg/path/filepath/#Match" target="_blank" rel="noopener"><code>filepath.Match</code></a> 规则，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COPY hom* /mydir/</span><br><span class="line">COPY hom?.txt /mydir/</span><br></pre></td></tr></table></figure><p><code>&lt;目标路径&gt;</code> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 <code>WORKDIR</code> 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</p><p>此外，还需要注意一点，使用 <code>COPY</code> 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。所以在 Windows 上会报警告</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SECURITY WARNING: You are building a Docker image from Windows against a non-Windows Docker host. All files and directories added to build context will have &apos;-rwxr-xr-x&apos; permissions. It is recommended to double check and reset permissions for sensitive files and directories.</span><br></pre></td></tr></table></figure><h4 id="ADD-更高级的复制文件"><a href="#ADD-更高级的复制文件" class="headerlink" title="ADD 更高级的复制文件"></a>ADD 更高级的复制文件</h4><p><code>ADD</code> 指令和 <code>COPY</code> 的格式和性质基本一致。但是在 <code>COPY</code> 基础上增加了一些功能。</p><p>但一般不要用这个命令，除非是需要自动解压缩的场合。</p><p>因为</p><ol><li>下载后的文件权限自动设置为 <code>600</code>，如果这并不是想要的权限，那么还需要增加额外的一层 <code>RUN</code>进行权限调整</li><li>如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 <code>RUN</code> 指令进行解压缩</li></ol><p>所以不如直接使用 <code>RUN</code> 指令，然后使用 <code>wget</code> 或者 <code>curl</code> 工具下载，处理权限、解压缩、然后清理无用文件更合理。</p><h4 id="CMD-容器启动命令"><a href="#CMD-容器启动命令" class="headerlink" title="CMD 容器启动命令"></a>CMD 容器启动命令</h4><ul><li><code>shell</code> 格式：<code>CMD &lt;命令&gt;</code></li><li><code>exec</code> 格式：<code>CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</code></li><li>参数列表格式：<code>CMD [&quot;参数1&quot;, &quot;参数2&quot;...]</code>。在指定了 <code>ENTRYPOINT</code> 指令后，用 <code>CMD</code> 指定具体的参数。</li></ul><p>Docker 不是虚拟机，容器就是进程，也就是 <strong>程序</strong> 吧。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。<strong><code>CMD</code> 指令就是用于指定默认的容器主进程的启动命令的。</strong> <strong>只能出现一次！</strong></p><p><code>ubuntu</code> 镜像默认的 <code>CMD</code> 是 <code>/bin/bash</code></p><p>在指令格式上，一般推荐使用 <code>exec</code> 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 <code>&quot;</code>，而不要使用单引号。</p><p>如果使用 <code>shell</code> 格式的话，实际的命令会被包装为 <code>sh -c</code> 的参数的形式进行执行。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD echo $HOME</span><br></pre></td></tr></table></figure><p>在实际执行中，会将其变更为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;echo $HOME&quot; ]</span><br></pre></td></tr></table></figure><p>这就是为什么我们可以使用环境变量的原因，因为这些环境变量会被 shell 进行解析处理。</p><p><strong>容器中的应用都应该以前台执行</strong></p><h4 id="ENTRYPOINT-入口点"><a href="#ENTRYPOINT-入口点" class="headerlink" title="ENTRYPOINT 入口点"></a>ENTRYPOINT 入口点</h4><p><code>ENTRYPOINT</code> 的格式和 <code>RUN</code> 指令格式一样，分为 <code>exec</code> 格式和 <code>shell</code> 格式。</p><p><code>ENTRYPOINT</code> 的目的和 <code>CMD</code> 一样，都是在指定容器启动程序及参数。<code>ENTRYPOINT</code> 在运行时也可以替代，不过比 <code>CMD</code> 要略显繁琐，需要通过 <code>docker run</code> 的参数 <code>--entrypoint</code> 来指定。</p><p>当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令，换句话说实际执行时，将变为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</span><br></pre></td></tr></table></figure><p><code>ENTRYPOINT</code> 的使用场景</p><ol><li><p>场景一：让镜像变成像命令一样使用</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get install -y curl \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [ <span class="string">"curl"</span>, <span class="string">"-s"</span>, <span class="string">"http://ip.cn"</span> ]</span></span><br></pre></td></tr></table></figure><p>然后就能在启动命令后加参数了 <code>docker run myip -i</code></p></li><li><p>场景二：应用运行前的准备工作</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.4</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> addgroup -S redis &amp;&amp; adduser -S -G redis redis</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"docker-entrypoint.sh"</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">6379</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">"redis-server"</span> ]</span></span><br></pre></td></tr></table></figure><p>可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 <code>ENTRYPOINT</code> 为 <code>docker-entrypoint.sh</code>脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">...</span><br><span class="line"># allow the container to be started with `--user`</span><br><span class="line">if [ &quot;$1&quot; = &apos;redis-server&apos; -a &quot;$(id -u)&quot; = &apos;0&apos; ]; then</span><br><span class="line">    chown -R redis .</span><br><span class="line">    exec su-exec redis &quot;$0&quot; &quot;$@&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">exec &quot;$@&quot;</span><br></pre></td></tr></table></figure><p>该脚本的内容就是根据 <code>CMD</code> 的内容来判断，如果是 <code>redis-server</code> 的话，则切换到 <code>redis</code> 用户身份启动服务器，否则依旧使用 <code>root</code> 身份执行。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it redis id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure></li></ol><h4 id="ENV-设置环境变量"><a href="#ENV-设置环境变量" class="headerlink" title="ENV 设置环境变量"></a>ENV 设置环境变量</h4><p>格式有两种：</p><ul><li><code>ENV &lt;key&gt; &lt;value&gt;</code></li><li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li></ul><p>还可以用 <code>\</code> 换行</p><p>下列指令可以支持环境变量展开： <code>ADD</code>、<code>COPY</code>、<code>ENV</code>、<code>EXPOSE</code>、<code>LABEL</code>、<code>USER</code>、<code>WORKDIR</code>、<code>VOLUME</code>、<code>STOPSIGNAL</code>、<code>ONBUILD</code>。</p><h4 id="ARG-构建参数"><a href="#ARG-构建参数" class="headerlink" title="ARG 构建参数"></a>ARG 构建参数</h4><p>格式：<code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code></p><p>构建参数和 <code>ENV</code> 的效果一样，都是设置环境变量。所不同的是，<code>ARG</code> 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 <code>ARG</code> 保存密码之类的信息，因为 <code>docker history</code> 还是可以看到所有值的。</p><p><code>Dockerfile</code> 中的 <code>ARG</code> 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 <code>docker build</code> 中用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code> 来覆盖。</p><h4 id="VOLUME-定义匿名卷"><a href="#VOLUME-定义匿名卷" class="headerlink" title="VOLUME 定义匿名卷"></a>VOLUME 定义匿名卷</h4><p>格式为：</p><ul><li><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</code></li><li><code>VOLUME &lt;路径&gt;</code></li></ul><p>这里的 <code>/data</code> 目录就会在运行时自动挂载为匿名卷，任何向 <code>/data</code> 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v mydata:/data xxxx</span><br></pre></td></tr></table></figure><h4 id="EXPOSE-声明端口"><a href="#EXPOSE-声明端口" class="headerlink" title="EXPOSE 声明端口"></a>EXPOSE 声明端口</h4><p>格式为 <code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code></p><p><code>EXPOSE</code> 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 <code>docker run -P</code>时，会自动随机映射 <code>EXPOSE</code> 的端口。</p><p>此外，在早期 Docker 版本中还有一个特殊的用处。以前所有容器都运行于默认桥接网络中，因此所有容器互相之间都可以直接访问，这样存在一定的安全性问题。于是有了一个 Docker 引擎参数 <code>--icc=false</code>，当指定该参数后，容器间将默认无法互访，除非互相间使用了 <code>--links</code> 参数的容器才可以互通，并且只有镜像中 <code>EXPOSE</code> 所声明的端口才可以被访问。这个 <code>--icc=false</code> 的用法，在引入了 <code>docker network</code> 后已经基本不用了，通过自定义网络可以很轻松的实现容器间的互联与隔离。</p><p>要将 <code>EXPOSE</code> 和在运行时使用 <code>-p &lt;宿主端口&gt;:&lt;容器端口&gt;</code> 区分开来。<code>-p</code>，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 <code>EXPOSE</code> 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p><h4 id="WORKDIR-指定工作目录"><a href="#WORKDIR-指定工作目录" class="headerlink" title="WORKDIR 指定工作目录"></a>WORKDIR 指定工作目录</h4><p>格式为 <code>WORKDIR &lt;工作目录路径&gt;</code></p><p>使用 <code>WORKDIR</code> 指令可以来指定工作目录（或者称为当前目录），以后 <strong>各层</strong> 的当前目录就被改为指定的目录，如该目录不存在，<code>WORKDIR</code> 会帮你建立目录。</p><h4 id="USER-指定当前用户"><a href="#USER-指定当前用户" class="headerlink" title="USER 指定当前用户"></a>USER 指定当前用户</h4><p>格式：<code>USER &lt;用户名&gt;</code></p><p><code>USER</code> 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。</p><p>程，不要使用 <code>su</code> 或者 <code>sudo</code>，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出错。建议使用 <a href="https://github.com/tianon/gosu" target="_blank" rel="noopener"><code>gosu</code></a>。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立 redis 用户，并使用 gosu 换另一个用户执行命令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> groupadd -r redis &amp;&amp; useradd -r -g redis redis</span></span><br><span class="line"><span class="comment"># 下载 gosu</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> wget -O /usr/<span class="built_in">local</span>/bin/gosu <span class="string">"https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64"</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod +x /usr/<span class="built_in">local</span>/bin/gosu \</span></span><br><span class="line"><span class="bash">    &amp;&amp; gosu nobody <span class="literal">true</span></span></span><br><span class="line"><span class="comment"># 设置 CMD，并以另外的用户执行</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">"exec"</span>, <span class="string">"gosu"</span>, <span class="string">"redis"</span>, <span class="string">"redis-server"</span> ]</span></span><br></pre></td></tr></table></figure><h4 id="HEALTHCHECK-健康检查"><a href="#HEALTHCHECK-健康检查" class="headerlink" title="HEALTHCHECK 健康检查"></a>HEALTHCHECK 健康检查</h4><p>格式：</p><ul><li><code>HEALTHCHECK [选项] CMD &lt;命令&gt;</code>：设置检查容器健康状况的命令</li><li><code>HEALTHCHECK NONE</code>：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</li></ul><p><code>HEALTHCHECK</code> 指令是告诉 Docker 应该如何进行判断容器的状态是否正常，这是 Docker 1.12 引入的新指令。<strong>只可以出现一次</strong> 。</p><p><code>HEALTHCHECK</code> 支持下列选项：</p><ul><li><code>--interval=&lt;间隔&gt;</code>：两次健康检查的间隔，默认为 30 秒；</li><li><code>--timeout=&lt;时长&gt;</code>：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；</li><li><code>--retries=&lt;次数&gt;</code>：当连续失败指定次数后，则将容器状态视为 <code>unhealthy</code>，默认 3 次。</li></ul><h4 id="ONBUILD-为他人做嫁衣裳"><a href="#ONBUILD-为他人做嫁衣裳" class="headerlink" title="ONBUILD 为他人做嫁衣裳"></a>ONBUILD 为他人做嫁衣裳</h4><p>格式：<code>ONBUILD &lt;其它指令&gt;</code></p><p><code>ONBUILD</code> 是一个特殊的指令，它后面跟的是其它指令，比如 <code>RUN</code>, <code>COPY</code> 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。</p><p><code>Dockerfile</code> 中的其它指令都是为了定制当前镜像而准备的，唯有 <code>ONBUILD</code> 是为了帮助别人定制自己而准备的。</p><h3 id="Dockerfile-多阶段构建"><a href="#Dockerfile-多阶段构建" class="headerlink" title="Dockerfile 多阶段构建"></a>Dockerfile 多阶段构建</h3><p>使用多阶段构建只需要编写一个 <code>Dockerfile</code>：</p><p>例如，编写 <code>Dockerfile</code> 文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.9</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk --no-cache add git</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /go/src/github.com/go/helloworld/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go get -d -v github.com/go-sql-driver/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> app.go .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> alpine:latest</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk --no-cache add ca-certificates</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /root/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=0 /go/src/github.com/go/helloworld/app .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"./app"</span>]</span></span><br></pre></td></tr></table></figure><p>构建镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t go/helloworld:3 .</span><br></pre></td></tr></table></figure><h3 id="其它制作镜像的方式"><a href="#其它制作镜像的方式" class="headerlink" title="其它制作镜像的方式"></a>其它制作镜像的方式</h3><h4 id="从-rootfs-压缩包导入"><a href="#从-rootfs-压缩包导入" class="headerlink" title="从 rootfs 压缩包导入"></a>从 rootfs 压缩包导入</h4><p>格式：<code>docker import [选项] &lt;文件&gt;|&lt;URL&gt;|- [&lt;仓库名&gt;[:&lt;标签&gt;]]</code></p><h4 id="docker-save-和-docker-load"><a href="#docker-save-和-docker-load" class="headerlink" title="docker save 和 docker load"></a><code>docker save</code> 和 <code>docker load</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker save alpine | gzip &gt; alpine-latest.tar.gz</span><br><span class="line"></span><br><span class="line">docker load -i alpine-latest.tar.gz</span><br></pre></td></tr></table></figure><h3 id="镜像的实现原理"><a href="#镜像的实现原理" class="headerlink" title="镜像的实现原理"></a>镜像的实现原理</h3><p>每个镜像都由很多层次构成，Docker 使用 <a href="http://en.wikipedia.org/wiki/UnionFS" target="_blank" rel="noopener">Union FS</a> 将这些不同的层结合到一个镜像中去。</p><p>通常 Union FS 有两个用途, 一方面可以实现不借助 LVM、RAID 将多个 disk 挂到同一个目录下,另一个更常用的就是将一个只读的分支和一个可写的分支联合在一起，Live CD 正是基于此方法可以允许在镜像不变的基础上允许用户在其上进行一些写操作。</p><p>Docker 在 AUFS 上构建的容器也是利用了类似的原理。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用-Dockerfile-定制镜像&quot;&gt;&lt;a href=&quot;#使用-Dockerfile-定制镜像&quot; class=&quot;headerlink&quot; title=&quot;使用 Dockerfile 定制镜像&quot;&gt;&lt;/a&gt;使用 Dockerfile 定制镜像&lt;/h3&gt;&lt;p&gt;&lt;code&gt;docker commit&lt;/code&gt; 镜像的定制实际上就是定制每一层所添加的配置、文件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="最佳实践" scheme="http://yoursite.com/tags/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="容器" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Docker 命令集</title>
    <link href="http://yoursite.com/2018/01/27/docker-commands/"/>
    <id>http://yoursite.com/2018/01/27/docker-commands/</id>
    <published>2018-01-27T16:13:00.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>   记录自己用过的 Docker 命令，以及一些常用的 Docker 命令，不会做过多的解释。</p><a id="more"></a><ol><li><p><code>docker run</code> 就是运行容器的命令，具体格式我们会在 <a href="https://yeasy.gitbooks.io/docker_practice/content/container" target="_blank" rel="noopener">容器</a> 一节进行详细讲解，我们这里简要的说明一下上面用到的参数。</p><ul><li><code>-it</code>：这是两个参数，一个是 <code>-i</code>：交互式操作，一个是 <code>-t</code> 终端。我们这里打算进入 <code>bash</code> 执行一些命令并查看返回结果，因此我们需要交互式终端。</li><li><code>--rm</code>：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 <code>docker rm</code>。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 <code>--rm</code> 可以避免浪费空间。</li><li><code>ubuntu:16.04</code>：这是指用 <code>ubuntu:16.04</code> 镜像为基础来启动容器。</li><li><code>bash</code>：放在镜像名后的是<strong>命令</strong>，这里我们希望有个交互式 Shell，因此用的是 <code>bash</code>。</li></ul></li><li><p><code>docker image ls</code> <code>docker images</code> 列出已经下载下来的镜像</p></li><li><p><code>docker system df</code> 查看镜像、容器、数据卷所占用的空间</p></li><li><p><code>docker image ls -f dangling=true</code> 列出 <strong>虚悬镜像</strong></p></li><li><p><code>docker image prune</code> 删除 <strong>虚悬镜像</strong></p></li><li><p><code>docker image ls --digests</code> 列出镜像的摘要</p></li><li><p><code>docker rmi</code> 删除一个镜像</p></li><li><p><code>docker run --name webserver -d -p 80:80 nginx</code> 用 <code>nginx</code> 镜像启动一个容器，命名为 <code>webserver</code>，并映射 80 端口</p></li><li><p><code>docker exec -it webserver bash</code> 进入一个容器，并执行 <code>bash</code> 命令，获得一个可操作的 Shell</p></li><li><p><code>docker diff webserver</code> 查看具体的改动</p></li><li><p>`docker commit  将容器的存储层保存下来成为镜像，换句话说，就是在原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像。以后我们运行这个新镜像的时候，就会拥有原有容器最后的文件变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]</span><br></pre></td></tr></table></figure></li><li><p><code>docker history</code> 可以查看镜像内的历史记录</p></li><li><p><code>docker build [选项] &lt;上下文路径/URL/-&gt;</code> 进行镜像构建</p></li><li><p><code>docker import</code> 从某个位置导入镜像</p></li><li><p><code>docker save</code> 可以保存镜像为文件</p></li><li><p><code>docker load</code> 可以加载镜像</p></li><li><p><code>docker history</code> 查看镜像的历史</p></li><li><p><code>docker logs</code> 查看 <strong>container</strong> 的历史，等于 <code>docker container logs</code></p></li><li><p><code>docker volume inspect my-vol</code> 查看一个数据卷的信息</p></li><li><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   记录自己用过的 Docker 命令，以及一些常用的 Docker 命令，不会做过多的解释。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="Docker命令" scheme="http://yoursite.com/tags/Docker%E5%91%BD%E4%BB%A4/"/>
    
      <category term="命令" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Docker 学习笔记（1）</title>
    <link href="http://yoursite.com/2018/01/27/docker-tutorial-1/"/>
    <id>http://yoursite.com/2018/01/27/docker-tutorial-1/</id>
    <published>2018-01-27T09:46:14.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>继续学习 Docker 吧，大概是第三次想要开始学习了。。。</p><p>这次学习算是从实际需求得到的原动力——想要部署一个基于 <strong>scrapy</strong> 的爬虫容器，然后就犯了使用 docker 最大的意识错误——把 <strong>Docker</strong> 当做 <strong>虚拟机</strong> 使用。</p><p>我 <code>dcoker pull</code> 了一个 <strong>centos</strong> 的镜像，然后 <code>exec</code> 就去，按照虚拟机的思考方式，更新源，安装包，<code>git clone</code> 项目，安装项目的依赖。然后我发现这个 <strong>image</strong> 连 <strong>vim</strong> 都没有。。。很痛苦的挣扎后放弃了。。。</p><p>最后，在服务里上安装了 <strong>pipenv</strong>，成功部署了项目。</p><p>然后周末和小伙伴讨论了下他们使用 docker 的实践方式和对 docker 的理解，打算研究一下 docker 的 <strong>最佳实践</strong>。</p><p>让我们开始快乐的编写 <a href="https://yeasy.gitbooks.io/docker_practice/content/image/build.html" target="_blank" rel="noopener">Dockerfile</a> 吧！</p><a id="more"></a><h3 id="概念-amp-基本点"><a href="#概念-amp-基本点" class="headerlink" title="概念 &amp; 基本点"></a>概念 &amp; 基本点</h3><ol><li><p><strong>起源</strong></p><p>Docker 最初是 dotCloud 公司创始人 Solomon Hykes 在法国期间发起的一个公司内部项目，它是基于 dotCloud 公司多年云服务技术的一次革新，并于 <a href="https://en.wikipedia.org/wiki/Docker_(software)" target="_blank" rel="noopener">2013 年 3 月以 Apache 2.0 授权协议开源</a>，主要项目代码在 <a href="https://github.com/moby/moby" target="_blank" rel="noopener">GitHub</a> 上进行维护。Docker 项目后来还加入了 Linux 基金会，并成立推动 <a href="https://www.opencontainers.org/" target="_blank" rel="noopener">开放容器联盟（OCI）</a>。</p><p><strong>Docker 使用 Google 公司推出的 <a href="https://golang.org/" target="_blank" rel="noopener">Go 语言</a> 进行开发实现</strong>，基于 Linux 内核的 <a href="https://zh.wikipedia.org/wiki/Cgroups" target="_blank" rel="noopener">cgroup</a>，<a href="https://en.wikipedia.org/wiki/Linux_namespaces" target="_blank" rel="noopener">namespace</a>，以及<a href="https://en.wikipedia.org/wiki/Aufs" target="_blank" rel="noopener">AUFS</a> 类的 <a href="https://en.wikipedia.org/wiki/Union_mount" target="_blank" rel="noopener">Union FS</a> 等技术，对进程进行封装隔离，属于 <a href="https://en.wikipedia.org/wiki/Operating-system-level_virtualization" target="_blank" rel="noopener">操作系统层面的虚拟化技术</a>。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。最初实现是基于 <a href="https://linuxcontainers.org/lxc/introduction/" target="_blank" rel="noopener">LXC</a>，从 0.7 版本以后开始去除 LXC，转而使用自行开发的 <a href="https://github.com/docker/libcontainer" target="_blank" rel="noopener">libcontainer</a>，从 1.11 开始，则进一步演进为使用 <a href="https://github.com/opencontainers/runc" target="_blank" rel="noopener">runC</a> 和 <a href="https://github.com/containerd/containerd" target="_blank" rel="noopener">containerd</a>。</p><p>Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。</p><p>下面的图片比较了 Docker 和传统虚拟化方式的不同之处。传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p><p><img src="/images/virtualization.png" alt="virtualization"></p><p><img src="/images/docker.png" alt="docker"></p></li><li><p><strong>为什么要使用 Docker？</strong></p><ol><li>更高效的利用系统资源</li><li>更快速的启动时间</li><li>一致的运行环境</li><li>持续交付和部署</li><li>更轻松的迁移</li><li>更轻松的维护和扩展</li><li>对比传统虚拟机总结</li></ol></li></ol><table><thead><tr><th>特性</th><th>容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr><tr><td>硬盘使用</td><td>一般为 <code>MB</code></td><td>一般为 <code>GB</code></td></tr><tr><td>性能</td><td>接近原生</td><td>弱于</td></tr><tr><td>系统支持量</td><td>单机支持上千个容器</td><td>一般几十个</td></tr></tbody></table><ol start="3"><li><p><strong>Docker 镜像</strong></p><p>我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 root 文件系统。<strong>比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu 16.04 最小系统的 root 文件系统。</strong></p><p>只要系统能跑起来就行，其余别的都没有。</p></li><li><p><strong>分层存储</strong></p><p>因为镜像包含操作系统完整的 <code>root</code> 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 <a href="https://en.wikipedia.org/wiki/Union_mount" target="_blank" rel="noopener">Union FS</a> 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p><p><strong>理解：</strong>比如基于 Ubuntu:16.04 构建两个镜像，一个 nginx 一个 mysql，然后两个镜像可能分别有 4 层、5 层，可能分别有 700 MB、800 MB。然后，每个镜像的第一层，最底层可能是一样的，都是 Ubuntu:16.04（它可能也是好几层），在 <code>docker pull</code> 的时候，这一层如果存在的话，可能就不需要下载。</p></li><li><p><strong>Docker 容器</strong></p><p>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 <a href="https://en.wikipedia.org/wiki/Linux_namespaces" target="_blank" rel="noopener">命名空间</a>。因此容器可以拥有自己的 <code>root</code> 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。</p><p>前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为<strong>容器存储层</strong>。</p><p>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p><p>按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 <a href="https://yeasy.gitbooks.io/docker_practice/content/data_management/volume.html" target="_blank" rel="noopener">数据卷（Volume）</a>、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p><p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。</p></li><li><p><strong>Docker 仓库</strong></p><p>一个 <strong>Docker Registry</strong> 中可以包含多个<strong>仓库</strong>（<code>Repository</code>）；每个仓库可以包含多个<strong>标签</strong>（<code>Tag</code>）；每个标签对应一个镜像。</p></li><li><p><strong>数据卷</strong></p><p><code>数据卷</code> 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p><ul><li><code>数据卷</code> 可以在容器之间共享和重用</li><li>对 <code>数据卷</code> 的修改会立马生效</li><li>对 <code>数据卷</code> 的更新，不会影响镜像</li><li><code>数据卷</code> 默认会一直存在，即使容器被删除</li></ul><blockquote><p>注意：<code>数据卷</code> 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会隐藏掉，能显示看的是挂载的 <code>数据卷</code>。</p></blockquote></li></ol><h3 id="使用镜像"><a href="#使用镜像" class="headerlink" title="使用镜像"></a>使用镜像</h3><h4 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h4><p>从 Docker 镜像仓库获取镜像的命令是 <code>docker pull</code>。其命令格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span><br><span class="line"></span><br><span class="line">docker pull ubuntu:16.04</span><br></pre></td></tr></table></figure><h4 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker image ls</span><br></pre></td></tr></table></figure><h5 id="镜像体积"><a href="#镜像体积" class="headerlink" title="镜像体积"></a>镜像体积</h5><p>如果仔细观察，会注意到，这里标识的所占用空间和在 Docker Hub 上看到的镜像大小不同。比如，<code>ubuntu:16.04</code> 镜像大小，在这里是 <code>127 MB</code>，但是在 <a href="https://hub.docker.com/r/library/ubuntu/tags/" target="_blank" rel="noopener">Docker Hub</a> 显示的却是 <code>50 MB</code>。这是因为 Docker Hub 中显示的体积是压缩后的体积。在镜像下载和上传过程中镜像是保持着压缩状态的，因此 Docker Hub 所显示的大小是网络传输中更关心的流量大小。而 <code>docker image ls</code> 显示的是镜像下载到本地后，展开的大小，准确说，是展开后的各层所占空间的总和，因为镜像到本地后，查看空间的时候，更关心的是本地磁盘空间占用的大小。</p><p>另外一个需要注意的问题是，<code>docker image ls</code> 列表中的镜像体积总和并非是所有镜像实际硬盘消耗。由于 Docker 镜像是多层存储结构，并且可以继承、复用，因此不同镜像可能会因为使用相同的基础镜像，从而拥有共同的层。由于 Docker 使用 Union FS，相同的层只需要保存一份即可，因此实际镜像硬盘占用空间很可能要比这个列表镜像大小的总和要小的多。</p><h5 id="虚悬镜像"><a href="#虚悬镜像" class="headerlink" title="虚悬镜像"></a>虚悬镜像</h5><p>由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 <code>&lt;none&gt;</code> 的镜像。这类无标签镜像也被称为 <strong>虚悬镜像(dangling image)</strong> ，可以用 <code>docker image ls -f dangling=true</code> 显示这类镜像，用 <code>docker image prune</code>删除。</p><h5 id="中间层镜像"><a href="#中间层镜像" class="headerlink" title="中间层镜像"></a>中间层镜像</h5><p>为了加速镜像构建、重复利用资源，Docker 会利用 <strong>中间层镜像</strong>。</p><p><code>docker image ls -a</code> 可以查看 中间层镜像，这些无标签镜像不应该删除</p><h5 id="列出部分镜像"><a href="#列出部分镜像" class="headerlink" title="列出部分镜像"></a>列出部分镜像</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker image ls ubuntu</span><br><span class="line"></span><br><span class="line">docker image ls ubuntu:16.04</span><br><span class="line"></span><br><span class="line">docker image ls -f since=mongo:3.2</span><br><span class="line"></span><br><span class="line">docker image ls -f label=com.example.version=0.1</span><br></pre></td></tr></table></figure><p><code>docker image ls</code> 支持强大的过滤器参数 <code>--filter</code>，或者简写 <code>-f</code>。</p><h5 id="以特定格式显示"><a href="#以特定格式显示" class="headerlink" title="以特定格式显示"></a>以特定格式显示</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls -q  # 列出镜像的 ID 列表</span><br></pre></td></tr></table></figure><p>另外一些时候，我们可能只是对表格的结构不满意，希望自己组织列；或者不希望有标题，这样方便其它程序解析结果等，这就用到了 <a href="https://gohugo.io/templates/go-templates/" target="_blank" rel="noopener">Go 的模板语法</a>。</p><p>比如，下面的命令会直接列出镜像结果，并且只包含镜像ID和仓库名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls --format &quot;&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;&quot;</span><br><span class="line">5f515359c7f8: redis</span><br><span class="line">05a60462f8ba: nginx</span><br></pre></td></tr></table></figure><p>或者打算以表格等距显示，并且有标题行，和默认一样，不过自己定义列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Repository&#125;&#125;\t&#123;&#123;.Tag&#125;&#125;&quot;</span><br><span class="line">IMAGE ID            REPOSITORY          TAG</span><br><span class="line">5f515359c7f8        redis               latest</span><br><span class="line">05a60462f8ba        nginx               latest</span><br></pre></td></tr></table></figure><h4 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</span><br><span class="line">docker rmi [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</span><br></pre></td></tr></table></figure><p>可以用 ID、镜像名、摘要来删除镜像</p><h5 id="Untagged-和-Deleted"><a href="#Untagged-和-Deleted" class="headerlink" title="Untagged 和 Deleted"></a>Untagged 和 Deleted</h5><p>如果观察上面这几个命令的运行输出信息的话，你会注意到删除行为分为两类，一类是 <code>Untagged</code>，另一类是 <code>Deleted</code>。我们之前介绍过，镜像的唯一标识是其 ID 和摘要，而一个镜像可以有多个标签。</p><p>因此当我们使用上面命令删除镜像的时候，实际上是在要求删除某个标签的镜像。所以首先需要做的是将满足我们要求的所有镜像标签都取消，这就是我们看到的 <code>Untagged</code> 的信息。因为一个镜像可以对应多个标签，因此当我们删除了所指定的标签后，可能还有别的标签指向了这个镜像，如果是这种情况，那么 <code>Delete</code> 行为就不会发生。所以并非所有的 <code>docker rmi</code> 都会产生删除镜像的行为，有可能仅仅是取消了某个标签而已。</p><p>当该镜像所有的标签都被取消了，该镜像很可能会失去了存在的意义，因此会触发删除行为。镜像是多层存储结构，因此在删除的时候也是从上层向基础层方向依次进行判断删除。镜像的多层结构让镜像复用变动非常容易，因此很有可能某个其它镜像正依赖于当前镜像的某一层。这种情况，依旧不会触发删除该层的行为。直到没有任何层依赖当前层时，才会真实的删除当前层。这就是为什么，有时候会奇怪，为什么明明没有别的标签指向这个镜像，但是它还是存在的原因，也是为什么有时候会发现所删除的层数和自己 <code>docker pull</code> 看到的层数不一样的源。</p><p>除了镜像依赖以外，还需要注意的是容器对镜像的依赖。如果有用这个镜像启动的容器存在（即使容器没有运行），那么同样不可以删除这个镜像。之前讲过，容器是以镜像为基础，再加一层容器存储层，组成这样的多层存储结构去运行的。因此该镜像如果被这个容器所依赖的，那么删除必然会导致故障。如果这些容器是不需要的，应该先将它们删除，然后再来删除镜像。</p><h5 id="用-docker-image-ls-命令来配合"><a href="#用-docker-image-ls-命令来配合" class="headerlink" title="用 docker image ls 命令来配合"></a>用 docker image ls 命令来配合</h5><p>像其它可以承接多个实体的命令一样，可以使用 <code>docker image ls -q</code> 来配合使用 <code>docker image rm</code>，这样可以成批的删除希望删除的镜像。我们在“镜像列表”章节介绍过很多过滤镜像列表的方式都可以拿过来使用。</p><p>比如，我们需要删除所有仓库名为 <code>redis</code> 的镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm $(docker image ls -q redis)</span><br></pre></td></tr></table></figure><p>或者删除所有在 <code>mongo:3.2</code> 之前的镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm $(docker image ls -q -f before=mongo:3.2)</span><br></pre></td></tr></table></figure><p>充分利用你的想象力和 Linux 命令行的强大，你可以完成很多非常赞的功能。</p><h5 id="CentOS-RHEL-的用户需要注意的事项"><a href="#CentOS-RHEL-的用户需要注意的事项" class="headerlink" title="CentOS/RHEL 的用户需要注意的事项"></a>CentOS/RHEL 的用户需要注意的事项</h5><p>在 Ubuntu/Debian 上有 <code>UnionFS</code> 可以使用，如 <code>aufs</code> 或者 <code>overlay2</code>，而 CentOS 和 RHEL 的内核中没有相关驱动。因此对于这类系统，一般使用 <code>devicemapper</code> 驱动利用 LVM 的一些机制来模拟分层存储。这样的做法除了性能比较差外，稳定性一般也不好，而且配置相对复杂。Docker 安装在 CentOS/RHEL 上后，会默认选择 <code>devicemapper</code>，但是为了简化配置，其 <code>devicemapper</code> 是跑在一个稀疏文件模拟的块设备上，也被称为 <code>loop-lvm</code>。这样的选择是因为不需要额外配置就可以运行 Docker，这是自动配置唯一能做到的事情。但是 <code>loop-lvm</code> 的做法非常不好，其稳定性、性能更差，无论是日志还是 <code>docker info</code> 中都会看到警告信息。官方文档有明确的文章讲解了如何配置块设备给 <code>devicemapper</code> 驱动做存储层的做法，这类做法也被称为配置 <code>direct-lvm</code>。</p><p>除了前面说到的问题外，<code>devicemapper</code> + <code>loop-lvm</code> 还有一个缺陷，因为它是稀疏文件，所以它会不断增长。用户在使用过程中会注意到 <code>/var/lib/docker/devicemapper/devicemapper/data</code> 不断增长，而且无法控制。很多人会希望删除镜像或者可以解决这个问题，结果发现效果并不明显。原因就是这个稀疏文件的空间释放后基本不进行垃圾回收的问题。因此往往会出现即使删除了文件内容，空间却无法回收，随着使用这个稀疏文件一直在不断增长。</p><p>所以对于 CentOS/RHEL 的用户来说，在没有办法使用 <code>UnionFS</code> 的情况下，一定要配置 <code>direct-lvm</code> 给 <code>devicemapper</code>，无论是为了性能、稳定性还是空间利用率。</p><p><em>或许有人注意到了 CentOS 7 中存在被 backports 回来的 overlay 驱动，不过 CentOS 里的这个驱动达不到生产环境使用的稳定程度，所以不推荐使用。</em></p><h4 id="利用-commit-理解镜像构成"><a href="#利用-commit-理解镜像构成" class="headerlink" title="利用 commit 理解镜像构成"></a>利用 commit 理解镜像构成</h4><blockquote><p>注意： <code>docker commit</code> 命令除了学习之外，还有一些特殊的应用场合，比如被入侵后保存现场等。但是，不要使用 <code>docker commit</code> 定制镜像，定制镜像应该使用 <code>Dockerfile</code> 来完成。如果你想要定制镜像请查看下一小节。</p></blockquote><p>镜像是多层存储，每一层是在前一层的基础上进行的修改；而容器同样也是多层存储，是在以镜像为基础层，在其基础上加一层作为容器运行时的存储层。</p><p>我们修改了容器的文件，也就是改动了容器的存储层。</p><h5 id="慎用-docker-commit"><a href="#慎用-docker-commit" class="headerlink" title="慎用 docker commit"></a>慎用 <code>docker commit</code></h5><p>使用 <code>docker commit</code> 命令虽然可以比较直观的帮助理解镜像分层存储的概念，但是实际环境中并不会这样使用。</p><p>首先，如果仔细观察之前的 <code>docker diff webserver</code> 的结果，你会发现除了真正想要修改的 <code>/usr/share/nginx/html/index.html</code> 文件外，由于命令的执行，还有很多文件被改动或添加了。这还仅仅是最简单的操作，如果是安装软件包、编译构建，那会有大量的无关内容被添加进来，如果不小心清理，将会导致镜像极为臃肿。</p><p>此外，使用 <code>docker commit</code> 意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为<strong>黑箱镜像</strong>，换句话说，就是除了制作镜像的人知道执行过什么命令、怎么生成的镜像，别人根本无从得知。而且，即使是这个制作镜像的人，过一段时间后也无法记清具体在操作的。虽然 <code>docker diff</code> 或许可以告诉得到一些线索，但是远远不到可以确保生成一致镜像的地步。这种黑箱镜像的维护工作是非常痛苦的。</p><p>而且，回顾之前提及的镜像所使用的分层存储的概念，除当前层外，之前的每一层都是不会发生改变的，换句话说，任何修改的结果仅仅是在当前层进行标记、添加、修改，而不会改动上一层。如果使用 <code>docker commit</code> 制作镜像，以及后期修改的话，每一次修改都会让镜像更加臃肿一次，所删除的上一层的东西并不会丢失，会一直如影随形的跟着这个镜像，即使根本无法访问到。这会让镜像更加臃肿。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h3&gt;&lt;p&gt;继续学习 Docker 吧，大概是第三次想要开始学习了。。。&lt;/p&gt;
&lt;p&gt;这次学习算是从实际需求得到的原动力——想要部署一个基于 &lt;strong&gt;scrapy&lt;/strong&gt; 的爬虫容器，然后就犯了使用 docker 最大的意识错误——把 &lt;strong&gt;Docker&lt;/strong&gt; 当做 &lt;strong&gt;虚拟机&lt;/strong&gt; 使用。&lt;/p&gt;
&lt;p&gt;我 &lt;code&gt;dcoker pull&lt;/code&gt; 了一个 &lt;strong&gt;centos&lt;/strong&gt; 的镜像，然后 &lt;code&gt;exec&lt;/code&gt; 就去，按照虚拟机的思考方式，更新源，安装包，&lt;code&gt;git clone&lt;/code&gt; 项目，安装项目的依赖。然后我发现这个 &lt;strong&gt;image&lt;/strong&gt; 连 &lt;strong&gt;vim&lt;/strong&gt; 都没有。。。很痛苦的挣扎后放弃了。。。&lt;/p&gt;
&lt;p&gt;最后，在服务里上安装了 &lt;strong&gt;pipenv&lt;/strong&gt;，成功部署了项目。&lt;/p&gt;
&lt;p&gt;然后周末和小伙伴讨论了下他们使用 docker 的实践方式和对 docker 的理解，打算研究一下 docker 的 &lt;strong&gt;最佳实践&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;让我们开始快乐的编写 &lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/image/build.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dockerfile&lt;/a&gt; 吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="最佳实践" scheme="http://yoursite.com/tags/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="容器" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>给 Windows 的终端配置代理</title>
    <link href="http://yoursite.com/2018/01/27/proxy-on-windows-terminal/"/>
    <id>http://yoursite.com/2018/01/27/proxy-on-windows-terminal/</id>
    <published>2018-01-27T08:19:44.000Z</published>
    <updated>2020-08-04T07:29:12.116Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>之前遇到在 Windows 下给终端（cmd，Git Bash，PowerShell）配置代理时，总是模模糊糊的就过去了，今天又折腾了一次，恰巧有时间记下来，不想要再次重复了。</p><a id="more"></a><p>其实命令很简单，跟在 <strong>Linux</strong> 下没什么区别。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> http_proxy=http://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> https_proxy=http://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> http_proxy_user=user</span><br><span class="line"><span class="built_in">set</span> http_proxy_pass=pass</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> https_proxy_user=user</span><br><span class="line"><span class="built_in">set</span> https_proxy_pass=pass</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复</span></span><br><span class="line"><span class="built_in">set</span> http_proxy=</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> https_proxy=</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu 下命令为 export</span></span><br><span class="line"><span class="comment"># export http_proxy=http://127.0.0.1:1080</span></span><br></pre></td></tr></table></figure><p>就是两条命令，前两条。</p><h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ol><li>一定要加 <code>http://</code>，直接写域名或者 IP 不行。</li><li><strong>http</strong> 和 <strong>https</strong> 都要设置。</li></ol><p>然后如果想验证是否成功配置了代理的话，用 <code>ping</code> 命令是不可以的</p><h3 id="ping-还是不行的原因"><a href="#ping-还是不行的原因" class="headerlink" title="ping 还是不行的原因"></a>ping 还是不行的原因</h3><p>ping的协议不是https，也不是https，是ICMP协议。</p><h3 id="验证方式"><a href="#验证方式" class="headerlink" title="验证方式"></a>验证方式</h3><p><code>curl -vv http://www.google.com</code>，用这条命令来验证，如果返回如下结果表示代理设置成功。</p><p><img src="/images/curl-google.png" alt="curl-google"></p><p>这里还有一个坑是，<strong>cmd</strong>，<strong>Git Bash</strong>，<strong>PowerShell</strong> 设置的方式不同！！！有点精神分裂了。。。</p><ul><li><p><strong>cmd</strong> 中用 <code>set http_proxy</code> 设置</p></li><li><p><strong>Git Bash</strong> 中用 <code>export http_proxy</code> 设置</p></li><li><p><strong>PowerShell</strong> 中按照这样设置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># NOTE: registry keys for IE 8, may vary for other versions</span></span><br><span class="line"><span class="variable">$regPath</span> = <span class="string">'HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> Clear-Proxy</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">Set-ItemProperty</span> -Path <span class="variable">$regPath</span> -Name ProxyEnable -Value <span class="number">0</span></span><br><span class="line">    <span class="built_in">Set-ItemProperty</span> -Path <span class="variable">$regPath</span> -Name ProxyServer -Value <span class="string">''</span></span><br><span class="line">    <span class="built_in">Set-ItemProperty</span> -Path <span class="variable">$regPath</span> -Name ProxyOverride -Value <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    [Environment]::SetEnvironmentVariable(<span class="string">'http_proxy'</span>, <span class="literal">$null</span>, <span class="string">'User'</span>)</span><br><span class="line">    [Environment]::SetEnvironmentVariable(<span class="string">'https_proxy'</span>, <span class="literal">$null</span>, <span class="string">'User'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> Set-Proxy</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$proxy</span> = <span class="string">'http://example.com'</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Set-ItemProperty</span> -Path <span class="variable">$regPath</span> -Name ProxyEnable -Value <span class="number">1</span></span><br><span class="line">    <span class="built_in">Set-ItemProperty</span> -Path <span class="variable">$regPath</span> -Name ProxyServer -Value <span class="variable">$proxy</span></span><br><span class="line">    <span class="built_in">Set-ItemProperty</span> -Path <span class="variable">$regPath</span> -Name ProxyOverride -Value <span class="string">'&lt;local&gt;'</span></span><br><span class="line"></span><br><span class="line">    [Environment]::SetEnvironmentVariable(<span class="string">'http_proxy'</span>, <span class="variable">$proxy</span>, <span class="string">'User'</span>)</span><br><span class="line">    [Environment]::SetEnvironmentVariable(<span class="string">'https_proxy'</span>, <span class="variable">$proxy</span>, <span class="string">'User'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>纠结于应该用 <code>set</code> 还是 <code>export</code> 还有一个判断方法是，敲一下这两个命令，如果返回一个长长的列表，就表示应该用这个命令，反之，如果返回找不到这个命令，就不应该用这个命令。</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这次应该是搞清楚了 Windows 下如何给 <strong>Terminal</strong> 设置代理，花了一个多小时的时间，感觉很值！</p><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><ul><li><a href="https://yevon-cn.github.io/2017/05/05/set-proxy-of-cmd.html" target="_blank" rel="noopener">命令行配置代理服务器</a></li><li><a href="https://github.com/shadowsocks/shadowsocks-windows/issues/1489" target="_blank" rel="noopener">windows终端命令行下如何使用代理？</a></li><li><a href="https://www.cnblogs.com/xing901022/p/4652624.html" target="_blank" rel="noopener">windows（64位）下使用curl命令</a></li><li><a href="https://www.s0nnet.com/archives/icmp-ping" target="_blank" rel="noopener">ICMP协议与ping原理</a></li><li><a href="https://zh.wikipedia.org/wiki/Ping" target="_blank" rel="noopener">ping</a></li><li><a href="https://gist.github.com/famousgarkin/c5138b1e13ac41920d22" target="_blank" rel="noopener">PowerShell Set-Proxy, Clear-proxy</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h3&gt;&lt;p&gt;之前遇到在 Windows 下给终端（cmd，Git Bash，PowerShell）配置代理时，总是模模糊糊的就过去了，今天又折腾了一次，恰巧有时间记下来，不想要再次重复了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Windows" scheme="http://yoursite.com/categories/Windows/"/>
    
    
      <category term="ping" scheme="http://yoursite.com/tags/ping/"/>
    
      <category term="Windows" scheme="http://yoursite.com/tags/Windows/"/>
    
      <category term="折腾" scheme="http://yoursite.com/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="终端" scheme="http://yoursite.com/tags/%E7%BB%88%E7%AB%AF/"/>
    
      <category term="代理" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%90%86/"/>
    
      <category term="proxy" scheme="http://yoursite.com/tags/proxy/"/>
    
      <category term="CURL" scheme="http://yoursite.com/tags/CURL/"/>
    
  </entry>
  
  <entry>
    <title>cmder 使用教程</title>
    <link href="http://yoursite.com/2018/01/18/cmder-tutorial/"/>
    <id>http://yoursite.com/2018/01/18/cmder-tutorial/</id>
    <published>2018-01-18T13:55:35.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>之前苦于在 Windows 下没有好用的 <strong>Terminal</strong>，后来发现了 <a href="http://cmder.net/" target="_blank" rel="noopener">cmder</a> ，在 Windows 下敲命令终于飞一般的感觉！</p><p><strong>cmder</strong> 基于 [<a href="https://conemu.github.io/" target="_blank" rel="noopener">Conemu</a>]，完整版内置了 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">With Git for Windows</a>，使用起来很方便。</p><p>虽然 cmder 可以开箱即用，但后来随着使用时间的增多，发现还是需要根据自己的喜好配置一下的。</p><p>在此记录下来，以备后用。</p><a id="more"></a><h3 id="bash-类型"><a href="#bash-类型" class="headerlink" title="bash 类型"></a>bash 类型</h3><p><strong>cmder</strong> 支持多种 <strong>bash</strong> 类型，在新建窗口的时候可以选择启用哪个 bash，需要先安装到系统中。如果是安装了 With Git for Windows 的 Windows 10 的话，至少有 <strong>cmd</strong>，<strong>PowerShell</strong>，<strong>Git Bash</strong> 三种可以选择。</p><p>我比较喜欢 Git Bash，更接近于 Linux 的体验。</p><h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><p>根据选择选择 bash 的不同，需要在不同位置添加 alias。</p><ol><li><p>cmd</p><p>修改 cmder 安装目录下的 <code>\config\user-aliases.md</code> 文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">;= @echo off</span><br><span class="line">;= rem Call DOSKEY and use this file as the macrofile</span><br><span class="line">;= %SystemRoot%\system32\doskey /listsize=1000 /macrofile=%0%</span><br><span class="line">;= rem In batch mode, jump to the end of the file</span><br><span class="line">;= goto:eof</span><br><span class="line">;= Add aliases below here</span><br><span class="line">e.=explorer .</span><br><span class="line">gl=git log --oneline --all --graph --decorate  $*</span><br><span class="line">ls=ls --show-control-chars -hF --color $*</span><br><span class="line">gs=git status $*</span><br><span class="line">ll=dir</span><br><span class="line">pwd=cd</span><br><span class="line">clear=cls</span><br><span class="line">history=cat "%CMDER_ROOT%\config\.history"</span><br><span class="line">unalias=alias /d $1</span><br><span class="line">vi=vim $*</span><br><span class="line">cmderr=cd /d "%CMDER_ROOT%"alias ls=ls --color $*</span><br></pre></td></tr></table></figure></li><li><p>Git-Bash</p><p>修改 Git 安装目录下的 <code>\etc\profile.d\aliases.sh</code> 文件。</p><p>修改此文件需要 <strong>管理员权限</strong>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Some good standards, which are not used if the user</span></span><br><span class="line"><span class="comment"># creates his/her own .bashrc/.bash_profile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --show-control-chars: help showing Korean or accented characters</span></span><br><span class="line"><span class="built_in">alias</span> ls=<span class="string">'ls -hF --color=auto --show-control-chars'</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">'ls -AlhF --color=auto'</span> </span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">'ls -lhF --color=auto'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git aliases</span></span><br><span class="line"><span class="built_in">alias</span> ga=<span class="string">'git add .'</span></span><br><span class="line"><span class="built_in">alias</span> gb=<span class="string">'git branch'</span></span><br><span class="line"><span class="built_in">alias</span> gcm=<span class="string">' git commit -m'</span></span><br><span class="line"><span class="built_in">alias</span> gd=<span class="string">'git diff'</span></span><br><span class="line"><span class="built_in">alias</span> gpu=<span class="string">'git push'</span></span><br><span class="line"><span class="built_in">alias</span> gpl=<span class="string">'git pull'</span></span><br><span class="line"><span class="built_in">alias</span> gl=<span class="string">'git ll'</span> </span><br><span class="line"><span class="built_in">alias</span> gs=<span class="string">'git status'</span></span><br><span class="line"><span class="built_in">alias</span> gpuo=<span class="string">'git push -u origin master'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$TERM</span>"</span> <span class="keyword">in</span></span><br><span class="line">xterm*)</span><br><span class="line"><span class="comment"># The following programs are known to require a Win32 Console</span></span><br><span class="line"><span class="comment"># for interactive usage, therefore let's launch them through winpty</span></span><br><span class="line"><span class="comment"># when run inside `mintty`.</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> node ipython php php5 psql python2.7</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$(type -p "$name".exe 2&gt;/dev/null)</span>"</span> <span class="keyword">in</span></span><br><span class="line"><span class="string">''</span>|/usr/bin/*) <span class="built_in">continue</span>;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">alias</span> <span class="variable">$name</span>=<span class="string">"winpty <span class="variable">$name</span>.exe"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure></li><li><p>PowerShell</p><p>修改  PowerShell 的比较麻烦，需要做一些准备工作。</p><p><strong>以下操作均在以管理员身份运行下执行</strong></p><ol><li><p>修改为允许计算机上运行您编写的未签名脚本和来自其他用户的签名脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set-executionpolicy remotesigned</span><br></pre></td></tr></table></figure></li><li><p>新建一个新的 PowerShell profile 文件，就是配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> To create a new “All users, All Hosts” profile, <span class="built_in">type</span>:</span></span><br><span class="line"></span><br><span class="line">if (!(Test-Path -Path $PROFILE.AllUsersAllHosts)) </span><br><span class="line">&#123; New-Item -Type File -Path $PROFILE.AllUsersAllHosts -Force &#125;</span><br></pre></td></tr></table></figure></li><li><p>新建与 <strong>alias</strong> 对应的 <strong>function</strong></p><p>PowerShell 对于 alias 的机制是必须基于一个 function，想要像 Linux 那样直接 <code>gs = git status</code> 不行，必须采用 function 的方式才行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">function GitStatus &#123; &amp; git status $args &#125;</span><br><span class="line">New-Alias -Name gs -Value GitStatus -Force -Option AllScope</span><br></pre></td></tr></table></figure><p>之后重启 PowerShell 就好了。</p></li></ol><p>​</p></li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="http://www.cnblogs.com/zhaozhan/archive/2012/06/01/2529384.html" target="_blank" rel="noopener">PowerShell因为在此系统中禁止执行脚本解决方法</a></li><li><a href="https://docs.microsoft.com/en-us/powershell/scripting/core-powershell/ise/how-to-use-profiles-in-windows-powershell-ise?view=powershell-5.1" target="_blank" rel="noopener">How to Use Profiles in Windows PowerShell ISE</a></li><li><a href="https://stackoverflow.com/questions/2858484/creating-aliases-in-powershell-for-git-commands" target="_blank" rel="noopener">Creating aliases in PowerShell for git commands?</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前记&quot;&gt;&lt;a href=&quot;#前记&quot; class=&quot;headerlink&quot; title=&quot;前记&quot;&gt;&lt;/a&gt;前记&lt;/h3&gt;&lt;p&gt;之前苦于在 Windows 下没有好用的 &lt;strong&gt;Terminal&lt;/strong&gt;，后来发现了 &lt;a href=&quot;http://cmder.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;cmder&lt;/a&gt; ，在 Windows 下敲命令终于飞一般的感觉！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cmder&lt;/strong&gt; 基于 [&lt;a href=&quot;https://conemu.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Conemu&lt;/a&gt;]，完整版内置了 &lt;a href=&quot;https://git-scm.com/download/win&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;With Git for Windows&lt;/a&gt;，使用起来很方便。&lt;/p&gt;
&lt;p&gt;虽然 cmder 可以开箱即用，但后来随着使用时间的增多，发现还是需要根据自己的喜好配置一下的。&lt;/p&gt;
&lt;p&gt;在此记录下来，以备后用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Windows" scheme="http://yoursite.com/categories/Windows/"/>
    
    
      <category term="Windows" scheme="http://yoursite.com/tags/Windows/"/>
    
      <category term="折腾" scheme="http://yoursite.com/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="cmder" scheme="http://yoursite.com/tags/cmder/"/>
    
      <category term="bash" scheme="http://yoursite.com/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>在 Ubuntu 上安装 Homestead 及其使用</title>
    <link href="http://yoursite.com/2018/01/15/homestead-install-on-ubuntu/"/>
    <id>http://yoursite.com/2018/01/15/homestead-install-on-ubuntu/</id>
    <published>2018-01-15T06:51:03.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>最近重装了系统，<strong>Ubuntu 16.04</strong>，需要重装一下 <strong>Homestead</strong>。之前安装的时候遇到了很多问题，可能跟系统有关，可能跟网络有关，可能跟安装方式有关，这次因为系统也比较新，所以统一整理一下。</p><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p>Laravel 5.5 版本，<a href="https://d.laravel-china.org/docs/5.5/homestead" target="_blank" rel="noopener">Laravel 虚拟开发环境 Homestead</a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Laravel 努力使整个 PHP 开发体验更加愉快，包括你的本地开发环境。<a href="https://www.vagrantup.com/" target="_blank" rel="noopener">Vagrant</a> 提供了一种简单、优雅的方式来管理和配置虚拟机。</p><a id="more"></a><p>Laravel Homestead 是一个官方预封装的 Vagrant Box，它为你提供了一个完美的开发环境，你无需在本地安装 PHP 、web 服务器或任何服务软件。 Vagrant Box 是完全一次性的，不用担心会搞乱你的操作系统！如果有什么地方出错了，你可以在几分钟内销毁并重建该 Box ！</p><p>Homestead 可以在任何 Windows、Mac 或 Linux 系统上运行，它包括了 Nginx Web 服务器、PHP 7.1、MySQL、PostgresSQL、Redis、Memcached、Node 以及开发 laravel 应用所需的东西。</p><h3 id="安装-VIrtualBox"><a href="#安装-VIrtualBox" class="headerlink" title="安装 VIrtualBox"></a>安装 VIrtualBox</h3><p>从 <a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">下载地址</a> 下载 deb 包，然后安装</p><h3 id="安装-Vagrant"><a href="#安装-Vagrant" class="headerlink" title="安装 Vagrant"></a>安装 Vagrant</h3><p>从 <a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="noopener">下载地址</a> 下载 deb 包，然后安装</p><h3 id="安装-Homestead-Vagrant-Box"><a href="#安装-Homestead-Vagrant-Box" class="headerlink" title="安装 Homestead Vagrant Box"></a>安装 Homestead Vagrant Box</h3><p>这个就是重点，内置了 <strong>Ubuntu 16.04</strong>，<strong>PHP 7.1</strong>，<strong>Nginx</strong> 等等的一个镜像</p><p>这个镜像本身比较大，由于国内的网络环境，这个下载速度很慢。所以需要参考 <a href="https://zcdll.github.io/2017/11/27/Ubuntu-init/" target="_blank" rel="noopener">这篇文章</a> 配置 <strong>proxychains4</strong>，然后运行一下命令下载安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 vagrant box add laravel/homestead</span><br></pre></td></tr></table></figure><h4 id="下载-virtualbox-box-文件慢的其他解决方法："><a href="#下载-virtualbox-box-文件慢的其他解决方法：" class="headerlink" title="下载 virtualbox.box 文件慢的其他解决方法："></a>下载 virtualbox.box 文件慢的其他解决方法：</h4><p>先离线下载，然后本地安装</p><p>就是在通过在线安装的时候，在终端会给出这个文件的下载地址，复制自己下载，然后进入到安装目录，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add laravel/homestead virtualbox.box</span><br></pre></td></tr></table></figure><p>就好了，进入目录安装，是因为不用写 Windows 的目录，写的话大概是这个样子的 <code>file://d:/virtualbox.box</code></p><p>然后进入虚拟机的安装目录，修改文件，目录大概是 <code>c:/users/XXX/.vagrant.d/boxes/laravel-VAGRANTSLASH-homestead</code></p><p>在当面目录下新建 <code>metadata_url</code> 这个文件，写入 <code>https://vagrantcloud.com/laravel/homestead</code>，这个就是 虚拟机 的下载地址，可能会有变化。然后把同级目录下的 0 那个目录改为下载的文件的版本号，比如 <code>3.0.0</code>，就好啦！</p><p>参考：<a href="https://www.codecasts.com/blog/post/vagrant-add-homestead-locally" target="_blank" rel="noopener">vagrant 添加本地 box 安装 laravel homestead</a></p><h3 id="安装-Homestead"><a href="#安装-Homestead" class="headerlink" title="安装 Homestead"></a>安装 Homestead</h3><p>由于 Homestead 的 <code>master</code> 分支并不是稳定分支，你应该用打过标签的稳定版本。你可以在 <a href="https://github.com/laravel/homestead/releases" target="_blank" rel="noopener">Github 发行页面</a> 上找到最新的稳定版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/laravel/homestead.git homestead</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> homestead</span><br><span class="line"></span><br><span class="line">git checkout v7.0.1</span><br></pre></td></tr></table></figure><p>克隆 Homestead 代码库后，从 Homestead 目录中运行 <code>bash init.sh</code> 命令来创建 <code>Homesstead.yaml</code> 配置文件。 <code>Homesstead.yaml</code> 文件会被放置在你的 Homestead 目录中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Mac / Linux...</span></span><br><span class="line">bash init.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows...</span></span><br><span class="line">init.bat</span><br></pre></td></tr></table></figure><h3 id="配置-Homestead"><a href="#配置-Homestead" class="headerlink" title="配置 Homestead"></a>配置 Homestead</h3><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li><p>如果在 <code>~/.ssh</code> 下没有 <strong>id_rsa</strong> 这个 key，需要先创建一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096</span><br></pre></td></tr></table></figure></li><li><p><strong>folders</strong> 对应的 <strong>to</strong> 目录，需要在加一层，不能直接写 <code>/home/vagrant</code>，即 <code>to: /home/vagrant/coder</code></p></li></ol><p>参考如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">ip:</span> <span class="string">"192.168.10.10"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">    - type:</span> <span class="string">"public_network"</span></span><br><span class="line"><span class="attr">      ip:</span> <span class="string">"192.168.10.20"</span></span><br><span class="line"><span class="attr">      bridge:</span> <span class="string">"en1: Wi-Fi (AirPort)"</span></span><br><span class="line"><span class="comment"># 如果想要在局域网内访问的话，需要这么配置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">memory:</span> <span class="number">2048</span></span><br><span class="line"><span class="attr">cpus:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">provider:</span> <span class="string">virtualbox</span></span><br><span class="line"></span><br><span class="line"><span class="attr">authorize:</span> <span class="string">~/.ssh/id_rsa.pub</span></span><br><span class="line"></span><br><span class="line"><span class="attr">keys:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">zcdll</span></span><br><span class="line"><span class="attr">hostname:</span> <span class="string">zcdll</span></span><br><span class="line"></span><br><span class="line"><span class="attr">folders:</span></span><br><span class="line"><span class="attr">    - map:</span> <span class="string">/home/zcdll/coder</span></span><br><span class="line"><span class="attr">      to:</span> <span class="string">/home/vagrant/coder</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sites:</span></span><br><span class="line"><span class="attr">    - map:</span> <span class="string">laravel5.test</span></span><br><span class="line"><span class="attr">      to:</span> <span class="string">/home/vagrant/coder/my-code/laravel5/public</span></span><br><span class="line"></span><br><span class="line"><span class="attr">databases:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">homestead</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># blackfire:</span></span><br><span class="line"><span class="comment">#     - id: foo</span></span><br><span class="line"><span class="comment">#       token: bar</span></span><br><span class="line"><span class="comment">#       client-id: foo</span></span><br><span class="line"><span class="comment">#       client-token: bar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ports:</span></span><br><span class="line"><span class="comment">#     - send: 50000</span></span><br><span class="line"><span class="comment">#       to: 5000</span></span><br><span class="line"><span class="comment">#     - send: 7777</span></span><br><span class="line"><span class="comment">#       to: 777</span></span><br><span class="line"><span class="comment">#       protocol: udp</span></span><br></pre></td></tr></table></figure><h3 id="配置-Hosts"><a href="#配置-Hosts" class="headerlink" title="配置 Hosts"></a>配置 Hosts</h3><p>每次新增了站点之后，都需要在 <code>/etc/hosts</code> 中新增一条记录，同时需要的话，需要新增数据库的记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.10.10  homestead.test</span><br></pre></td></tr></table></figure><h3 id="启动-Vagrant-Box"><a href="#启动-Vagrant-Box" class="headerlink" title="启动 Vagrant Box"></a>启动 Vagrant Box</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vagrant up</span><br><span class="line"></span><br><span class="line">vatrant reload --provision</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>之前安装的时候，无论在 <strong>Ubuntu</strong> 上还是 <strong>Windows 10</strong> 上都费了老大劲，今天却出奇的顺利，不知道是不是因为新装的系统，比较稳定的原因，或者是因为各个软件版本都比较新的原因。</p><p>先用一段时间，如果有问题再记录在这里。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近重装了系统，&lt;strong&gt;Ubuntu 16.04&lt;/strong&gt;，需要重装一下 &lt;strong&gt;Homestead&lt;/strong&gt;。之前安装的时候遇到了很多问题，可能跟系统有关，可能跟网络有关，可能跟安装方式有关，这次因为系统也比较新，所以统一整理一下。&lt;/p&gt;
&lt;h3 id=&quot;官方文档&quot;&gt;&lt;a href=&quot;#官方文档&quot; class=&quot;headerlink&quot; title=&quot;官方文档&quot;&gt;&lt;/a&gt;官方文档&lt;/h3&gt;&lt;p&gt;Laravel 5.5 版本，&lt;a href=&quot;https://d.laravel-china.org/docs/5.5/homestead&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Laravel 虚拟开发环境 Homestead&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;Laravel 努力使整个 PHP 开发体验更加愉快，包括你的本地开发环境。&lt;a href=&quot;https://www.vagrantup.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vagrant&lt;/a&gt; 提供了一种简单、优雅的方式来管理和配置虚拟机。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="折腾" scheme="http://yoursite.com/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="Laravel" scheme="http://yoursite.com/tags/Laravel/"/>
    
      <category term="Homestead" scheme="http://yoursite.com/tags/Homestead/"/>
    
  </entry>
  
  <entry>
    <title>使用 Hexo 时遇到的 bugs</title>
    <link href="http://yoursite.com/2018/01/11/hexo-bugs/"/>
    <id>http://yoursite.com/2018/01/11/hexo-bugs/</id>
    <published>2018-01-11T06:40:16.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>记录使用 Hexo 时遇到的 bugs 及解决办法。</p><a id="more"></a><ol><li><p>运行 <code>hexo s</code> 后报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br><span class="line">INFO  Start processing</span><br><span class="line">FATAL Something<span class="string">'s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span></span><br><span class="line"><span class="string">Error: watch /home/XXX/coder/blog/source/ ENOSPC</span></span><br><span class="line"><span class="string">    at _errnoException (util.js:1022:11)</span></span><br><span class="line"><span class="string">    at FSWatcher.start (fs.js:1374:19)</span></span><br><span class="line"><span class="string">    at Object.fs.watch (fs.js:1400:11)</span></span><br><span class="line"><span class="string">    at createFsWatchInstance (/home/XXX/coder/blog/node_modules/chokidar/lib/nodefs-handler.js:37:15)</span></span><br><span class="line"><span class="string">    at setFsWatchListener (/home/XXX/coder/blog/node_modules/chokidar/lib/nodefs-handler.js:80:15)</span></span><br><span class="line"><span class="string">    at FSWatcher.NodeFsHandler._watchWithNodeFs (/home/XXX/coder/blog/node_modules/chokidar/lib/nodefs-handler.js:228:14)</span></span><br><span class="line"><span class="string">    at FSWatcher.NodeFsHandler._handleDir (/home/XXX/coder/blog/node_modules/chokidar/lib/nodefs-handler.js:407:19)</span></span><br><span class="line"><span class="string">    at FSWatcher.&lt;anonymous&gt; (/home/XXX/coder/blog/node_modules/chokidar/lib/nodefs-handler.js:455:19)</span></span><br><span class="line"><span class="string">    at FSWatcher.&lt;anonymous&gt; (/home/XXX/coder/blog/node_modules/chokidar/lib/nodefs-handler.js:460:16)</span></span><br><span class="line"><span class="string">    at FSReqWrap.oncomplete (fs.js:153:5)</span></span><br></pre></td></tr></table></figure><p>根据提示，查看 <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">Troubleshooting</a> 后，有如下一条</p><p><strong>ENOSPC Error (Linux)</strong></p><p>Sometimes when running the command <code>$ hexo server</code> it returns an error:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: watch ENOSPC ...</span><br></pre></td></tr></table></figure><p>It can be fixed by running <code>$ npm dedupe</code> or, if that doesn’t help, try the following in the Linux console:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p</span><br></pre></td></tr></table></figure><p>This will increase the limit for the number of files you can watch.</p><p>运行第一条命令后依然报错，运行第二条命令后就好了。原因上面说了，watch 的文件太多了，超过阈值了。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录使用 Hexo 时遇到的 bugs 及解决办法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="坑" scheme="http://yoursite.com/tags/%E5%9D%91/"/>
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="bug" scheme="http://yoursite.com/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>通过 SSH 操作 Git 终极教程</title>
    <link href="http://yoursite.com/2018/01/10/git-ssh/"/>
    <id>http://yoursite.com/2018/01/10/git-ssh/</id>
    <published>2018-01-10T02:50:41.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>在想要用 SSH 的方式 clone 项目，管理项目时，之前每次或多或少的都要查一下 Github 的文档，感觉很烦。</p><p>现在发现在 Windows 下，添加的方式和在 Linux 下还不一样，要麻烦不少，需要修改配置文件。</p><p>此处想吐槽。</p><p>现在记录下来，以防以后还要重复这些操作。</p><a id="more"></a><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li><p><strong>SSH：</strong>为 Secure Shell 的缩写，是一种网络协议，用于计算机之间的加密登录。</p></li><li><p><strong>SSH认证方式：</strong>基于口令的安全验证， 基于密匙的安全验证。</p></li><li><p><strong>SSH-AGENT：</strong> users run a program called <strong>ssh-agent</strong> that runs the duration of a local login session, stores unencrypted keys in memory, and communicates with SSH clients using a Unix domain socket.</p><p><strong>ssh-agent</strong> 是一个在后台运行的应用程序，它会缓存您已经加载到内存中的密钥，这样便不必每次使用这个密钥都输入密码了。</p><p>也就是说，<strong>ssh-agent</strong> 是用来缓存解密的私有密钥，实现后续的“无密码”连接。当远程服务器发来请求，要把私钥和随机字符串加密返回时，就要通过 <strong>ssh-agent</strong> 来查找私钥。</p></li><li><p><strong>ssh-add命令：</strong>把专用密钥添加到 <a href="http://man.linuxde.net/ssh-agent" target="_blank" rel="noopener">ssh-agent</a> 的高速缓存中。</p></li><li><p><strong>eval：</strong>eval会对后面的命令行进行两边扫描，如果第一遍扫描后，cmdLine是个普通命令，则执行此命令；如果cmdLine中含有变量的间接引用，则保证间接引用的语义。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> 11 22 33 44</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$4</span>  <span class="comment"># 44</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\$<span class="variable">$#</span>"</span>  <span class="comment"># 4，$# 可以输出最后一个参数</span></span><br><span class="line"><span class="built_in">eval</span> <span class="built_in">echo</span> <span class="string">"\$<span class="variable">$#</span>"</span>  <span class="comment"># 44</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h3><ol><li>Linux 和 Windows 不同，Linux 默认会在系统启动的时候启动 <strong>ssh-agent</strong> ，Windows 不会。</li><li>Linux 和 Windows 部分命令不同，路径不同。</li><li>添加 <strong>ssh-key</strong> 的过程记不住。</li><li>通过 <strong>ssh-add</strong> 添加的私钥，在重启后 <strong>默认</strong> 不会自动加载，想要自动加载的话，有两个方式：<ol><li>在 <code>~/.ssh/config</code> 中添加对应配置</li><li>在 <code>~/.bashrc</code> 中添加对应启动后的命令</li></ol></li></ol><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ol><li><p>生成 SSH Key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -f ~/.ssh/github -C <span class="string">"your_email@example.com"</span></span><br><span class="line"><span class="comment"># 需要替换成自己的邮箱</span></span><br><span class="line"><span class="comment"># 最好指定一个独立的名称及存储位置，方便管理，通过 -f</span></span><br></pre></td></tr></table></figure></li><li><p>把 SSH Key 加到 ssh-agent</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span>  <span class="comment"># 启动 ssh-agent</span></span><br><span class="line"><span class="comment"># Windows 上的方法见下面 第七条</span></span><br><span class="line"></span><br><span class="line">ssh-add ~/.ssh/<span class="string">"your id_rsa name"</span>  <span class="comment"># 需要替换为自己的 key name</span></span><br></pre></td></tr></table></figure></li><li><p>把 SSH Key 加到 Github 等服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install xclip  <span class="comment"># 安装复制工具，避免复制的时候多空行，空格等</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for Linux</span></span><br><span class="line">xclip -sel clip &lt; ~/.ssh/<span class="string">"your id_rsa name"</span>  <span class="comment"># 需要替换为自己的 key name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for Windows</span></span><br><span class="line">clip &lt; ~/.ssh/<span class="string">"your id_rsa name"</span>  <span class="comment"># 需要替换为自己的 key name，这里前面的路径也不对，需要替换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for Mac</span></span><br><span class="line">pbcopy &lt; ~/.ssh/<span class="string">"your id_rsa name"</span>  <span class="comment"># 需要替换为自己的 key name</span></span><br></pre></td></tr></table></figure><p>然后在 Github 等服务上<a href="https://github.com/settings/keys" target="_blank" rel="noopener">新建 SSH Key</a> ，粘贴即好。</p></li><li><p>测试是否成功添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com  </span><br><span class="line"></span><br><span class="line">ssh -T git@git.coding.net</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回类似于如下的信息，表示正确添加，如果有错误，见下面参考链接</span></span><br><span class="line">Hi username! You<span class="string">'ve successfully authenticated, but GitHub does not</span></span><br><span class="line"><span class="string">provide shell access.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ssh -vT git@github.com  # 打印完整过程</span></span><br></pre></td></tr></table></figure></li><li><p>修改 <code>~/.ssh/config</code> 文件，使得系统重启后，不用再次添加 SSH Key 到 ssh-agent</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.ssh/config  <span class="comment"># 这个文件很可能不存在，这么新建一个就行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照如下格式为每个服务新建一项即可</span></span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    User zcdll</span><br><span class="line">    IdentityFile ~/.ssh/github</span><br><span class="line"></span><br><span class="line">Host git.coding.net</span><br><span class="line">    HostName git.coding.net</span><br><span class="line">    User zcdll</span><br><span class="line">    IdentityFile ~/.ssh/coding</span><br></pre></td></tr></table></figure></li><li><p>之后可以新建一个测试项目，检查是否可以成功 <code>clone, push</code>。</p></li><li><p><strong>Windows</strong> 上 <strong>自动启动 git-agent</strong> 以及 <strong>自动加载 SSH Key</strong> 的方法</p><p>这里的 <strong>自动</strong> 指的是，每次启动 <strong>Git Bash</strong> 这个客户端时</p><p>新建文件 <code>~/.profile</code> ，即 <code>/c/Users/XXX/profile</code> ，然后写入如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">env=~/.ssh/agent.env</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">agent_load_env</span></span> () &#123; <span class="built_in">test</span> -f <span class="string">"<span class="variable">$env</span>"</span> &amp;&amp; . <span class="string">"<span class="variable">$env</span>"</span> &gt;| /dev/null ; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">agent_start</span></span> () &#123;</span><br><span class="line">    (<span class="built_in">umask</span> 077; ssh-agent &gt;| <span class="string">"<span class="variable">$env</span>"</span>)</span><br><span class="line">    . <span class="string">"<span class="variable">$env</span>"</span> &gt;| /dev/null ; &#125;</span><br><span class="line"></span><br><span class="line">agent_load_env</span><br><span class="line"></span><br><span class="line"><span class="comment"># agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2= agent not running</span></span><br><span class="line">agent_run_state=$(ssh-add -l &gt;| /dev/null 2&gt;&amp;1; <span class="built_in">echo</span> $?)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! <span class="string">"<span class="variable">$SSH_AUTH_SOCK</span>"</span> ] || [ <span class="variable">$agent_run_state</span> = 2 ]; <span class="keyword">then</span></span><br><span class="line">    agent_start</span><br><span class="line">    ssh-add</span><br><span class="line">    ssh-add ~/.ssh/github  <span class="comment"># 如果自定义了 key 的名字或者路径，则需要写在这里</span></span><br><span class="line">    ssh-add ~/.ssh/coding</span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">"<span class="variable">$SSH_AUTH_SOCK</span>"</span> ] &amp;&amp; [ <span class="variable">$agent_run_state</span> = 1 ]; <span class="keyword">then</span></span><br><span class="line">    ssh-add</span><br><span class="line">    ssh-add ~/.ssh/github  <span class="comment"># 如果自定义了 key 的名字或者路径，则需要写在这里</span></span><br><span class="line">    ssh-add ~/.ssh/coding</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> env</span><br></pre></td></tr></table></figure><p>在新开 <strong>Git Bash</strong> 时，如果看到如下信息，表示 <strong>ssh-agent</strong> 打开成功，<strong>SSH Key</strong> 加载成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Identity added: /c/Users/XXX/.ssh/id_rsa (/c/Users/XXX/.ssh/id_rsa)</span><br><span class="line">Identity added: /c/Users/XXX/.ssh/github (/c/Users/XXX/.ssh/github)</span><br><span class="line">Identity added: /c/Users/XXX/.ssh/coding (/c/Users/XXX/.ssh/coding)</span><br><span class="line"></span><br><span class="line">XXX@XXX MINGW64 /d/Program Files/cmder</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>然后，可以通过 <code>ssh -T</code> 命令才测试一下，看到如下信息表示添加测试通过。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi XXX! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$ ssh -T git@git.coding.net</span></span><br><span class="line"><span class="string">Warning: Permanently added the RSA host key for IP address '</span>123.XX.XX.XX<span class="string">' to the list of known hosts.</span></span><br><span class="line"><span class="string">Coding 提示: Hello XXX, You'</span>ve connected to Coding.net via SSH. This is a personal key.</span><br><span class="line">XXX，你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个个人公钥</span><br></pre></td></tr></table></figure></li></ol><p>   <strong>注意：</strong></p><ol><li>如果修改了 <code>~/.profile</code> 文件，发现新开 <strong>Git Bash</strong> 时，没有加载，那么可以删除 <code>~/.ssh/agent.env</code> 文件，尝试一下。 </li><li>这里目前我发现只有新开 <strong>Git Bash</strong> 时，才会加载 <code>~/.profile</code> 文件，别的 terminal 不行。所以要么使用 <strong>Git Bash</strong>，要么使用 <strong>cmder + Git Bash</strong>。</li></ol><h3 id="暂时添加一个统计代码行数的命令"><a href="#暂时添加一个统计代码行数的命令" class="headerlink" title="暂时添加一个统计代码行数的命令"></a>暂时添加一个统计代码行数的命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --author=<span class="string">"xiuneng.gan"</span> --pretty=tformat: --numstat | awk <span class="string">'&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc &#125;'</span></span><br></pre></td></tr></table></figure><h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><ul><li><input checked disabled type="checkbox"> 研究在 Windows 上怎么用</li></ul><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><ul><li><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="noopener">SSH原理与运用（一）：远程登录</a></li><li><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html" target="_blank" rel="noopener">SSH原理与运用（二）：远程操作与端口转发</a></li><li><a href="https://zh.wikipedia.org/wiki/Secure_Shell" target="_blank" rel="noopener">Secure Shell</a></li><li><a href="https://baike.baidu.com/item/SSH/10407" target="_blank" rel="noopener">ssh （安全外壳协议）</a></li><li><a href="https://en.wikipedia.org/wiki/Ssh-agent" target="_blank" rel="noopener">ssh-agent</a></li><li><a href="http://yijiebuyi.com/blog/4b5c272e7058cb331098250c8e98eb3e.html" target="_blank" rel="noopener">ssh-agent 与 ssh 的区别</a></li><li><a href="http://yysfire.github.io/linux/using-ssh-agent-with-ssh.html" target="_blank" rel="noopener">使用ssh和ssh-agent实现“无密码”登录远程机器</a></li><li><a href="http://man.linuxde.net/ssh-add" target="_blank" rel="noopener">ssh-add命令</a></li><li><a href="https://wiki.archlinux.org/index.php/SSH_keys_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">SSH keys (简体中文)</a></li><li><a href="https://segmentfault.com/q/1010000000835302" target="_blank" rel="noopener">是否必须每次添加ssh-add</a></li><li><a href="http://blog.csdn.net/damotiansheng/article/details/39735441" target="_blank" rel="noopener">linux shell中的eval命令</a></li><li><a href="http://linux.vbird.org/linux_basic/0320bash.php" target="_blank" rel="noopener">第十章、認識與學習BASH</a></li><li><a href="https://help.github.com/articles/error-permission-denied-publickey/" target="_blank" rel="noopener">Error: Permission denied (publickey)</a></li><li><a href="https://help.github.com/articles/working-with-ssh-key-passphrases/#auto-launching-ssh-agent-on-msysgit" target="_blank" rel="noopener">Working with SSH key passphrases</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在想要用 SSH 的方式 clone 项目，管理项目时，之前每次或多或少的都要查一下 Github 的文档，感觉很烦。&lt;/p&gt;
&lt;p&gt;现在发现在 Windows 下，添加的方式和在 Linux 下还不一样，要麻烦不少，需要修改配置文件。&lt;/p&gt;
&lt;p&gt;此处想吐槽。&lt;/p&gt;
&lt;p&gt;现在记录下来，以防以后还要重复这些操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>最新版 Hexo @3.4.4 和 Next 主题 @6.0.0 安装和更新教程</title>
    <link href="http://yoursite.com/2018/01/09/hexo@1-0-4&amp;next@6-0-0/"/>
    <id>http://yoursite.com/2018/01/09/hexo@1-0-4&amp;next@6-0-0/</id>
    <published>2018-01-09T01:41:02.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>之前用的 <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next 主题</a> 是 5.0.0 版本，一直没有更新过，最近看到 Next 出了 <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">6.0.0 版本</a>，想要更新一下，然后 Hexo 也一直没更新过，所以就一起更新了。</p><p>这里需要注意的是，Next 作者在 6.0.0 大版本之后，更改了仓库地址，新地址在 <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">theme-next</a> 下。同时也启用了新 <a href="https://theme-next.org/" target="_blank" rel="noopener">官网</a> ，不过要在 <strong>2018年1月17日</strong> 才正式上线，现在只有一个倒计时的页面。</p><p>因为考虑到这次是大版本更新，以及我之前的 Next 主题的目录中 <code>.git</code> 中的仓库地址变成了本地，担心如果改过来，可能会有未知的问题，还有就是想重新配置一遍 Hexo + Next，所以决定重新安装 Hexo + Next。</p><p>如果不打算重新安装的话，在 Next 的目录中运行 <code>git pull</code> 就可以更新了，如果报错了可以针对性的解决。</p><p>下面记录过程。</p><a id="more"></a><h3 id="安装-Hexo-和-Next"><a href="#安装-Hexo-和-Next" class="headerlink" title="安装 Hexo 和 Next"></a>安装 Hexo 和 Next</h3><ol><li><p>安装 Hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g  <span class="comment">#安装 hexo-cli</span></span><br><span class="line"></span><br><span class="line">hexo init blog  <span class="comment"># 新建 blog</span></span><br><span class="line"><span class="built_in">cd</span> blog  <span class="comment"># 进入 blog 目录</span></span><br><span class="line"></span><br><span class="line">hexo s  <span class="comment"># 启动</span></span><br><span class="line"></span><br><span class="line">hexo g  <span class="comment"># 生成</span></span><br></pre></td></tr></table></figure></li><li><p>安装 Next</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li></ol><h3 id="安装-Hexo-扩展"><a href="#安装-Hexo-扩展" class="headerlink" title="安装 Hexo 扩展"></a>安装 Hexo 扩展</h3><ul><li><a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 生成 rss</li><li><a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a> git 部署</li><li><a href="https://github.com/hexojs/hexo-math" target="_blank" rel="noopener">hexo-math</a>  可以解析 Latex 公式，上下标等</li></ul><h3 id="生成页面"><a href="#生成页面" class="headerlink" title="生成页面"></a>生成页面</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">new</span> <span class="string">page</span> <span class="string">tags</span>  <span class="comment"># 生成 标签 页</span></span><br><span class="line"></span><br><span class="line"><span class="string">hexo</span> <span class="string">new</span> <span class="string">page</span> <span class="string">categories</span>  <span class="comment"># 生成 分类 页</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成页面之后修改新页面，添加以下两项，然后修改 Next 的配置文件</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="修改-Hexo-配置"><a href="#修改-Hexo-配置" class="headerlink" title="修改 Hexo 配置"></a>修改 Hexo 配置</h3><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li>由于配置文件采用的是 <a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="noopener">YAML 语言</a> ，所以配置项的 <strong>key-value</strong> 必须有一个空格，不能挨着写。</li></ol><h4 id="修改项"><a href="#修改项" class="headerlink" title="修改项"></a>修改项</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">zcdll's</span> <span class="string">Blog</span>  <span class="comment"># 标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">开心最重要</span>  <span class="comment"># 副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">keep</span> <span class="string">going</span>  <span class="comment"># 站点描述</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">zcdll</span>  <span class="comment"># 作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span>  <span class="comment"># 语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span>  <span class="comment"># 时区</span></span><br><span class="line"></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span>  <span class="comment"># 主题</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feed:</span>  <span class="comment"># feed 配置，可以不配置，用默认。</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">rss.xml</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  hub:</span></span><br><span class="line"><span class="attr">  content:</span></span><br><span class="line"><span class="attr">  content_limit:</span> <span class="number">140</span></span><br><span class="line"><span class="attr">  content_limit_delim:</span> <span class="string">' '</span></span><br></pre></td></tr></table></figure><h3 id="修改-Next-主题配置"><a href="#修改-Next-主题配置" class="headerlink" title="修改 Next 主题配置"></a>修改 Next 主题配置</h3><h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><ol><li>由于配置文件采用的是 <a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="noopener">YAML 语言</a> ，所以配置项的 <strong>key-value</strong> 必须有一个空格，不能挨着写。</li><li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">官方文档</a></li><li>Next 主题配置文件和 Hexo 配置文件是两个文件。</li></ol><h4 id="修改项-1"><a href="#修改项-1" class="headerlink" title="修改项"></a>修改项</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span> <span class="string">/images/lianmeng.jpg</span>  <span class="comment"># 头像，需要把图片放到 next 主题中 source/images </span></span><br><span class="line"></span><br><span class="line"><span class="attr">baidu_analytics:</span> <span class="string">XXXXXXXX</span>  <span class="comment"># 百度统计代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 页面</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line">  <span class="comment"># schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment"># sitemap: /sitemap.xml || sitemap</span></span><br><span class="line"><span class="attr">  commonweal:</span> <span class="string">/404.html</span> <span class="string">||</span> <span class="string">heartbeat</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">rss:</span> <span class="comment"># 安装了 hexo-generator-feed 后在生成页面时，会在侧边栏自动生成 rss 按钮</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改字体，需要先启用自己的字体，然后添加字体库地址</span></span><br><span class="line"><span class="comment"># 最好切换为中科大的镜像 //fonts.lug.ustc.edu.cn，或者 google cn 的镜像 //fonts.font.im</span></span><br><span class="line"><span class="attr">font:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  host:</span> <span class="string">//fonts.lug.ustc.edu.cn</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  global:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span> <span class="string">Monda</span></span><br><span class="line"><span class="attr">    size:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  headings:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span> <span class="string">Roboto</span> <span class="string">Slab</span></span><br><span class="line"><span class="attr">    size:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  posts:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  logo:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span> <span class="string">Titillium</span> <span class="string">Web</span></span><br><span class="line"><span class="attr">    size:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  codes:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span> <span class="string">PT</span> <span class="string">Mono</span></span><br><span class="line"><span class="attr">    size:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">eighties</span>  <span class="comment"># 修改代码高亮主题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加侧边栏社交按钮</span></span><br><span class="line"><span class="attr">social:</span>  <span class="comment"># 记得开启这项</span></span><br><span class="line"><span class="attr">  GitHub:</span> <span class="attr">https://github.com/zcdll</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line">  <span class="string">微博:</span> <span class="attr">http://weibo.com/zcdll</span> <span class="string">||</span> <span class="string">weibo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  icons_only:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  transition:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  Github:</span> <span class="string">github</span></span><br><span class="line">  <span class="string">微博:</span> <span class="string">weibo</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 开启打赏功能</span></span><br><span class="line"><span class="attr">reward_comment:</span> <span class="string">赞赏是对我最大的支持！</span></span><br><span class="line"><span class="attr">wechatpay:</span> <span class="string">/images/wechatpay.jpg</span></span><br><span class="line"><span class="attr">alipay:</span> <span class="string">/images/alipay.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加友链</span></span><br><span class="line"><span class="attr">links_title:</span> <span class="string">Friends</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line"><span class="attr">  Gogole:</span> <span class="attr">https://www.google.com/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line"><span class="attr">  since:</span> <span class="number">2016</span>  <span class="comment"># 站点建立时间</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 添加微信公众号二维码</span></span><br><span class="line"><span class="attr">wechat_subscriber:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  qcode:</span> <span class="string">/images/wechat-qcode.jpg</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">交流或订阅，请长按或扫描上方微信二维码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加 来必力 评论插件，https://livere.com</span></span><br><span class="line"><span class="attr">livere_uid:</span> <span class="string">XXXXXX</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 Google Analytics，https://analytics.google.com</span></span><br><span class="line"><span class="attr">google_analytics:</span> <span class="string">UA-XXXXXX</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置腾讯移动分析</span></span><br><span class="line"><span class="attr">tencent_mta:</span> <span class="string">XXXXXX</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 favicon</span></span><br><span class="line"><span class="attr">favicon:</span></span><br><span class="line"><span class="attr">  small:</span> <span class="string">/images/favicon.ico</span></span><br><span class="line"><span class="attr">  medium:</span> <span class="string">/images/geek-modern-life.jpg</span></span><br><span class="line"><span class="attr">  apple_touch_icon:</span> <span class="string">/images/geek-modern-life.jpg</span></span><br><span class="line"><span class="attr">  safari_pinned_tab:</span> <span class="string">/images/geek-modern-life.jpg</span></span><br><span class="line">  </span><br><span class="line"> <span class="comment"># 修改 hexo-math，可能需要更新一下 cdn 的版本</span></span><br><span class="line"><span class="attr"> mathjax:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  cdn:</span> <span class="string">//cdn.bootcss.com/mathjax/2.7.3/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span></span><br></pre></td></tr></table></figure><h4 id="新建-腾讯公益404页面"><a href="#新建-腾讯公益404页面" class="headerlink" title="新建 腾讯公益404页面"></a>新建 <strong>腾讯公益404页面</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用方法，新建 404.html 页面，放到主题的 source 目录下，内容如下：--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"all"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"https://qzone.qq.com/gy/404/style/404style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/plain"</span> <span class="attr">src</span>=<span class="string">"http://www.qq.com/404/search_children.js"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">homePageUrl</span>=<span class="string">"/"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">homePageName</span>=<span class="string">"回到我的主页"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://qzone.qq.com/gy/404/data.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://qzone.qq.com/gy/404/page.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加新菜单页面"><a href="#添加新菜单页面" class="headerlink" title="添加新菜单页面"></a>添加新菜单页面</h3><h4 id="添加页面"><a href="#添加页面" class="headerlink" title="添加页面"></a>添加页面</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new page powerfultools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 之后在 hexo 目录中的 source 文件夹下会多出一个文件夹 powerfultools，里面有一个 index.md 文件，编辑这个 Markdown 文件就可以啦，再通过下面的设置就可以在首页看到这个菜单</span></span><br></pre></td></tr></table></figure><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>编辑主题配置文件 <code>~/themes/next/_config.yml</code>，在 <strong>menu</strong> 项中添加 <strong>powerfultools</strong> 字段，如下。</p><p>注意这里 <code>||</code> 后面的部分，如 flash，为 font-awesome 图标的名称，可以在这个 <a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">网站</a> 查询，设置了之后就可以显示个性的图标啦。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  powerfultools: /powerfultools/ || flash</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  <span class="comment"># schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment"># sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  commonweal: /404.html || heartbeat</span><br></pre></td></tr></table></figure><h4 id="添加中文注释"><a href="#添加中文注释" class="headerlink" title="添加中文注释"></a>添加中文注释</h4><p>如果不给 <strong>powerfultools</strong> 添加中文注释的话，在首页会显示完整的名称，既不美观也不利于展示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 ~/themes/next/languages/zh-Hans.yml 文件，添加相关注释</span></span><br><span class="line"></span><br><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br><span class="line">  schedule: 日程表</span><br><span class="line">  sitemap: 站点地图</span><br><span class="line">  commonweal: 公益404</span><br><span class="line">  powerfultools: 利器</span><br></pre></td></tr></table></figure><h4 id="普通页面"><a href="#普通页面" class="headerlink" title="普通页面"></a>普通页面</h4><p>如果添加的是如 <strong>标签</strong>，<strong>分类</strong> 等的普通页面，需要修改相应的 <strong>index.md</strong> 文件，添加如下两个字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>: <span class="string">"tags"</span> or <span class="string">"categories"</span> <span class="comment"># 类型</span></span><br><span class="line">comments: <span class="literal">false</span>  <span class="comment"># 禁止显示评论模块</span></span><br></pre></td></tr></table></figure><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li>需要自己写 <code>about.md</code> 页面</li><li>如果需要改为自己的域名，那需要在 <strong>站点</strong> 的 public 目录下放 <strong>CNAME</strong> 文件</li></ul><h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><ul><li><input checked disabled type="checkbox"> 检查 百度统计，Google 统计，腾讯移动分析 是否正常运行</li><li><input checked disabled type="checkbox"> 添加 阅读次数统计和浏览用户统计</li><li><input disabled type="checkbox"> 添加 文章最后更新时间</li><li><input disabled type="checkbox"> 添加 搜索</li><li><input disabled type="checkbox"> 看 <a href="http://theme-next.iissnan.com/tag-plugins.html" target="_blank" rel="noopener">这个</a></li></ul><hr><p>参考链接：</p><ul><li><a href="https://github.com/iissnan/hexo-theme-next/issues/2029" target="_blank" rel="noopener">如何更新next？</a></li><li><a href="https://github.com/iissnan/hexo-theme-next/issues/1539" target="_blank" rel="noopener">next主题怎么更新呢？</a></li><li><a href="https://github.com/iissnan/hexo-theme-next/issues/1547" target="_blank" rel="noopener">如何更新 next 到最新版本？</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="noopener">YAML 语言教程</a></li><li><a href="https://github.com/iissnan/hexo-theme-next/issues/62" target="_blank" rel="noopener">请问如何设置read more?</a></li><li><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">打造个性超赞博客Hexo+NexT+GithubPages的超深度优化</a></li><li><a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">为NexT主题添加文章阅读量统计功能</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前用的 &lt;a href=&quot;http://theme-next.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Next 主题&lt;/a&gt; 是 5.0.0 版本，一直没有更新过，最近看到 Next 出了 &lt;a href=&quot;https://github.com/theme-next/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;6.0.0 版本&lt;/a&gt;，想要更新一下，然后 Hexo 也一直没更新过，所以就一起更新了。&lt;/p&gt;
&lt;p&gt;这里需要注意的是，Next 作者在 6.0.0 大版本之后，更改了仓库地址，新地址在 &lt;a href=&quot;https://github.com/theme-next/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;theme-next&lt;/a&gt; 下。同时也启用了新 &lt;a href=&quot;https://theme-next.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt; ，不过要在 &lt;strong&gt;2018年1月17日&lt;/strong&gt; 才正式上线，现在只有一个倒计时的页面。&lt;/p&gt;
&lt;p&gt;因为考虑到这次是大版本更新，以及我之前的 Next 主题的目录中 &lt;code&gt;.git&lt;/code&gt; 中的仓库地址变成了本地，担心如果改过来，可能会有未知的问题，还有就是想重新配置一遍 Hexo + Next，所以决定重新安装 Hexo + Next。&lt;/p&gt;
&lt;p&gt;如果不打算重新安装的话，在 Next 的目录中运行 &lt;code&gt;git pull&lt;/code&gt; 就可以更新了，如果报错了可以针对性的解决。&lt;/p&gt;
&lt;p&gt;下面记录过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="next" scheme="http://yoursite.com/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>XPath 学习笔记</title>
    <link href="http://yoursite.com/2018/01/08/xpath-note/"/>
    <id>http://yoursite.com/2018/01/08/xpath-note/</id>
    <published>2018-01-08T02:50:27.000Z</published>
    <updated>2020-08-04T07:29:12.116Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>XPath 是一门在 XML 文档中查找信息的语言。XPath 用于在 XML 文档中通过元素和属性进行导航。</strong></p><p>XPath 于 1999 年 11 月 16 日 成为 W3C 标准。</p><p>XPath 被设计为供 XSLT、XPointer 以及其他 XML 解析软件使用。</p><p>XPath 表达式可返回节点集、字符串、逻辑值以及数字。</p><a id="more"></a><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li><p><strong>XPath 路径表达式：</strong> XPath 使用路径表达式来<strong>选取</strong> XML 文档中的节点或者节点集。这些路径表达式和我们在常规的电脑文件系统中看到的表达式非常相似。节点是通过沿着路径 (path) 或者步 (steps) 来选取的。</p></li><li><p><strong>XPath 标准函数：</strong> XPath 含有超过 100 个内建的函数。这些函数用于字符串值、数值、日期和时间比较、节点和 QName 处理、序列处理、逻辑值等等。</p></li><li><p><strong>节点（Node）：</strong> 在 XPath 中，有七种类型的节点：元素、属性、文本、命名空间、处理指令、注释以及文档节点（或称为根节点）。</p></li><li><p><strong>基本值（或称原子值，Atomic value）：</strong> 基本值是无父或无子的节点。</p></li><li><p><strong>项目（Item）：</strong> 项目是基本值或者节点。</p></li><li><p><strong>节点关系：</strong></p><ol><li>父（Parent）：每个元素以及属性都有一个父。</li><li>子（Children）：元素节点可有零个、一个或多个子。</li><li>同胞（Sibling）：拥有相同的父的节点。</li><li>先辈（Ancestor）：某节点的父、父的父，等等。</li><li>后代（Descendant）：某个节点的子，子的子，等等。</li></ol></li><li><p><strong>谓语（Predicates）：</strong> 谓语用来查找某个特定的节点或者包含某个指定的值的节点。谓语被嵌在方括号中。</p></li><li><p><strong>轴（Axes）：</strong>轴可定义相对于当前节点的节点集。</p></li><li><p><strong>步（step）：</strong>包括<strong>轴（axis）</strong>，<strong>节点测试（node-test）</strong>，<strong>零个或者更多谓语（predicate）</strong>。</p><p>步的语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">轴名称::节点测试[谓语]</span><br></pre></td></tr></table></figure></li><li><p><strong>运算符：</strong></p></li></ol><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th><th>返回值</th></tr></thead><tbody><tr><td>|</td><td>计算两个节点集</td><td>//book | //cd</td><td>返回所有拥有 book 和 cd 元素的节点集</td></tr><tr><td>+</td><td>加法</td><td>6 + 4</td><td>10</td></tr><tr><td>-</td><td>减法</td><td>6 - 4</td><td>2</td></tr><tr><td>*</td><td>乘法</td><td>6 * 4</td><td>24</td></tr><tr><td>div</td><td>除法</td><td>8 div 4</td><td>2</td></tr><tr><td>=</td><td>等于</td><td>price=9.80</td><td>如果 price 是 9.80，则返回 true。如果 price 是 9.90，则返回 false。</td></tr><tr><td>!=</td><td>不等于</td><td>price!=9.80</td><td>如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。</td></tr><tr><td>&lt;</td><td>小于</td><td>price&lt;9.80</td><td>如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。</td></tr><tr><td>&lt;=</td><td>小于或等于</td><td>price&lt;=9.80</td><td>如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。</td></tr><tr><td>&gt;</td><td>大于</td><td>price&gt;9.80</td><td>如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。</td></tr><tr><td>&gt;=</td><td>大于或等于</td><td>price&gt;=9.80</td><td>如果 price 是 9.90，则返回 true。如果 price 是 9.70，则返回 false。</td></tr><tr><td>or</td><td>或</td><td>price=9.80 or price=9.70</td><td>如果 price 是 9.80，则返回 true。如果 price 是 9.50，则返回 false。</td></tr><tr><td>and</td><td>与</td><td>price&gt;9.00 and price&lt;9.90</td><td>如果 price 是 9.80，则返回 true。如果 price 是 8.50，则返回 false。</td></tr><tr><td>mod</td><td>计算除法的余数</td><td>5 mod 2</td><td>1</td></tr></tbody></table><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>最有用的路径表达式</p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>nodename</td><td>选取此节点的所有子节点。</td></tr><tr><td>/</td><td>从根节点选取。</td></tr><tr><td>//</td><td>从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td></tr><tr><td>.</td><td>选取当前节点。</td></tr><tr><td>..</td><td>选取当前节点的父节点。</td></tr><tr><td>@</td><td>选取属性。</td></tr></tbody></table><p>路径表达式实例</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td>bookstore</td><td>选取 bookstore 元素的所有子节点。</td></tr><tr><td>/bookstore</td><td>选取根元素 bookstore。注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！</td></tr><tr><td>bookstore/book</td><td>选取属于 bookstore 的子元素的所有 book 元素。</td></tr><tr><td>//book</td><td>选取所有 book 子元素，而不管它们在文档中的位置。</td></tr><tr><td>bookstore//book</td><td>选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td></tr><tr><td>//@lang</td><td>选取名为 lang 的所有属性。</td></tr></tbody></table></li><li><p>谓语实例</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td>/bookstore/book[1]</td><td>选取属于 bookstore 子元素的第一个 book 元素。</td></tr><tr><td>/bookstore/book[last()]</td><td>选取属于 bookstore 子元素的最后一个 book 元素。</td></tr><tr><td>/bookstore/book[last()-1]</td><td>选取属于 bookstore 子元素的倒数第二个 book 元素。</td></tr><tr><td>/bookstore/book[position()&lt;3]</td><td>选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td></tr><tr><td>//title[@lang]</td><td>选取所有拥有名为 lang 的属性的 title 元素。</td></tr><tr><td>//title[@lang=’eng’]</td><td>选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td></tr><tr><td>/bookstore/book[price&gt;35.00]</td><td>选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td></tr><tr><td>/bookstore/book[price&gt;35.00]/title</td><td>选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td></tr></tbody></table></li><li><p>选取未知节点</p><p>XPath 通配符可用来选取未知的 XML 元素。</p><table><thead><tr><th>通配符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配任何元素节点。</td></tr><tr><td>@*</td><td>匹配任何属性节点。</td></tr><tr><td>node()</td><td>匹配任何类型的节点。</td></tr></tbody></table><p>选取未知节点实例</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td>/bookstore/*</td><td>选取 bookstore 元素的所有子元素。</td></tr><tr><td>//*</td><td>选取文档中的所有元素。</td></tr><tr><td>//title[@*]</td><td>选取所有带有属性的 title 元素。</td></tr></tbody></table></li><li><p>选取若干路径</p><p>通过在路径表达式中使用“|”运算符，您可以选取若干个路径。</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td>//book/title | //book/price</td><td>选取 book 元素的所有 title 和 price 元素。</td></tr><tr><td>//title | //price</td><td>选取文档中的所有 title 和 price 元素。</td></tr><tr><td>/bookstore/book/title | //price</td><td>选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</td></tr></tbody></table></li><li><p>使用轴</p><table><thead><tr><th>轴名称</th><th>结果</th></tr></thead><tbody><tr><td>ancestor</td><td>选取当前节点的所有先辈（父、祖父等）。</td></tr><tr><td>ancestor-or-self</td><td>选取当前节点的所有先辈（父、祖父等）以及当前节点本身。</td></tr><tr><td>attribute</td><td>选取当前节点的所有属性。</td></tr><tr><td>child</td><td>选取当前节点的所有子元素。</td></tr><tr><td>descendant</td><td>选取当前节点的所有后代元素（子、孙等）。</td></tr><tr><td>descendant-or-self</td><td>选取当前节点的所有后代元素（子、孙等）以及当前节点本身。</td></tr><tr><td>following</td><td>选取文档中当前节点的结束标签之后的所有节点。</td></tr><tr><td>namespace</td><td>选取当前节点的所有命名空间节点。</td></tr><tr><td>parent</td><td>选取当前节点的父节点。</td></tr><tr><td>preceding</td><td>选取文档中当前节点的开始标签之前的所有节点。</td></tr><tr><td>preceding-sibling</td><td>选取当前节点之前的所有同级节点。</td></tr><tr><td>self</td><td>选取当前节点。</td></tr></tbody></table></li><li><p>绝对路径和相对路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/step/step/...  <span class="comment">&lt;!--- 绝对路径 --&gt;</span></span><br><span class="line"></span><br><span class="line">step/step/...  <span class="comment">&lt;!--- 相对路径 --&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>步的实例</p><table><thead><tr><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>child::book</td><td>选取所有属于当前节点的子元素的 book 节点。</td></tr><tr><td>attribute::lang</td><td>选取当前节点的 lang 属性。</td></tr><tr><td>child::*</td><td>选取当前节点的所有子元素。</td></tr><tr><td>attribute::*</td><td>选取当前节点的所有属性。</td></tr><tr><td>child::text()</td><td>选取当前节点的所有文本子节点。</td></tr><tr><td>child::node()</td><td>选取当前节点的所有子节点。</td></tr><tr><td>descendant::book</td><td>选取当前节点的所有 book 后代。</td></tr><tr><td>ancestor::book</td><td>选择当前节点的所有 book 先辈。</td></tr><tr><td>ancestor-or-self::book</td><td>选取当前节点的所有 book 先辈以及当前节点（如果此节点是 book 节点）</td></tr><tr><td>child::*/child::price</td><td>选取当前节点的所有 price 孙节点。</td></tr></tbody></table></li></ol><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>就是为了使用 XML，可以读取和编辑 XML 文档，以及做一些操作。</p><hr><p>参考链接：</p><ul><li><a href="http://www.w3school.com.cn/xpath/index.asp" target="_blank" rel="noopener">XPath 教程</a></li><li><a href="http://www.w3school.com.cn/xpath/xpath_functions.asp" target="_blank" rel="noopener">XPath 函数</a></li><li><a href="http://www.ruanyifeng.com/blog/2009/07/xpath_path_expressions.html" target="_blank" rel="noopener">xpath路径表达式笔记</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;XPath 是一门在 XML 文档中查找信息的语言。XPath 用于在 XML 文档中通过元素和属性进行导航。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;XPath 于 1999 年 11 月 16 日 成为 W3C 标准。&lt;/p&gt;
&lt;p&gt;XPath 被设计为供 XSLT、XPointer 以及其他 XML 解析软件使用。&lt;/p&gt;
&lt;p&gt;XPath 表达式可返回节点集、字符串、逻辑值以及数字。&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="XPath" scheme="http://yoursite.com/tags/XPath/"/>
    
      <category term="Scrapy" scheme="http://yoursite.com/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 上的一些仓库 &amp; 工具</title>
    <link href="http://yoursite.com/2018/01/04/git-repos/"/>
    <id>http://yoursite.com/2018/01/04/git-repos/</id>
    <published>2018-01-04T14:06:16.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>收集的 GitHub 上的有用的工具，轮子，可能是某次为了完成某个功能而找到的，也可能是平时看到的。</p><p>如果只用一次，那基本记不住。</p><p>所以记录在这里。</p><a id="more"></a><ol><li><p><a href="https://github.com/baijunjie/PhotoClip.js" target="_blank" rel="noopener">PhotoClip.js</a></p><p>一款手势驱动的裁图插件，<strong>移动端照片裁剪的简洁化解决方案！</strong></p></li><li><p><a href="https://github.com/fengyuanchen/cropperjs" target="_blank" rel="noopener">cropperjs</a></p><p>JavaScript image cropper，PC 端</p></li><li><p><a href="http://slimimagecropper.com" target="_blank" rel="noopener">slimimagecropper</a></p><p> a cross platform JavaScript Image Cropping and Uploading plugin.收费的，17 刀。但是很美，很好用。</p></li><li><p><a href="https://github.com/ant-design/ant-design" target="_blank" rel="noopener">ant-design</a></p><p> 一个  React UI 框架</p><p> 官方出了一个 <a href="https://github.com/ant-design/ant-design-pro" target="_blank" rel="noopener">ant-design-pro</a> An out-of-box UI solution for enterprise applications，可以理解为脚手架，专门做后端应用框架的。</p></li><li><p><a href="https://github.com/chenxuan0000/vue-seamless-scroll" target="_blank" rel="noopener">vue-seamless-scroll</a></p><p> A simple, Seamless scrolling for Vue.js vue 无缝滚动 component</p></li><li><p><a href="https://github.com/ankurk91/vue-cleave-component" target="_blank" rel="noopener">vue-cleave-component</a></p><p> Vue.js component for cleave.js，用于格式化字符串，<a href="http://nosir.github.io/cleave.js/" target="_blank" rel="noopener">cleave.js</a> 功能很强大。</p></li><li><p><a href="https://github.com/rg3/youtube-dl" target="_blank" rel="noopener">youtube-dl</a></p><p> 下载 YouTube 视频的命令行工具，功能很强大，可以下载高清视频，已经有 30000 多 star了。</p></li><li><p><a href="https://github.com/xkeshi/image-compressor" target="_blank" rel="noopener">image-compressor</a></p><p> A simple JavaScript image compressor. </p></li><li><p><a href="https://github.com/lian-yue/vue-upload-component" target="_blank" rel="noopener">vue-upload-component</a></p><p> Vue.js file upload component, Multi-file upload, Upload directory, Drag upload, Drag the directory, Upload multiple files at the same time, html4 (IE 9), <code>PUT</code> method, Customize the filter</p></li><li><p><a href="https://github.com/ufoym/deepo" target="_blank" rel="noopener">deepo</a></p><p>A series of Docker images (and their generator) that allows you to quickly set up your deep learning research environment.<a href="https://hub.docker.com/r/ufoym/deepo" target="_blank" rel="noopener">https://hub.docker.com/r/ufoym/deepo</a></p></li></ol><ol start="11"><li><p><a href="https://github.com/ToyoDAdoubi/doubi" target="_blank" rel="noopener">doubi</a></p><p> 一个逗比写的各种逗比脚本~ 包含给 SSR 生成 pac.txt 的脚本</p></li><li><p><a href="https://github.com/jwasham/coding-interview-university/blob/master/translations/README-cn.md" target="_blank" rel="noopener"> Google Interview University 一套完整的学习手册帮助自己准备 Google 的面试</a></p></li><li><p><a href="https://github.com/Chalarangelo/30-seconds-of-code" target="_blank" rel="noopener">30-seconds-of-code</a></p><p> Curated collection of useful Javascript snippets that you can understand in 30 seconds or less.</p><p> <a href="https://github.com/kujian/30-seconds-of-code" target="_blank" rel="noopener">中文版</a></p></li></ol><ol start="14"><li><p><a href="https://github.com/xiaobei666/weixin-xiaochengxu666-info" target="_blank" rel="noopener">小程序开发干货汇总</a></p></li><li><p><a href="https://github.com/AlloyTeam/Mars" target="_blank" rel="noopener">Mars</a></p><p>腾讯移动Web前端知识库</p></li><li><p><a href="https://github.com/markyun/My-blog" target="_blank" rel="noopener">markyun/My-blog</a></p><p>马云云的Github博客，记录一些学习的片段。</p></li><li><p><a href="https://github.com/medatc/vuet" target="_blank" rel="noopener">vuet</a></p><p>在<code>vuex</code>中更新状态的唯一途径，就是通过提交<code>mutation</code>，这个过程是琐碎的，而在<code>Vuet</code>中是允许在何时何地进行直接赋值更新的，这个过程它是愉快的。<code>Vuet</code>是一种集中式状态管理模式，提供了模块系统和规则系统，它存在的意义是为了将状态管理变得简单</p></li><li><p><a href="https://github.com/coderwhy/JavaScript-Data-Structure" target="_blank" rel="noopener">JavaScript-Data-Structure</a></p></li><li><p><a href="https://github.com/denysdovhan/wtfjs" target="_blank" rel="noopener">What the f*ck JavaScript?</a></p><p> A list of funny and tricky JavaScript examples</p></li><li><p><a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="noopener">You-Dont-Know-JS</a></p></li><li><p><a href="https://github.com/sindresorhus/gifski-app" target="_blank" rel="noopener">gifski-app</a></p><p> Convert videos to high-quality GIFs on your Mac</p><p> 还有一个 GIF Brewery 3 也不错</p></li><li><p><a href="https://github.com/PanJiaChen/vue-countTo" target="_blank" rel="noopener">vue-countTo</a></p><p> 一个数数的组件</p></li><li><p><a href="https://github.com/xuxueli/xxl-sso/" target="_blank" rel="noopener">xxl-sso</a></p><p> 分布式单点登录框架XXL-SSO</p></li><li><p><a href="https://github.com/JedWatson/react-codemirror" target="_blank" rel="noopener">react-codemirror</a></p><p> Codemirror Component for React.js</p></li><li><p><a href="https://github.com/mzabriskie/react-draggable" target="_blank" rel="noopener">react-draggable</a></p><p> 一个基于 React 的拖拽组件</p></li><li><p><a href="https://github.com/bokuweb/react-resizable-decorator" target="_blank" rel="noopener">react-resizable-decorator</a></p><p> 一个基于 React 的调整大小的装饰器组件</p></li><li><p><a href="https://github.com/davideuler/architecture.of.internet-product" target="_blank" rel="noopener">architecture.of.internet-product</a></p><p> 互联网公司技术架构，微信/淘宝/腾讯/阿里/美团点评/百度/微博/Google/Facebook/Amazon/eBay的架构</p></li><li><p><a href="https://github.com/AlloyTeam/eslint-config-alloy" target="_blank" rel="noopener">eslint-config-alloy</a></p><p> AlloyTeam ESLint 规则</p></li><li><p><a href="https://github.com/AlloyTeam/tslint-config-alloy" target="_blank" rel="noopener">tslint-config-alloy</a></p><p> AlloyTeam TSLint 规则</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;收集的 GitHub 上的有用的工具，轮子，可能是某次为了完成某个功能而找到的，也可能是平时看到的。&lt;/p&gt;
&lt;p&gt;如果只用一次，那基本记不住。&lt;/p&gt;
&lt;p&gt;所以记录在这里。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="仓库" scheme="http://yoursite.com/tags/%E4%BB%93%E5%BA%93/"/>
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
      <category term="repos" scheme="http://yoursite.com/tags/repos/"/>
    
      <category term="轮子" scheme="http://yoursite.com/tags/%E8%BD%AE%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>在 Homestead 安装 natapp，搭建微信 web 开发本地环境</title>
    <link href="http://yoursite.com/2017/11/28/local-wechat/"/>
    <id>http://yoursite.com/2017/11/28/local-wechat/</id>
    <published>2017-11-28T10:25:50.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>今天尝试搭建了微信 web 开发的本地环境。</p><p>主要是利用 <a href="https://natapp.cn" target="_blank" rel="noopener">natapp</a> 来进行内网穿透，拦截微信发送的认证链接之后回调的链接，导流到本地，从而不用把代码上传到服务器。微信认为是服务器的地址，其实是本地的服务地址。</p><a id="more"></a><ol><li><p>修改 <code>Homestead</code> 配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// Homestead.yaml</span><br><span class="line">修改 ip 为局域网或外网等可以访问外网的 ip，然后添加一个 site</span><br><span class="line"></span><br><span class="line">ip: <span class="string">"192.168.1.61"</span></span><br><span class="line"></span><br><span class="line">- map: 192.168.1.61</span><br><span class="line">to: /home/vagrant/Code/code/wechat-app/public</span><br><span class="line"></span><br><span class="line">// hosts 也增加相应映射关系</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//~/scripts/homestead.rb</span><br><span class="line">修改 homestead，允许局域网中的其他设备访问虚拟机</span><br><span class="line"></span><br><span class="line">将 config.vm.network 属性的值修改为 public_network 。</span><br><span class="line"></span><br><span class="line">config.vm.network :public_network, ip: settings[<span class="string">"ip"</span>] ||= <span class="string">"192.168.10.10"</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>Laravel</code> 的 <code>Homestead</code> 里面，安装及配置 <code>natapp</code></p><p>内网穿透的要点：</p><ol><li>首先要安装 <code>natapp</code> 服务，使得可以通过某个 <code>xx.xx.natapp.cc</code> 网址来访问本机的服务。</li><li>然后是 <code>natapp</code> 默认访问本地 80 端口的服务，即 <code>127.0.0.1:80</code> ，也就是需要通过 <code>apache</code> 或者 <code>nginx</code> 等服务器，把 Laravel 的服务放到这里。</li><li>由于我用的是 <code>Homestead</code>，经过尝试，直接把 <code>natapp</code> 安装到 <code>Homestead</code> 里面的系统是最方便的，少了转发，这也是一个 <code>Ubuntu</code> 的环境。</li><li>然后就是要配合<strong>微信公众平台</strong>的要求，填写对应的域名地址，放置验证文件。</li></ol><p>详细步骤：</p><p>​    以下都需要在 <code>Homestead</code> 中进行，即先运行 <code>vagrant ssh</code> ：</p><ol><li><p>从 <a href="https://natapp.cn/#download" target="_blank" rel="noopener">natapp</a> 下载程序</p><p>由于要安装到 <code>Homestead</code> 中，所以选择的是 Linux 64位 版本。解压缩后只有一个文件，移动到某个目录。</p></li><li><p>从 <a href="https://natapp.cn/article/config_ini" target="_blank" rel="noopener">config.ini</a> 下载配置文件</p><p>配置文件如下，一般只需要修改 <code>authtoken</code> 就行了，它的值从 <a href="https://natapp.cn/tunnel/lists" target="_blank" rel="noopener">隧道列表</a> <code>natapp</code> 网站查询。需要日志的话，修改 <code>log</code> 字段。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将本文件放置于natapp同级目录 程序将读取 [default] 段</span></span><br><span class="line"><span class="comment">#在命令行参数模式如 natapp -authtoken=xxx 等相同参数将会覆盖掉此配置</span></span><br><span class="line"><span class="comment">#命令行参数 -config= 可以指定任意config.ini文件</span></span><br><span class="line">[default]</span><br><span class="line">authtoken=       <span class="comment">#对应一条隧道的authtoken</span></span><br><span class="line">clienttoken=     <span class="comment">#对应客户端的clienttoken,将会忽略authtoken,若无请留空,</span></span><br><span class="line"><span class="built_in">log</span>=             <span class="comment">#log 日志文件,可指定本地文件, none=不做记录,stdout=直接屏幕输出 ,默认为none</span></span><br><span class="line">loglevel=ERROR   <span class="comment">#日志等级 DEBUG, INFO, WARNING, ERROR 默认为 DEBUG</span></span><br><span class="line">http_proxy=      <span class="comment">#代理设置 如 http://10.123.10.10:3128 非代理上网用户请务必留空</span></span><br></pre></td></tr></table></figure></li><li><p>启动 <code>natapp</code></p><p>启动之前需要确保默认的地址 <code>127.0.0.1:80</code> 是可以访问的，可以是 Apache 默认的 <code>index.html</code>，或者是微信 web 开发的应用。由于我这里安装到了 <code>Homestead</code> 里面，其配置文件里面配置了 <code>- map: 192.168.1.61    to: /home/vagrant/Code/code/wechat-app/public</code>，所以默认打开的就是微信开发的 Laravel。</p><p>Windows 下，直接双击 <code>natapp.exe</code> 即可。</p><p>在 Linux 和 Mac 下，需要先赋予执行的权限，然后再运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x natapp</span><br><span class="line"></span><br><span class="line">./natapp</span><br></pre></td></tr></table></figure></li><li><p>在 Linux 后台运行 <code>natapp</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nohup ./natapp -authtoken=xxxx -<span class="built_in">log</span>=stdout &amp;</span><br><span class="line"></span><br><span class="line">// 注意一定要加上 -<span class="built_in">log</span>=stdout</span><br></pre></td></tr></table></figure></li></ol><p>在 <code>log=none</code> 时，启动成功后界面如下</p><p><img src="/images/natapp.png" alt="natapp"></p><p>这个时候，如果访问 <code>xx.xx.natapp.cc</code> 就可以看到微信开发的页面了。如果没有正确配置本地的 80 端口服务，那 <code>natapp</code> 应用无法正确启动。</p><p>不过如果还没有更改<a href="https://mp.weixin.qq.com" target="_blank" rel="noopener">微信公众平台</a>里面的服务器地址的话，应该获取不到信息。</p></li><li><p>修改<a href="https://mp.weixin.qq.com" target="_blank" rel="noopener">微信公众平台</a>配置</p><ol><li><p>基本配置—服务器地址</p><p><code>服务器地址   http://xxx.xxx.natapp.cc/wechat</code></p></li><li><p>公众号设置—功能设置</p><p><code>网页授权域名    xxx.xxx.natapp.cc</code></p><p><code>JS接口安全域名    xxx.xxx.natapp.cc</code></p><p>业务域名也可以设置一下</p><p>其中，配置域名的话，需要先放置<strong>验证文件</strong>，之前的验证文件很可能只放到了在线环境中，现在需要在本地环境也配置一份。</p></li><li><p>配置的时候需要验证，有可能失败，多试几次。</p></li></ol></li><li><p>本地运行 api 项目</p><p>由于此项目为了以后开发客户端方便，采用的是，api 和 微信页面前端分离的开发方式，有两个 Laravel 工程，所以还需要再配置一套 <code>natapp</code> 服务。</p><p>一开始的思考被 <code>Homestead</code> 局限了，一直想着怎么在 <code>Homestead</code> 中再搭一套 <code>natapp</code> 服务，其实完全可以在 <code>Homestead</code> 外面搭两套 <code>natapp</code>的服务。</p><p>通过 <code>php artisan serve --port=8800</code>，就可以在本机运行 Laravel 项目，用 <code>Homestead</code> 是为了省去环境配置的问题，方便统一管理。</p><p>具体步骤：</p><ol><li>在 <a href="https:/natapp.cn" target="_blank" rel="noopener">natapp</a> 官网，再开通一个隧道，开通的时候端口设为 <code>8080</code>，以免与本地 <code>80</code>端口冲突。</li><li>在本地，<code>Homestead</code> 外启动 Laravel 项目，<code>php artisan serve --port=8080</code>。可能需要配置一下环境，主要是 PHP 7.1 及其相关的依赖。</li><li>修改前端的工程 <code>env文件</code>，配置 <code>API_APP_URL=http://xxx.xxx.natapp.cc</code>。</li></ol><p>这时候，应该就能本地开发了，不用传 git，直接本地测试。</p></li></ol><p>参考链接：</p><ul><li><p><a href="https://www.caiyiming.com/article/201610271424.html" target="_blank" rel="noopener">局域网访问 Homestead 站点</a></p></li><li><p><a href="http://blog.csdn.net/xyang81/article/details/52141881" target="_blank" rel="noopener">本地调试微信接口（内网穿透到外网）</a></p></li><li><p><a href="https://natapp.cn/article/natapp_newbie" target="_blank" rel="noopener">NATAPP1分钟快速新手图文教程</a></p></li><li><p><a href="https://natapp.cn/article/nohup" target="_blank" rel="noopener">linux后台运行natapp(ngrok)教程</a></p></li><li><p><a href="https://natapp.cn/article/wechat_local_debug" target="_blank" rel="noopener">用Natapp(ngrok)进行微信本地开发调试</a></p></li><li><p><a href="https://natapp.cn/article/config_ini" target="_blank" rel="noopener">使用本地配置文件config.ini</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天尝试搭建了微信 web 开发的本地环境。&lt;/p&gt;
&lt;p&gt;主要是利用 &lt;a href=&quot;https://natapp.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;natapp&lt;/a&gt; 来进行内网穿透，拦截微信发送的认证链接之后回调的链接，导流到本地，从而不用把代码上传到服务器。微信认为是服务器的地址，其实是本地的服务地址。&lt;/p&gt;
    
    </summary>
    
    
      <category term="微信 web 开发" scheme="http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1-web-%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="Laravel" scheme="http://yoursite.com/tags/Laravel/"/>
    
      <category term="微信" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="微信web开发" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1web%E5%BC%80%E5%8F%91/"/>
    
      <category term="easywechat" scheme="http://yoursite.com/tags/easywechat/"/>
    
      <category term="natapp" scheme="http://yoursite.com/tags/natapp/"/>
    
  </entry>
  
  <entry>
    <title>搭建 Ubuntu 上的开发环境</title>
    <link href="http://yoursite.com/2017/11/27/Ubuntu-init/"/>
    <id>http://yoursite.com/2017/11/27/Ubuntu-init/</id>
    <published>2017-11-27T06:31:59.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>觉得有必要整理一下拿到一个新的系统，VPS，Docker 之后，需要做的操作，以便让系统能用，更好用。</p><p>先记下来，之后再整理成脚本吧。</p><p><code># todo 去 Github 搜搜，应该有其他人的</code></p><a id="more"></a><h3 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h3><ul><li>第八次更新：2018年3月26日</li></ul><p>添加 node-sass 等 npm 的镜像</p><p>添加 telegram ppa 源</p><ul><li>第七次更新：2018年3月13日</li></ul><p>添加，安装解压缩 7z 的软件</p><ul><li>第六次更新：2018年3月9日</li></ul><p>更新，如果给 Python3.6 安装 sqlite3</p><ul><li>第五次更新：2018年3月6日</li></ul><p>添加 安装 Okular，PDF 阅读软件</p><ul><li>第四次更新：2018年3月2日</li></ul><p>添加 更新 Python3 最新版的方法</p><ul><li>第三次更新：2018年2月27日</li></ul><ol><li>给 pip 源阿里源</li><li>更新 alias</li><li>添加 安装截图工具</li><li>添加 安装 tree，树型展示目录的工具</li><li>添加 安装 Fillezilla 和 Hexo</li><li>添加 安装 Postman</li><li>添加 安装 mongoDB</li><li>添加 安装 Redis</li><li>重构，添加目录</li></ol><ul><li>第二次更新：2018年1月3日</li></ul><p>这次是真正的重装了 Ubuntu，从头开始装的。</p><p>重装的原因是运行了 <code>sudo apt remove python</code>，这条命令。结果把很多依赖于 <strong>Python</strong> 的软件都给删除了。。。重启进入系统后，桌面空空的，啥都没有了。</p><ul><li>第一次更新：2017年11月27日</li></ul><hr><h3 id="基础配置-amp-修改系统设置"><a href="#基础配置-amp-修改系统设置" class="headerlink" title="基础配置 &amp; 修改系统设置"></a>基础配置 &amp; 修改系统设置</h3><h4 id="添加-sudo-密码"><a href="#添加-sudo-密码" class="headerlink" title="添加 sudo 密码"></a>添加 sudo 密码</h4><p><code>sudo passwd</code></p><h4 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h4><p>从 <strong>软件和更新</strong>，换清华源</p><p>或者手动换源</p><p><code>sudo vi /etc/apt/sources.list</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清华源</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricted</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to</span></span><br><span class="line"><span class="comment"># newer versions of the distribution.</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted</span><br><span class="line"><span class="comment"># deb-src http://cn.archive.ubuntu.com/ubuntu/ xenial main restricted</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Major bug fix updates produced after the final release of the</span></span><br><span class="line"><span class="comment">## distribution.</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted</span><br><span class="line"><span class="comment"># deb-src http://cn.archive.ubuntu.com/ubuntu/ xenial-updates main restricted</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu</span></span><br><span class="line"><span class="comment">## team, and may not be under a free licence. Please satisfy yourself as to</span></span><br><span class="line"><span class="comment">## your rights to use the software. Also, please note that software in</span></span><br><span class="line"><span class="comment">## universe WILL NOT receive any review or updates from the Ubuntu security</span></span><br><span class="line"><span class="comment">## team.</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial universe</span><br><span class="line"><span class="comment"># deb-src http://cn.archive.ubuntu.com/ubuntu/ xenial universe</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates universe</span><br><span class="line"><span class="comment"># deb-src http://cn.archive.ubuntu.com/ubuntu/ xenial-updates universe</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu </span></span><br><span class="line"><span class="comment">## team, and may not be under a free licence. Please satisfy yourself as to </span></span><br><span class="line"><span class="comment">## your rights to use the software. Also, please note that software in </span></span><br><span class="line"><span class="comment">## multiverse WILL NOT receive any review or updates from the Ubuntu</span></span><br><span class="line"><span class="comment">## security team.</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial multiverse</span><br><span class="line"><span class="comment"># deb-src http://cn.archive.ubuntu.com/ubuntu/ xenial multiverse</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates multiverse</span><br><span class="line"><span class="comment"># deb-src http://cn.archive.ubuntu.com/ubuntu/ xenial-updates multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## N.B. software from this repository may not have been tested as</span></span><br><span class="line"><span class="comment">## extensively as that contained in the main release, although it includes</span></span><br><span class="line"><span class="comment">## newer versions of some applications which may provide useful features.</span></span><br><span class="line"><span class="comment">## Also, please note that software in backports WILL NOT receive any review</span></span><br><span class="line"><span class="comment">## or updates from the Ubuntu security team.</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src http://cn.archive.ubuntu.com/ubuntu/ xenial-backports main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Uncomment the following two lines to add software from Canonical's</span></span><br><span class="line"><span class="comment">## 'partner' repository.</span></span><br><span class="line"><span class="comment">## This software is not part of Ubuntu, but is offered by Canonical and the</span></span><br><span class="line"><span class="comment">## respective vendors as a service to Ubuntu users.</span></span><br><span class="line"><span class="comment"># deb http://archive.canonical.com/ubuntu xenial partner</span></span><br><span class="line"><span class="comment"># deb-src http://archive.canonical.com/ubuntu xenial partner</span></span><br><span class="line"></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted</span><br><span class="line"><span class="comment"># deb-src http://security.ubuntu.com/ubuntu xenial-security main restricted</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security universe</span><br><span class="line"><span class="comment"># deb-src http://security.ubuntu.com/ubuntu xenial-security universe</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security multiverse</span><br><span class="line"><span class="comment"># deb-src http://security.ubuntu.com/ubuntu xenial-security multiverse</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 阿里源</span></span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><h4 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h4><p><code>sudo apt update</code>  <code>sudo apt upgrade</code></p><h4 id="安装语言"><a href="#安装语言" class="headerlink" title="安装语言"></a>安装语言</h4><p>可以从 <strong>设置</strong> –&gt; <strong>语言支持</strong> 中修改，这一步需要下载更新，所以需要先配置好源</p><h4 id="修改时间显示"><a href="#修改时间显示" class="headerlink" title="修改时间显示"></a>修改时间显示</h4><p>从 <strong>系统设置</strong> 中修改 <strong>时间和日期</strong>，使得右上角的 <strong>时钟</strong> 显示日期和星期</p><h4 id="修改-打开终端-和-锁定屏幕-的快捷键"><a href="#修改-打开终端-和-锁定屏幕-的快捷键" class="headerlink" title="修改 打开终端 和 锁定屏幕 的快捷键"></a>修改 <strong>打开终端</strong> 和 <strong>锁定屏幕</strong> 的快捷键</h4><h4 id="修改亮屏时间"><a href="#修改亮屏时间" class="headerlink" title="修改亮屏时间"></a>修改亮屏时间</h4><h4 id="消除-“对不起-ubuntu-16-04-出现了内部错误”"><a href="#消除-“对不起-ubuntu-16-04-出现了内部错误”" class="headerlink" title="消除 “对不起 ubuntu 16.04 出现了内部错误”"></a>消除 “对不起 ubuntu 16.04 出现了内部错误”</h4><p><code>sudo apt remove apport</code></p><h4 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h4><p> YaHeiConsolas.ttf，在 git repo 中，或者在整理的 APPs 中</p><h4 id="添加-alias"><a href="#添加-alias" class="headerlink" title="添加 alias"></a>添加 alias</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">vi .bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">'ls -AlhF --color=auto'</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">'ls -lhF --color=auto'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># alias hp='http_proxy=http://127.0.0.1:6060'</span></span><br><span class="line"><span class="comment"># alias hps='https_proxy=http://127.0.0.1:6060'</span></span><br><span class="line"><span class="comment"># 需要先安装 privoxy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方便 git 提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git alias</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> ga=<span class="string">'git add .'</span></span><br><span class="line"><span class="built_in">alias</span> gb=<span class="string">'git branch'</span></span><br><span class="line"><span class="built_in">alias</span> gcm=<span class="string">' git commit -m'</span></span><br><span class="line"><span class="built_in">alias</span> gd=<span class="string">'git diff'</span></span><br><span class="line"><span class="built_in">alias</span> gpu=<span class="string">'git push'</span></span><br><span class="line"><span class="built_in">alias</span> gpl=<span class="string">'git pull'</span></span><br><span class="line"><span class="built_in">alias</span> gpo=<span class="string">'git push -u origin master'</span></span><br><span class="line"><span class="built_in">alias</span> gl=<span class="string">'git ll'</span></span><br><span class="line"><span class="built_in">alias</span> gs=<span class="string">'git status'</span></span><br><span class="line"><span class="built_in">alias</span> gi=<span class="string">'git init'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo alias</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> hg=<span class="string">'hexo g'</span></span><br><span class="line"><span class="built_in">alias</span> hs=<span class="string">'hexo s'</span></span><br><span class="line"><span class="built_in">alias</span> hd=<span class="string">'hexo d'</span></span><br><span class="line"><span class="built_in">alias</span> hn=<span class="string">'hexo new'</span></span><br><span class="line"><span class="built_in">alias</span> hnd=<span class="string">'hexo new draft'</span></span><br><span class="line"><span class="built_in">alias</span> hp=<span class="string">'hexo publish'</span></span><br><span class="line"><span class="built_in">alias</span> hc=<span class="string">'hexo clean'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># other alias</span></span><br><span class="line"><span class="built_in">alias</span> crr=<span class="string">'create-react-app'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> .bashrc <span class="comment"># 注意切换 bash 环境 su - username</span></span><br></pre></td></tr></table></figure><h4 id="添加镜像，仓库代理"><a href="#添加镜像，仓库代理" class="headerlink" title="添加镜像，仓库代理"></a>添加镜像，仓库代理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm</span></span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者直接编辑文件，下面三个为 node-sass、electron 和 phantomjs 的镜像，防止从 github 下载</span></span><br><span class="line">vi ~/.npmrc</span><br><span class="line"></span><br><span class="line">registry=https://registry.npm.taobao.org</span><br><span class="line">sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br><span class="line">phantomjs_cdnurl=https://npm.taobao.org/mirrors/phantomjs/</span><br><span class="line">electron_mirror=https://npm.taobao.org/mirrors/electron/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置后可通过下面方式来验证是否成功</span></span><br><span class="line">npm config get registry</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">npm info express</span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org</span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> proxy=<span class="string">"http://127.0.0.1:6060"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip</span></span><br><span class="line"></span><br><span class="line">vi ~/.pip/pip.conf</span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line">index-url = http://pypi.douban.com/simple</span><br><span class="line">trusted-host = pypi.douban.com</span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line">index-url = http://mirrors.aliyun.com/pypi/simple</span><br><span class="line">trusted-host = mirrors.aliyun.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阿里云的源貌似更新一些</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个设置的单个账户的，换了账户需要重新设置。</span></span><br><span class="line"><span class="comment"># 有可能没有 .pip 这个目录，可能需要先创建</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># composer</span></span><br><span class="line"></span><br><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker</span></span><br><span class="line"></span><br><span class="line">sudo vi /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://registry.docker-cn.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Git-相关"><a href="#Git-相关" class="headerlink" title="Git 相关"></a>Git 相关</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git ll</span></span><br><span class="line"> </span><br><span class="line">git config --global alias.ll <span class="string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git push</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 添加一个文件 git-sh.sh ，输入以下内容，到仓库目录下</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment"># Linux platform bash file</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"正在添加文件..."</span></span><br><span class="line">git add .</span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"正在提交备注...，请填写备注（可空）:"</span></span><br><span class="line"><span class="built_in">read</span> remarks</span><br><span class="line"><span class="keyword">if</span> [ ! -n <span class="string">"<span class="variable">$remarks</span>"</span> ];<span class="keyword">then</span></span><br><span class="line">    remarks=<span class="string">"常规提交"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">git commit -m <span class="string">"<span class="variable">$remarks</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"正在开始提交代码..."</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"代码提交成功，正在关闭..."</span></span><br></pre></td></tr></table></figure><h4 id="添加-exfat-支持"><a href="#添加-exfat-支持" class="headerlink" title="添加 exfat 支持"></a>添加 <strong>exfat</strong> 支持</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install exfat-utils</span><br></pre></td></tr></table></figure><h3 id="卸载软件"><a href="#卸载软件" class="headerlink" title="卸载软件"></a>卸载软件</h3><h4 id="Libreoffice"><a href="#Libreoffice" class="headerlink" title="Libreoffice"></a>Libreoffice</h4><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><h4 id="deb包-管理工具"><a href="#deb包-管理工具" class="headerlink" title="deb包 管理工具"></a>deb包 管理工具</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gdebi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 右键选中一个 deb包 可以改为默认打开方式</span></span><br></pre></td></tr></table></figure><h4 id="搜狗输入法"><a href="#搜狗输入法" class="headerlink" title="搜狗输入法"></a>搜狗输入法</h4><p>通过下载 deb 包，<a href="https://pinyin.sogou.com/linux/" target="_blank" rel="noopener">这里</a></p><h4 id="完整版-Vim"><a href="#完整版-Vim" class="headerlink" title="完整版 Vim"></a>完整版 Vim</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove vim-common</span><br><span class="line"></span><br><span class="line">sudo apt install vim</span><br></pre></td></tr></table></figure><h4 id="播放器-mpv"><a href="#播放器-mpv" class="headerlink" title="播放器 mpv"></a>播放器 mpv</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:mc3man/mpv-tests</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">sudo apt install mpv</span><br></pre></td></tr></table></figure><h4 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h4><ol><li><p>添加签名密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -q -O - http://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -</span><br></pre></td></tr></table></figure></li><li><p>添加软件源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c <span class="string">'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" &gt;&gt; /etc/apt/sources.list.d/google.list'</span></span><br></pre></td></tr></table></figure></li><li><p>安装 Google Chrome</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install google-chrome-stable</span><br></pre></td></tr></table></figure></li></ol><h4 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给 Ubuntu 安装 ss-qt5</span></span><br><span class="line"></span><br><span class="line">sudo add-apt-repository ppa:hzwhuang/ss-qt5</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">sudo apt install shadowsocks-qt5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给 Chrome 安装 SwitchyOmega 扩展，然后配置 规则 gfwlist</span></span><br><span class="line"></span><br><span class="line">https://github.com/FelisCatus/SwitchyOmega/releases</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 同步 Chrome 设置</span></span><br></pre></td></tr></table></figure><h4 id="Privoxy"><a href="#Privoxy" class="headerlink" title="Privoxy"></a>Privoxy</h4><p>privoxy 可以将 Socks 代理转换为 Http 代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 privoxy</span></span><br><span class="line">sudo apt install python-m2crypto privoxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 privoxy</span></span><br><span class="line">sudo vi /etc/privoxy/config</span><br><span class="line"></span><br><span class="line">listen-address localhost:6060  <span class="comment"># privoxy 会监听本地的 6060 端口，接受请求</span></span><br><span class="line"></span><br><span class="line">forward-socks5 / 127.0.0.1:1080 . <span class="comment"># 将上一步 6060 端口监听到的请求转发到 1080 端口，然后由 shadowsocks 通过 socks 方式进行处理，注意最后的 点. 不要丢失</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 privoxy</span></span><br><span class="line">sudo service privoxy restart</span><br></pre></td></tr></table></figure><h4 id="Proxychains"><a href="#Proxychains" class="headerlink" title="Proxychains"></a>Proxychains</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rofl0r/proxychains-ng.git</span><br><span class="line"><span class="built_in">cd</span> proxychains-ng</span><br><span class="line">./configure</span><br><span class="line">(sudo) make &amp;&amp; make install</span><br><span class="line">cp ./src/proxychains.conf /etc/proxychians.conf</span><br><span class="line"><span class="built_in">cd</span> .. &amp;&amp; rm -rf proxychains-ng</span><br></pre></td></tr></table></figure><p>修改配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/proxychains.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推荐配置</span></span><br><span class="line">strict_chain</span><br><span class="line">proxy_dns </span><br><span class="line">remote_dns_subnet 224</span><br><span class="line">tcp_read_time_out 15000</span><br><span class="line">tcp_connect_time_out 8000</span><br><span class="line">localnet 127.0.0.0/255.0.0.0</span><br><span class="line">quiet_mode</span><br><span class="line"></span><br><span class="line">[ProxyList]</span><br><span class="line">socks5  127.0.0.1 1080</span><br></pre></td></tr></table></figure><p>测试 <code>proxychains4 wget https://www.dropbox.com -v -O /dev/null</code></p><h4 id="Openssh-server"><a href="#Openssh-server" class="headerlink" title="Openssh-server"></a>Openssh-server</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openssh-server</span><br></pre></td></tr></table></figure><h4 id="JetBrains-Toolbox-App"><a href="#JetBrains-Toolbox-App" class="headerlink" title="JetBrains Toolbox App"></a>JetBrains Toolbox App</h4><p>通过下载 <a href="https://www.jetbrains.com/toolbox/app/" target="_blank" rel="noopener">deb包</a>，然后安装 PhpStorm，PyCharm，WebStorm</p><h4 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h4><p>typora 是一个全平台通用的 Markdown 写作工具</p><p>需要翻墙，配置 provixy 后，全局代理之后 <code>apt update</code> 才能用，然后才能安装 </p><p><strong>更新时也要启用全局代理才能获取更新</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># optional, but recommended</span></span><br><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span><br><span class="line"></span><br><span class="line"><span class="comment"># add Typora's repository</span></span><br><span class="line">sudo add-apt-repository <span class="string">'deb https://typora.io ./linux/'</span></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># install typora</span></span><br><span class="line">sudo apt install typora</span><br></pre></td></tr></table></figure><h4 id="Node-amp-Npm"><a href="#Node-amp-Npm" class="headerlink" title="Node &amp; Npm"></a>Node &amp; Npm</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 *.tar.xz 后</span></span><br><span class="line">tar -xvJf node-*.tar.xz</span><br><span class="line"><span class="comment"># 移动 node-* 到 /opt 目录下并重命名为 node</span></span><br><span class="line">sudo mv node-* /opt/node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分别为 node 和 npm 创建软连接，以便可以在任意目录中执行。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为node创建软连接</span></span><br><span class="line">sudo ln -s /opt/node/bin/node /usr/<span class="built_in">local</span>/bin/node</span><br><span class="line"><span class="comment"># 为npm创建软连接</span></span><br><span class="line">sudo ln -s /opt/node/bin/npm /usr/<span class="built_in">local</span>/bin/npm</span><br><span class="line"><span class="comment"># 查看node版本</span></span><br><span class="line">node -v</span><br><span class="line"><span class="comment"># 查看npm版本</span></span><br><span class="line">npm -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级 npm 到最新版</span></span><br><span class="line">sudo npm i npm@latest -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 n 管理 node 版本</span></span><br><span class="line">sudo npm i n -g</span><br></pre></td></tr></table></figure><h4 id="Python2-和-Python3"><a href="#Python2-和-Python3" class="headerlink" title="Python2 和 Python3"></a>Python2 和 Python3</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-pip python-dev build-essential </span><br><span class="line"></span><br><span class="line">// 先要按照下面写的，配置 pip 源</span><br><span class="line">sudo pip install --upgrade pip </span><br><span class="line">sudo pip install --upgrade virtualenv </span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新 Python3 到最新版</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先安装 Sqlite3，再编译安装 Python3.6，因为python3没有自带sqlite3相关方面的支持，要自己先安装然后再重新编译Python。</span></span><br><span class="line"></span><br><span class="line">sudo apt install libsqlite3-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后继续下面的步骤，编译安装 Python3.6。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译安装方式，推荐通过这种方式来安装，因为我发现通过 ppa 方式安装的话，某些包并不会被安装，还是支持 Python3.5 版本的，需要升级到 Python3.6 版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先从官网下载 *.tar.xz 版本安装包</span></span><br><span class="line">wget https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tar.xz</span><br><span class="line"></span><br><span class="line">tar -xvJf Python-3.6.4.tar.xz</span><br><span class="line"><span class="built_in">cd</span> Python-3.6.4.tar.xz</span><br><span class="line"></span><br><span class="line">./configure</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.4 之后会默认一起安装 pip3 和 setuptools</span></span><br><span class="line"><span class="comment"># 可能需要配置一下软链接</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ppa 方式</span></span><br><span class="line">sudo add-apt-repository ppa:jonathonf/python-3.6</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python3.6</span><br><span class="line"></span><br><span class="line">sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.5 1</span><br><span class="line">sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 2</span><br><span class="line">sudo update-alternatives --config python3</span><br><span class="line"></span><br><span class="line">sudo apt-get install python3.6-dev</span><br><span class="line">sudo apt-get install python3.6-gdbm</span><br><span class="line"></span><br><span class="line"><span class="comment"># No module named "apt_pkg"</span></span><br><span class="line">$ sudo apt-get remove --purge python-apt  </span><br><span class="line">$ sudo apt-get install python-apt -f  </span><br><span class="line">$ sudo find / -name <span class="string">"apt_pkg.cpython-35m-x86_64-linux-gnu.so"</span>  </span><br><span class="line">$ <span class="built_in">cd</span> /usr/lib/python3/dist-packages/  </span><br><span class="line">$ sudo cp apt_pkg.cpython-35m-x86_64-linux-gnu.so apt_pkg.cpython-36m-x86_64-linux-gnu.so   </span><br><span class="line"></span><br><span class="line"><span class="comment"># ImportError: cannot import name '_gi'</span></span><br><span class="line"><span class="built_in">cd</span> /usr/lib/python3/dist-packages/gi/</span><br><span class="line">$ sudo cp _gi.cpython-35m-x86_64-linux-gnu.so _gi.cpython-36m-x86_64-linux-gnu.so  </span><br><span class="line">$ sudo cp _gi_cairo.cpython-35m-x86_64-linux-gnu.so _gi_cairo.cpython-36m-x86_64-linux-gnu.so</span><br></pre></td></tr></table></figure><h4 id="PHP-和-composer"><a href="#PHP-和-composer" class="headerlink" title="PHP 和 composer"></a>PHP 和 composer</h4><ol><li><p>安装 ppa 支持，或许需要<br><code>sudo apt install -y software-properties-common</code></p></li><li><p>增加 php ppa<br><code>sudo LC_ALL=en_US.UTF-8 add-apt-repository ppa:ondrej/php</code></p></li><li><p>安装 php7.1 以及 laravel 需要的 PHP 模块，可能还需要其他模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y php7.1-mysql php7.1-fpm</span><br><span class="line">sudo apt install -y php7.1-curl php7.1-xml php7.1-mcrypt php7.1-json php7.1-gd php7.1-mbstring</span><br></pre></td></tr></table></figure></li><li><p>配置 PHP<br><code>sudo vim /etc/php5/fpm/php.ini</code></p><p>打开 PHP 配置文件，找到<code>cgi.fix_pathinfo</code>选项，去掉它前面的注释分号;，然后将它的值设置为0,如下<br><code>cgi.fix_pathinfo=0</code></p><p><code>sudo vi /etc/php/7.1/fpm/pool.d/www.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen = /var/run/php7.1-fpm.sock</span><br></pre></td></tr></table></figure></li><li><p>安装 composer</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 curl -sS  https://getcomposer.org/installer | php</span><br><span class="line">php composer.phar --version</span><br><span class="line">sudo mv composer.phar /usr/<span class="built_in">local</span>/bin/composer</span><br><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure></li></ol><h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Uninstall old versions</span></span><br><span class="line">sudo apt-get remove docker docker-engine docker.io</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install packages to allow apt to use a repository over HTTPS</span></span><br><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Add Docker’s official GPG key</span></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="comment"># Verify that you now have the key with the fingerprint 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88, by searching for the last 8 characters of the fingerprint.</span></span><br><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br><span class="line"></span><br><span class="line"><span class="comment"># set up the stable repository</span></span><br><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable"</span></span><br><span class="line">   </span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install docker-ce  <span class="comment"># 最好启用一个全局代理，否则太慢</span></span><br></pre></td></tr></table></figure><h4 id="系统工具"><a href="#系统工具" class="headerlink" title="系统工具"></a>系统工具</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install htop  <span class="comment"># 系统监控</span></span><br><span class="line"></span><br><span class="line">sudo apt install nload  <span class="comment"># 网络</span></span><br><span class="line"></span><br><span class="line">sudo apt install tree  <span class="comment"># 展示树形目录</span></span><br></pre></td></tr></table></figure><h4 id="Dropbox"><a href="#Dropbox" class="headerlink" title="Dropbox"></a>Dropbox</h4><p>下载 deb包，<a href="https://www.dropbox.com/install" target="_blank" rel="noopener">https://www.dropbox.com/install</a></p><p>安装完 dropbox 的程序后，通过此命令 <code>proxychains dropbox start -i</code> 下载最新完整安装包，然后同步。</p><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><p><code>sudo apt install mysql-server</code></p><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把 目录 分配给 nginx</span></span><br><span class="line">sudo chown -R www-data:www-data /var/www</span><br><span class="line">sudo chown -R www-data:www-data /var/www/项目目录</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给 storage 权限</span></span><br><span class="line">chmod 775 -R storage/</span><br></pre></td></tr></table></figure><h4 id="WPS"><a href="#WPS" class="headerlink" title="WPS"></a>WPS</h4><p>从 <a href="http://wps-community.org/download.html?vl=a21#download" target="_blank" rel="noopener">这里</a> 下载最新版<br>记得装字体包，否则中文显示很奇怪</p><h4 id="VNC-Viewer"><a href="#VNC-Viewer" class="headerlink" title="VNC Viewer"></a>VNC Viewer</h4><p>从 <a href="https://www.realvnc.com/en/connect/download/viewer/linux/" target="_blank" rel="noopener">这里</a> 下载 deb 版本的包</p><h4 id="FileZilla"><a href="#FileZilla" class="headerlink" title="FileZilla"></a>FileZilla</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c <span class="string">'echo "deb http://archive.getdeb.net/ubuntu xenial-getdeb apps" &gt;&gt; /etc/apt/sources.list.d/getdeb.list'</span></span><br><span class="line"></span><br><span class="line">wget -q -O - http://archive.getdeb.net/getdeb-archive.key | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">sudo apt install filezilla</span><br></pre></td></tr></table></figure><h4 id="截图工具"><a href="#截图工具" class="headerlink" title="截图工具"></a>截图工具</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shutter</span></span><br><span class="line">sudo add-apt-repository ppa:shutter/ppa</span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install shutter</span><br><span class="line"></span><br><span class="line"><span class="comment"># deepin-scrot</span></span><br><span class="line">wget http://packages.linuxdeepin.com/deepin/pool/main/d/deepin-scrot/deepin-scrot_2.0-0deepin_all.deb</span><br><span class="line"></span><br><span class="line">sudo dpkg -i deepin-scrot_2.0-0deepin_all.deb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后配置快捷键</span></span><br></pre></td></tr></table></figure><h4 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.pstmn.io/download/latest/linux64 -O postman.tar.gz</span><br><span class="line">sudo tar -xzf postman.tar.gz -C /opt</span><br><span class="line">rm postman.tar.gz</span><br><span class="line">sudo ln -s /opt/Postman/Postman /usr/bin/postman</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 Ubuntu Unity launcher 添加快捷方式</span></span><br><span class="line"></span><br><span class="line">cat &gt; ~/.<span class="built_in">local</span>/share/applications/postman.desktop &lt;&lt;EOL</span><br><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Name=Postman</span><br><span class="line">Exec=postman</span><br><span class="line">Icon=/opt/Postman/resources/app/assets/icon.png</span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">Type=Application</span><br><span class="line">Categories=Development;</span><br><span class="line">EOL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参考链接：https://blog.bluematador.com/posts/postman-how-to-install-on-ubuntu-1604/?utm_source=hootsuite&amp;utm_medium=twitter&amp;utm_campaign=</span></span><br></pre></td></tr></table></figure><h4 id="mongoDB"><a href="#mongoDB" class="headerlink" title="mongoDB"></a>mongoDB</h4><p>折腾了半天，由于不想直接用 Ubuntu 自带的 apt 源安装，所以去 mongoDB 官网找，发现官网下载速度太慢，然后用了代理速度也上不去，只能去找镜像。</p><p>用了阿里云和腾讯云的镜像，都无法成功 <code>apt update</code>，只能作罢。</p><p>最终发现 <strong>清华的源</strong> 靠谱，成功安装。</p><p>或许换个时间，通过使用 <strong>阿里云</strong> 和 <strong>腾讯云</strong> 应该能起到同样的效果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加公钥</span></span><br><span class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 mirror 路径</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb https://mirrors.tuna.tsinghua.edu.cn/mongodb/apt/ubuntu xenial/mongodb-org/stable multiverse"</span> | sudo tee /etc/apt/sources.list.d/mongodb.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新 apt 源</span></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo apt install -y mongodb-org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">sudo service mongod start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否启动成功</span></span><br><span class="line">浏览器访问 http://localhost:27017/，看到 `It looks like you are trying to access MongoDB over HTTP on the native driver port`. 表示安装和启动成功</span><br><span class="line"></span><br><span class="line">或者 </span><br><span class="line"></span><br><span class="line">vi /var/<span class="built_in">log</span>/mongodb/mongod.log</span><br><span class="line"></span><br><span class="line">看到 `[initandlisten] waiting <span class="keyword">for</span> connections on port 27017`，表示安装和启动成功</span><br></pre></td></tr></table></figure><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><p>同样由于 Ubuntu 自带的源比较旧，这里采用新的源安装，在 <a href="https://launchpad.net/" target="_blank" rel="noopener">https://launchpad.net/</a> 搜索 redis-server，找到一个可以用的源，进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:chris-lea/redis-server</span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">sudo apt install redis-server</span><br></pre></td></tr></table></figure><p>修改配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># bind 127.0.0.1   给这行加上注释，就可以远程访问了</span></span><br><span class="line"></span><br><span class="line">requirepass password  <span class="comment"># 打开注释，设置访问密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置了密码后，需要通过</span></span><br><span class="line">redis-cli -a password <span class="comment"># 来访问 redis</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看状态 sudo /etc/init.d/redis-server status</span><br><span class="line">重启 sudo /etc/init.d/redis-server restart</span><br><span class="line">登陆 redis-cli -h host -p port -a password</span><br></pre></td></tr></table></figure><h4 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h4 id="Okular"><a href="#Okular" class="headerlink" title="Okular"></a>Okular</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Okular 是一个 PDF 阅读软件，支持注释。Ubuntu 自带的不能注释。</span></span><br><span class="line"></span><br><span class="line">sudo apt install okular</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不能正确显示中文，则需要安装下面的程序</span></span><br><span class="line">sudo apt-get install poppler-data</span><br><span class="line">sudo apt-get install poppler-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果依然不行，则可能是因为某些 pdf 文件没有明确指明字体，系统就会默认用英文字体来显示，于是导致中文字体显示失败！解决办法是：</span></span><br><span class="line"></span><br><span class="line">sudo vi /etc/fonts/conf.d/49-sansserif.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把</span></span><br><span class="line">&lt;edit name=<span class="string">"family"</span> mode=<span class="string">"append_last"</span>&gt;</span><br><span class="line">    &lt;string&gt;sans-serif&lt;/string&gt;</span><br><span class="line">&lt;/edit&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改为</span></span><br><span class="line">&lt;edit name=<span class="string">"family"</span> mode=<span class="string">"append_last"</span>&gt;</span><br><span class="line">    &lt;string&gt;monospace&lt;/string&gt;</span><br><span class="line">&lt;/edit&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果修改后的字体 monospace 依然不能显示，则可以改为 宋体 来显示！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此外，Foxit Reader 也不错</span></span><br></pre></td></tr></table></figure><h4 id="p7zip"><a href="#p7zip" class="headerlink" title="p7zip"></a>p7zip</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装方法：</span></span><br><span class="line"></span><br><span class="line">sudo apt install p7zip-full</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压文件：</span></span><br><span class="line">7z x manager.7z -r -o /home/xx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解释如下： </span></span><br><span class="line"><span class="comment"># x 代表解压缩文件，并且是按原始目录解压（还有个参数 e 也是解压缩文件，但其会将所有文件都解压到根下，而不是自己原有的文件夹下）manager.7z 是压缩文件，这里大家要换成自己的。如果不在当前目录下要带上完整的目录 </span></span><br><span class="line"><span class="comment"># -r 表示递归所有的子文件夹 </span></span><br><span class="line"><span class="comment"># -o 是指定解压到的目录，这里大家要注意-o后是没有空格的直接接目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩文件：</span></span><br><span class="line">7z a -t7z -r manager.7z /home/manager/*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解释如下： </span></span><br><span class="line"><span class="comment"># a 代表添加文件／文件夹到压缩包 </span></span><br><span class="line"><span class="comment"># -t 是指定压缩类型 一般我们定为7z </span></span><br><span class="line"><span class="comment"># -r 表示递归所有的子文件夹，manager.7z 是压缩好后的压缩包名，/home/manager/* 是要压缩的目录，＊是表示该目录下所有的文件。</span></span><br></pre></td></tr></table></figure><h4 id="Telegram"><a href="#Telegram" class="headerlink" title="Telegram"></a>Telegram</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:atareao/telegram</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">sudo apt install telegram</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">passwd + (name)  #设置密码</span><br><span class="line">vi /etc/sudoers  #把用户加入 sudo 组，仿照 root 写</span><br></pre></td></tr></table></figure><hr><p>参考链接：</p><ul><li><a href="http://www.linuxdiyf.com/linux/13715.html" target="_blank" rel="noopener">ubuntu下通过privoxy将Socks代理转换为Http代理</a></li><li><a href="http://shawnelee88.github.io/2015/07/10/proxychains-shadowsocks%E7%A5%9E%E5%99%A8/" target="_blank" rel="noopener">proxychains+shadowsocks神器</a></li><li><a href="https://cloud.tencent.com/document/product/213/8623#.E4.BD.BF.E7.94.A8.E8.85.BE.E8.AE.AF.E4.BA.91.E9.95.9C.E5.83.8F.E5.8A.A0.E9.80.9Fmongodb" target="_blank" rel="noopener">腾讯云软件源加速软件包下载和更新</a></li><li><a href="https://mirror.tuna.tsinghua.edu.cn/help/mongodb/" target="_blank" rel="noopener">清华大学开源软件镜像站</a></li><li><a href="http://blog.csdn.net/s_lisheng/article/details/78296177" target="_blank" rel="noopener">安装Python 3.6 在Ubuntu 16.04 LTS 版本</a></li><li><a href="https://askubuntu.com/questions/720416/no-module-named-gdbm" target="_blank" rel="noopener">No module named ‘gdbm’</a></li><li><a href="http://blog.csdn.net/jaket5219999/article/details/78464310" target="_blank" rel="noopener">更换python版本后出现 No module named “apt_pkg”</a></li><li><a href="http://blog.csdn.net/jaket5219999/article/details/78465251" target="_blank" rel="noopener">gnome-terminal 出错 ImportError: cannot import name ‘_gi’</a></li><li><a href="https://www.rosehosting.com/blog/how-to-install-python-3-6-on-ubuntu-16-04/" target="_blank" rel="noopener">How to Install Python 3.6 on Ubuntu 16.04</a></li><li><a href="http://blog.csdn.net/whuslei/article/details/7196218" target="_blank" rel="noopener">Ubuntu 下最好用的pdf阅读器okular</a></li><li><a href="http://blog.csdn.net/jeryjeryjery/article/details/79464352" target="_blank" rel="noopener">Ubuntu中Python3找不到_sqlite3模块</a></li><li><a href="http://blog.csdn.net/jq_ak47/article/details/52036542" target="_blank" rel="noopener">Ubuntu Linux 安装 .7z 解压和压缩文件</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;觉得有必要整理一下拿到一个新的系统，VPS，Docker 之后，需要做的操作，以便让系统能用，更好用。&lt;/p&gt;
&lt;p&gt;先记下来，之后再整理成脚本吧。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# todo 去 Github 搜搜，应该有其他人的&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="初始化" scheme="http://yoursite.com/tags/%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Git 仓库迁移</title>
    <link href="http://yoursite.com/2017/11/06/git-migrate/"/>
    <id>http://yoursite.com/2017/11/06/git-migrate/</id>
    <published>2017-11-06T08:04:35.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司重新规划了服务器，由于不想损失之前的 git 仓库，commit 等信息，所以需要对 git 仓库进行迁移。</p><p>经过尝试，记录如下。</p><a id="more"></a><p>有两个目录</p><ol><li>原来的 git 仓库，old.git</li><li>新的 git 仓库，new.git</li></ol><p>迁移步骤</p><ol><li><p>在新服务器新建 git bare 仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir new</span><br><span class="line"><span class="built_in">cd</span> new</span><br><span class="line">git init -- bare</span><br></pre></td></tr></table></figure></li><li><p>本地克隆旧的 git 仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --mirror  xx/../old.git</span><br><span class="line"><span class="built_in">cd</span> old.git</span><br></pre></td></tr></table></figure></li><li><p>最后推送到新的 git 仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">set</span>-url --push origin xx/.../new.git</span><br><span class="line">git push --mirror</span><br></pre></td></tr></table></figure></li></ol><p>网上还有下面的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1). 从原地址克隆一份裸版本库，比如原本托管于 GitHub。</span><br><span class="line"></span><br><span class="line">git clone --bare git://github.com/username/project.git</span><br><span class="line"></span><br><span class="line">2). 然后到新的 Git 服务器上创建一个新项目，比如 GitCafe。</span><br><span class="line"></span><br><span class="line">3). 以镜像推送的方式上传代码到 GitCafe 服务器上。</span><br><span class="line"></span><br><span class="line">cd project.git</span><br><span class="line"></span><br><span class="line">git push --mirror git@gitcafe.com/username/newproject.git</span><br><span class="line"></span><br><span class="line">4). 删除本地代码</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">rm -rf project.git</span><br><span class="line"></span><br><span class="line">5). 到新服务器 GitCafe 上找到 Clone 地址，直接 Clone 到本地就可以了。</span><br><span class="line"></span><br><span class="line">git clone git@gitcafe.com/username/newproject.git</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近公司重新规划了服务器，由于不想损失之前的 git 仓库，commit 等信息，所以需要对 git 仓库进行迁移。&lt;/p&gt;
&lt;p&gt;经过尝试，记录如下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="迁移" scheme="http://yoursite.com/tags/%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>微信开发遇到的坑</title>
    <link href="http://yoursite.com/2017/11/03/wechat-traps/"/>
    <id>http://yoursite.com/2017/11/03/wechat-traps/</id>
    <published>2017-11-03T06:59:23.000Z</published>
    <updated>2020-08-04T07:29:12.116Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间一直在进行微信 web 开发，遇到了一些坑，某些解决了，某些还在被坑着。。。</p><p>用的是 easywechat(PHP) + Laravel，前端用 Vue + Mint-UI 。</p><ol><li><p>new Date()</p><p>iOS 上 微信 web 浏览器是用 JavaScriptCore 解析，所以对于 <code>new Date()</code> 的支持比较严格，<code>new Date(&#39;2017-01-01&#39;)</code> 这种格式会返回 <code>NaN</code>，必须用 <code>new Date(&#39;2017/01/01&#39;)</code>这种格式，得用 <code>new Date(&#39;2017-01-01&#39;).replace(/-/g,&#39;/&#39;)</code>转换一下。</p></li></ol><a id="more"></a><ol start="2"><li><p>Mint-UI 的 Datetime Picker</p><p>调用 picker 后，滑动选择日期时后面的页面会跟着滚动，影响使用体验。发现官方一直没有修复这个问题，在 <a href="https://github.com/ElemeFE/mint-ui/issues/891" target="_blank" rel="noopener">Github  issues</a> 里面有用户给出了解决办法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 打开 picker 的方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">openPicker() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$refs.picker.open();</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'touchmove'</span>, <span class="keyword">this</span>.moveHandler, <span class="literal">false</span>);</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'touch'</span>, <span class="keyword">this</span>.touchHandler, <span class="literal">false</span>);</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'click'</span>, <span class="keyword">this</span>.touchHandler, <span class="literal">false</span>);</span><br><span class="line">&#125;,</span><br><span class="line">moveHandler() &#123;</span><br><span class="line">  event.preventDefault();</span><br><span class="line">  event.stopPropagation();</span><br><span class="line">&#125;,</span><br><span class="line">touchHandler() &#123;</span><br><span class="line">  <span class="keyword">if</span> (event.target.className.includes(<span class="string">'mint-datetime-cancel'</span>) || event.target.className.includes(<span class="string">'v-modal'</span>)) &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">'touchmove'</span>, <span class="keyword">this</span>.moveHandler, <span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">'touch'</span>, <span class="keyword">this</span>.touchHandler, <span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">'click'</span>, <span class="keyword">this</span>.touchHandler, <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>Date.prototype.toLocaleDateString()</p><p>这个方法在各个浏览器的实现不同。</p><p>在转换一个从日历插件获得的日期的时候，用了这个方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">  year: <span class="string">'numeric'</span>,</span><br><span class="line">  month: <span class="string">'2-digit'</span>,</span><br><span class="line">  day: <span class="string">'2-digit'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">this</span>.showBirthday = <span class="keyword">this</span>.birthday.toLocaleDateString(<span class="string">'zh-CN'</span>, options).split(<span class="string">"/"</span>).join(<span class="string">'-'</span>);</span><br></pre></td></tr></table></figure><p>在查到转换结果可能跟地区有关时，还特意设置了语言和转换的格式，但最后发现都无济于事。</p><p>目前发现了四种结果</p><ul><li>2017/01/01 （这种是网上一个帖子说的，我没发现。）</li><li>2017-01-01</li><li>2017年1月1日</li><li>Jan 1, 2017</li></ul><p>然后通过查阅 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString" target="_blank" rel="noopener">MDN</a> 发现，这个方法的兼容性确实很差。虽然可能更新不及时，但可见一斑。</p></li></ol><ul><li>Desktop</li></ul><table><thead><tr><th>Feature</th><th>Chrome</th><th>Firefox (Gecko)</th><th>Internet Explorer</th><th>Opera</th><th>Safari</th></tr></thead><tbody><tr><td>Basic support</td><td>(Yes)</td><td>(Yes)</td><td>(Yes)</td><td>(Yes)</td><td>(Yes)</td></tr><tr><td><code>locales</code> and <code>options</code> arguments</td><td>24</td><td><a href="https://developer.mozilla.org/en-US/Firefox/Releases/29" target="_blank" rel="noopener">29</a> (29)</td><td>11</td><td>15</td><td>未实现</td></tr></tbody></table><ul><li>Mobile</li></ul><table><thead><tr><th align="left">Feature</th><th>Android</th><th>Chrome for Android</th><th>Firefox Mobile (Gecko)</th><th>IE Mobile</th><th>Opera Mobile</th><th>Safari Mobile</th></tr></thead><tbody><tr><td align="left">Basic support</td><td>(Yes)</td><td>(Yes)</td><td>(Yes)</td><td>(Yes)</td><td>(Yes)</td><td>(Yes)</td></tr><tr><td align="left"><code>locales</code> and <code>options</code>arguments</td><td>未实现</td><td>26</td><td>未实现<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=864843" target="_blank" rel="noopener">bug 864843</a></td><td>未实现</td><td>未实现</td><td>未实现</td></tr></tbody></table><h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><p>   网上一般是通过正则来把得到时间拆分成年月日时分秒等，由于我这里得到的是标准的 <code>new Date()</code>，所以我决定用 <code>Date.prototype.getFullYear()</code>等方法。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> year = <span class="keyword">this</span>.birthday.getFullYear();</span><br><span class="line"><span class="keyword">let</span> month = <span class="keyword">this</span>.birthday.getMonth() + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> day = <span class="keyword">this</span>.birthday.getDate();</span><br><span class="line"><span class="keyword">if</span> (month &lt; <span class="number">10</span>) &#123;</span><br><span class="line">  month = <span class="string">'0'</span> + month; <span class="comment">// 为了表现为 2017-01-01 的格式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (day &lt; <span class="number">10</span>) &#123;</span><br><span class="line">  day = <span class="string">'0'</span> + day;  <span class="comment">// 为了表现为 2017-01-01 的格式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.showBirthday = year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + day;</span><br></pre></td></tr></table></figure><p>​    参考文档：</p><ul><li><a href="http://www.jianshu.com/p/4ea9376839e0" target="_blank" rel="noopener">微信ios/Safari中的new Date()格式化坑</a></li><li><a href="https://segmentfault.com/a/1190000009391790" target="_blank" rel="noopener">关于toLocaleDateString的坑</a></li><li><a href="https://segmentfault.com/a/1190000005139683" target="_blank" rel="noopener">Date对象的浏览器兼容性问题</a></li><li><a href="http://www.iteye.com/problems/84238" target="_blank" rel="noopener">JS方法toLocaleDateString()在谷歌浏览器下转换后的时间显示为英文</a></li><li><a href="https://www.zhihu.com/question/24400532" target="_blank" rel="noopener">javascript 里面为什么不提供date的格式化函数？</a></li><li><a href="http://chitanda.me/2015/08/21/the-trivia-of-js-date-function/" target="_blank" rel="noopener">JS原生Date类型方法的一些冷知识</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这段时间一直在进行微信 web 开发，遇到了一些坑，某些解决了，某些还在被坑着。。。&lt;/p&gt;
&lt;p&gt;用的是 easywechat(PHP) + Laravel，前端用 Vue + Mint-UI 。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;new Date()&lt;/p&gt;
&lt;p&gt;iOS 上 微信 web 浏览器是用 JavaScriptCore 解析，所以对于 &lt;code&gt;new Date()&lt;/code&gt; 的支持比较严格，&lt;code&gt;new Date(&amp;#39;2017-01-01&amp;#39;)&lt;/code&gt; 这种格式会返回 &lt;code&gt;NaN&lt;/code&gt;，必须用 &lt;code&gt;new Date(&amp;#39;2017/01/01&amp;#39;)&lt;/code&gt;这种格式，得用 &lt;code&gt;new Date(&amp;#39;2017-01-01&amp;#39;).replace(/-/g,&amp;#39;/&amp;#39;)&lt;/code&gt;转换一下。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="坑" scheme="http://yoursite.com/categories/%E5%9D%91/"/>
    
    
      <category term="微信开发" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
      <category term="Mint-UI" scheme="http://yoursite.com/tags/Mint-UI/"/>
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>一些有用的 tips 合辑</title>
    <link href="http://yoursite.com/2017/10/28/tips/"/>
    <id>http://yoursite.com/2017/10/28/tips/</id>
    <published>2017-10-28T14:55:59.000Z</published>
    <updated>2020-08-04T07:29:12.116Z</updated>
    
    <content type="html"><![CDATA[<ol><li><h3 id="CSS-单位"><a href="#CSS-单位" class="headerlink" title="CSS 单位"></a>CSS 单位</h3></li></ol><style>table th:first-of-type {  width: 120px;}</style><table><thead><tr><th align="left">单位</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">%</td><td align="left">百分比</td></tr><tr><td align="left">in</td><td align="left">英寸</td></tr><tr><td align="left">cm</td><td align="left">厘米</td></tr><tr><td align="left">mm</td><td align="left">毫米</td></tr><tr><td align="left">em</td><td align="left">1em 等于当前的字体尺寸。2em 等于当前字体尺寸的两倍。例如，如果某元素以 12pt 显示，那么 2em 是24pt。在 CSS 中，em 是非常有用的单位，因为它可以自动适应用户所使用的字体。</td></tr><tr><td align="left">ex</td><td align="left">一个 ex 是一个字体的 x-height。 (x-height 通常是字体尺寸的一半。)</td></tr><tr><td align="left">pt</td><td align="left">磅 (1 pt 等于 1/72 英寸)</td></tr><tr><td align="left">pc</td><td align="left">12 点活字 (1 pc 等于 12 点)</td></tr><tr><td align="left">px</td><td align="left">像素 (计算机屏幕上的一个点)</td></tr></tbody></table><a id="more"></a><ol start="2"><li><p>Internet Explorer 设置默认空白页的方法</p><p>需要改两个地方</p><ol><li><strong>Internet 选项</strong> –&gt; <strong>主页</strong> 填写 <code>about:blank</code></li><li><strong>Internet 选项</strong> –&gt; <strong>标签页</strong> –&gt; <strong>在打开新标签页后，打开：</strong>，选择 <strong>空白页</strong></li></ol><p>基于 IE11，别的版本应该大同小异。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;h3 id=&quot;CSS-单位&quot;&gt;&lt;a href=&quot;#CSS-单位&quot; class=&quot;headerlink&quot; title=&quot;CSS 单位&quot;&gt;&lt;/a&gt;CSS 单位&lt;/h3&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;style&gt;
table th:first-of-type {
  width: 120px;
}
&lt;/style&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;单位&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;%&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;in&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;英寸&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;cm&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;厘米&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;mm&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;毫米&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;em&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;1em 等于当前的字体尺寸。2em 等于当前字体尺寸的两倍。例如，如果某元素以 12pt 显示，那么 2em 是24pt。在 CSS 中，em 是非常有用的单位，因为它可以自动适应用户所使用的字体。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;ex&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;一个 ex 是一个字体的 x-height。 (x-height 通常是字体尺寸的一半。)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;pt&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;磅 (1 pt 等于 1/72 英寸)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;pc&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;12 点活字 (1 pc 等于 12 点)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;px&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;像素 (计算机屏幕上的一个点)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
    
      <category term="Tips" scheme="http://yoursite.com/categories/Tips/"/>
    
    
      <category term="tips" scheme="http://yoursite.com/tags/tips/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>我关注的程序员博客列表</title>
    <link href="http://yoursite.com/2017/09/24/coder-blogs/"/>
    <id>http://yoursite.com/2017/09/24/coder-blogs/</id>
    <published>2017-09-24T03:20:25.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>列出我平时关注的程序员的博客列表，或加上 @微博，Github ，Twitter</p><ol><li>未分类<ol><li><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener">阮一峰的网络日志</a>&ensp;&ensp;&ensp;&ensp;<a href="http://weibo.com/ruanyf" target="_blank" rel="noopener">@ruanyf</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/ruanyf" target="_blank" rel="noopener">Ruan YiFeng</a></li><li><a href="https://coolshell.cn/" target="_blank" rel="noopener">COOLSHELL</a>&ensp;&ensp;&ensp;&ensp;@<a href="http://weibo.com/haoel" target="_blank" rel="noopener">左耳朵耗子</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/haoel" target="_blank" rel="noopener">Hao Chen</a></li><li><a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰的官方网站</a>&ensp;&ensp;&ensp;&ensp;@<a href="http://weibo.com/liaoxuefeng" target="_blank" rel="noopener">廖雪峰</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/michaelliao" target="_blank" rel="noopener">Michael Liao</a></li></ol></li></ol><a id="more"></a><ol start="4"><li><a href="http://www.xuanyusong.com/" target="_blank" rel="noopener">雨松MOMO</a>&ensp;&ensp;&ensp;&ensp;@<a href="http://weibo.com/819881121" target="_blank" rel="noopener">雨松MOMO</a></li><li><a href="https://sb.sb/" target="_blank" rel="noopener">Showform</a>&ensp;&ensp;&ensp;&ensp;<a href="https://twitter.com/Showfom" target="_blank" rel="noopener">@<strong>Showfom</strong></a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/Showfom" target="_blank" rel="noopener">Showfom</a></li><li><a href="http://www.yinwang.org/" target="_blank" rel="noopener">当然我在扯淡</a>&ensp;&ensp;&ensp;&ensp;@<a href="http://weibo.com/u/6347862377" target="_blank" rel="noopener">垠神</a></li><li><a href="https://program-think.blogspot.com/" target="_blank" rel="noopener">编程随想的博客</a>&ensp;&ensp;&ensp;&ensp;<a href="https://twitter.com/programthink" target="_blank" rel="noopener">@<strong>programthink</strong></a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/programthink" target="_blank" rel="noopener">编程随想</a></li><li><a href="http://hrtsea.com/" target="_blank" rel="noopener">心海e站(烈火汉化)</a></li><li><a href="https://teddysun.com/" target="_blank" rel="noopener">秋水逸冰</a>&ensp;&ensp;&ensp;&ensp;<a href="http://weibo.com/qsyb" target="_blank" rel="noopener">秋水逸冰</a><ol start="2"><li>JavaScript &amp; 前端</li></ol></li><li><a href="http://www.thinkingincrowd.me/" target="_blank" rel="noopener">thinkingincrowd|鹄思乱想</a>&ensp;&ensp;&ensp;&ensp;@<a href="http://weibo.com/kenspirit" target="_blank" rel="noopener">鹄思乱想 </a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/kenspirit" target="_blank" rel="noopener">Ken Chen</a></li><li><a href="http://www.cnblogs.com/chyingp/" target="_blank" rel="noopener">chyingp|程序猿小卡</a>&ensp;&ensp;&ensp;&ensp;@<a href="http://weibo.com/chyingp" target="_blank" rel="noopener">程序猿小卡_casper</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/chyingp" target="_blank" rel="noopener">程序猿小卡</a></li><li><a href="http://www.barretlee.com/entry/" target="_blank" rel="noopener">小胡子哥</a>&ensp;&ensp;&ensp;&ensp;@<a href="http://weibo.com/173248656" target="_blank" rel="noopener">Barret李靖</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/barretlee" target="_blank" rel="noopener">小胡子哥</a></li><li><a href="https://github.com/ivarptr" target="_blank" rel="noopener">Hippo Spark</a>&ensp;&ensp;&ensp;&ensp;<a href="https://twitter.com/ivarptr" target="_blank" rel="noopener">@<strong>ivarptr</strong></a></li><li><a href="http://www.cnblogs.com/TomXu/" target="_blank" rel="noopener">汤姆大叔的博客</a></li><li><a href="https://jysperm.me/" target="_blank" rel="noopener">王子亭的博客</a>&ensp;&ensp;&ensp;&ensp;<a href="https://twitter.com/jysperm" target="_blank" rel="noopener">@<strong>jysperm</strong></a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/jysperm" target="_blank" rel="noopener">王子亭</a></li><li><a href="https://luolei.org/" target="_blank" rel="noopener">罗磊的独立博客</a>&ensp;&ensp;&ensp;&ensp;<a href="http://weibo.com/foru17" target="_blank" rel="noopener">@罗罗磊磊</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/foru17" target="_blank" rel="noopener">Luo Lei</a></li><li><a href="https://jakearchibald.com/" target="_blank" rel="noopener">jakearchibald</a>&ensp;&ensp;&ensp;&ensp;<a href="https://twitter.com/jaffathecake" target="_blank" rel="noopener">@<strong>jaffathecake</strong></a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/jakearchibald/" target="_blank" rel="noopener">Jake Archibald</a></li><li><a href="http://blog.meathill.com/" target="_blank" rel="noopener">山维空间</a>&ensp;&ensp;&ensp;&ensp;<a href="http://weibo.com/meathill" target="_blank" rel="noopener">@Meathill</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/meathill/" target="_blank" rel="noopener">Meathill</a></li><li><a href="https://www.phodal.com/" target="_blank" rel="noopener">PHODAL</a>&ensp;&ensp;&ensp;&ensp;<a href="http://weibo.com/phodal" target="_blank" rel="noopener">@Phodal</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/phodal" target="_blank" rel="noopener">Phodal Huang</a></li><li><a href="https://www.anotherhome.net" target="_blank" rel="noopener">DIYgod</a>&ensp;&ensp;&ensp;&ensp;<a href="http://weibo.com/anotherhome" target="_blank" rel="noopener">@DIYgod酱</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/DIYgod" target="_blank" rel="noopener">DIYgod</a></li><li><a href="http://www.cnblogs.com/PeunZhang/" target="_blank" rel="noopener">白色橡树</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/peunzhang/" target="_blank" rel="noopener">白树</a></li><li><a href="http://www.zhangxinxu.com/" target="_blank" rel="noopener">鑫空间，鑫生活</a>&ensp;&ensp;&ensp;&ensp;<a href="http://weibo.com/zhangxinxu" target="_blank" rel="noopener">@张鑫旭</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/zhangxinxu" target="_blank" rel="noopener">zhangxinxu</a></li><li><a href="http://blog.doyoe.com/" target="_blank" rel="noopener">CSS探索之旅</a>&ensp;&ensp;&ensp;&ensp;<a href="http://weibo.com/doyoe" target="_blank" rel="noopener">@doyoe</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/doyoe" target="_blank" rel="noopener">doyoe</a></li><li><a href="https://imququ.com/" target="_blank" rel="noopener">Jerry Qu</a>&ensp;&ensp;&ensp;&ensp;<a href="http://weibo.com/jerryqu" target="_blank" rel="noopener">@屈光宇</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/qgy18" target="_blank" rel="noopener">Jerry Qu</a></li><li><a href="http://jspang.com/" target="_blank" rel="noopener">技术胖</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/shenghy" target="_blank" rel="noopener">胜宏宇</a></li><li><a href="http://refined-x.com" target="_blank" rel="noopener">前段路上</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/tower1229" target="_blank" rel="noopener">Tao Zang</a></li><li><a href="https://jeffjade.com/" target="_blank" rel="noopener">晚晴幽草轩</a>&ensp;&ensp;&ensp;&ensp;<a href="https://weibo.com/jeffjade" target="_blank" rel="noopener">@杨琼璞</a><ol start="3"><li>团队前端 Blog</li></ol></li><li><a href="http://www.alloyteam.com/" target="_blank" rel="noopener">Alloy Team</a>&ensp;&ensp;&ensp;&ensp;<a href="http://alloyteam.github.io/" target="_blank" rel="noopener">Tencent AlloyTeam</a></li><li><a href="https://75team.com/" target="_blank" rel="noopener">奇舞团</a>&ensp;&ensp;&ensp;&ensp;<a href="http://weibo.com/75teams" target="_blank" rel="noopener">@奇舞团</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/75team" target="_blank" rel="noopener">奇舞团</a></li><li><a href="http://fex.baidu.com/" target="_blank" rel="noopener">FEX</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/fex-team/" target="_blank" rel="noopener">Baidu FEX team</a></li><li><a href="http://taobaofed.org/" target="_blank" rel="noopener">淘宝前端团队 FED</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/alibaba" target="_blank" rel="noopener">Alibaba</a></li><li><a href="https://aotu.io" target="_blank" rel="noopener">凹凸实验室</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/o2team" target="_blank" rel="noopener">AOTU Labs</a></li><li><a href="https://jdc.jd.com/" target="_blank" rel="noopener">京东 JDC</a></li><li><a href="http://ued.ctrip.com/blog/" target="_blank" rel="noopener">携程 UED</a></li><li><a href="https://isux.tencent.com/" target="_blank" rel="noopener">腾讯 ISUX</a>&ensp;&ensp;&ensp;&ensp;<a href="http://weibo.com/txisux" target="_blank" rel="noopener">@腾讯ISUX</a></li><li><a href="http://cdc.tencent.com/" target="_blank" rel="noopener">腾讯 CDC</a></li><li><a href="http://imweb.io/" target="_blank" rel="noopener">IMWEB前端博客</a><ol start="4"><li>PHP</li></ol></li><li><a href="http://www.yinqisen.cn/" target="_blank" rel="noopener">扣丁禅师</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/zencodex" target="_blank" rel="noopener">扣丁禅师</a></li><li><a href="https://joyqi.com/" target="_blank" rel="noopener">JoyQi’s Homepage</a>&ensp;&ensp;&ensp;&ensp;@<a href="http://weibo.com/magike" target="_blank" rel="noopener">joyqi</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/joyqi" target="_blank" rel="noopener">joyqi</a></li><li><a href="http://rango.swoole.com/" target="_blank" rel="noopener">韩天峰(Rango)的博客</a>&ensp;&ensp;&ensp;&ensp;<a href="http://weibo.com/hantianfeng" target="_blank" rel="noopener">@韩天峰-Rango</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/matyhtf" target="_blank" rel="noopener">Tianfeng</a></li><li><a href="https://huoding.com/" target="_blank" rel="noopener">火丁笔记</a>&ensp;&ensp;&ensp;&ensp;<a href="http://weibo.com/huoding" target="_blank" rel="noopener">@火丁笔记</a>&ensp;&ensp;&ensp;&ensp;<a href="https://twitter.com/huoding" target="_blank" rel="noopener">@<strong>huoding</strong></a></li><li><a href="https://mengkang.net/" target="_blank" rel="noopener">Mengkang’s land</a>&ensp;&ensp;&ensp;&ensp;<a href="http://weibo.com/zmkang" target="_blank" rel="noopener">@周梦康</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/zhoumengkang" target="_blank" rel="noopener">周梦康</a></li><li><a href="http://oomusou.io/" target="_blank" rel="noopener">点灯坊</a>&ensp;&ensp;&ensp;&ensp;<a href="https://twitter.com/oomusou" target="_blank" rel="noopener">@<strong>oomusou</strong></a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/oomusou" target="_blank" rel="noopener">oomusou</a></li><li><a href="https://helei112g.github.io/" target="_blank" rel="noopener">大愚的博客</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/helei112g" target="_blank" rel="noopener">helei112g</a></li><li><a href="https://blog.codingnow.com/" target="_blank" rel="noopener">云风的 BLOG</a>&ensp;&ensp;&ensp;&ensp; <a href="https://weibo.com/deepcold" target="_blank" rel="noopener">@简悦云风</a>&ensp;&ensp;&ensp;&ensp;<a href="https://twitter.com/cloudwu" target="_blank" rel="noopener">@cloudwu</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/cloudwu" target="_blank" rel="noopener">cloudwu</a><ol start="5"><li>Python</li></ol></li><li><a href="https://binux.blog/" target="_blank" rel="noopener">Binuxの杂货铺</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/binux" target="_blank" rel="noopener">Roy Binux</a><ol start="6"><li>Linux</li></ol></li><li><a href="https://www.lainme.com/" target="_blank" rel="noopener">Lainme’s Blog</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/lainme" target="_blank" rel="noopener">lainme</a></li><li><a href="https://cnzhx.net/" target="_blank" rel="noopener">水景一页</a>&ensp;&ensp;&ensp;&ensp;<a href="https://plus.google.com/+HaoxianZeng" target="_blank" rel="noopener">@+HaoxianZeng</a><ol start="7"><li>BREAK INTO</li></ol></li><li><a href="http://blog.lanyus.com/6.html" target="_blank" rel="noopener">ilanyu’s Blog</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/ilanyu" target="_blank" rel="noopener">lanyu</a></li><li><a href="http://www.youmeek.com/" target="_blank" rel="noopener">Judas.n</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/judasn" target="_blank" rel="noopener">Judas.n</a></li><li><a href="https://blog.piasy.com/" target="_blank" rel="noopener">Piasy</a>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/Piasy" target="_blank" rel="noopener">Piasy</a><ol start="8"><li>架构设计 &amp;&amp; 系统</li></ol></li><li><a href="http://www.cnblogs.com/netfocus" target="_blank" rel="noopener">汤雪华</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;列出我平时关注的程序员的博客列表，或加上 @微博，Github ，Twitter&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;未分类&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰的网络日志&lt;/a&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;&lt;a href=&quot;http://weibo.com/ruanyf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@ruanyf&lt;/a&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;&lt;a href=&quot;https://github.com/ruanyf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruan YiFeng&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://coolshell.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;COOLSHELL&lt;/a&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;@&lt;a href=&quot;http://weibo.com/haoel&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;左耳朵耗子&lt;/a&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;&lt;a href=&quot;https://github.com/haoel&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hao Chen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.liaoxuefeng.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;廖雪峰的官方网站&lt;/a&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;@&lt;a href=&quot;http://weibo.com/liaoxuefeng&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;廖雪峰&lt;/a&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;&lt;a href=&quot;https://github.com/michaelliao&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Michael Liao&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="折腾" scheme="http://yoursite.com/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="程序员" scheme="http://yoursite.com/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 16.04 搜狗输入法突然不能输入中文的解决办法</title>
    <link href="http://yoursite.com/2017/09/19/Ubuntu-Sogou-Chinese-bug/"/>
    <id>http://yoursite.com/2017/09/19/Ubuntu-Sogou-Chinese-bug/</id>
    <published>2017-09-19T17:24:35.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<ol><li>问题不知道啥原因，大概是 fcitx 崩了吧。。</li><li><code>ps -ef|grep sogou</code> 杀掉所有搜出来的进程，主要是 sogou-qimpanel</li><li>然后通过 Ubuntu 的开始菜单（Windows键）打开 fcitx，切换到 搜狗输入法，弄会儿就</li></ol><p>好了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;问题不知道啥原因，大概是 fcitx 崩了吧。。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ps -ef|grep sogou&lt;/code&gt; 杀掉所有搜出来的进程，主要是 sogou-qimpanel&lt;/li&gt;
&lt;li&gt;然后通过 Ubuntu 的开始菜单（Windows键）
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="搜狗输入法" scheme="http://yoursite.com/tags/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04 server 下配置 MySQL，并开启远程连接</title>
    <link href="http://yoursite.com/2017/09/19/Ubuntu16-04-Mysql-Remote/"/>
    <id>http://yoursite.com/2017/09/19/Ubuntu16-04-Mysql-Remote/</id>
    <published>2017-09-19T17:23:42.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>安装 mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="2"><li><p>授权用户，并允许远程登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'password'</span> WITH GRANT OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></li><li><p>取消127.0.0.1的监听绑定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"><span class="comment"># 取消 bind-address 的注释</span></span><br><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装 mysql&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install mysql-server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>todoist 使用原则 &amp; tips</title>
    <link href="http://yoursite.com/2017/09/19/todoist-tips/"/>
    <id>http://yoursite.com/2017/09/19/todoist-tips/</id>
    <published>2017-09-19T17:12:55.000Z</published>
    <updated>2020-08-04T07:29:12.116Z</updated>
    
    <content type="html"><![CDATA[<p> 这是我在听知乎 Live 的时候记录下来的笔记，感觉收获蛮大的。接触 GTD 很长时间了，这次算是系统性过了一遍。</p><p>相关链接如下：</p><p><a href="https://www.zhihu.com/lives/823230794934947840" target="_blank" rel="noopener">个人任务管理入门：基本概念与基础工具</a></p><p><a href="https://www.zhihu.com/lives/823240334342492160" target="_blank" rel="noopener">个人任务管理进阶：任务过滤和进阶工具</a></p><p><a href="https://sspai.com/series/1" target="_blank" rel="noopener">用更现代的方式做任务管理</a></p><p><a href="https://book.douban.com/subject/25852981/" target="_blank" rel="noopener">小强升职记</a></p><a id="more"></a><ol><li>想到什么任务就记下来，不考虑可行性、不考虑优先度。</li><li>不要空想，而要像揪线头一样从一个点联想需要做的事情。</li><li>收件箱随后要<strong>清空</strong>，不要在收件箱里积攒任务。</li><li>收件箱的工具尽量少，要尽量让<strong>收集</strong>这个行为和某个具体的工具绑定。</li><li>让自己之后在看到这个任务后都知道这么做，可以马上执行，所以要记下详细的备注信息。</li><li>不要出现遗漏，所以要一件一件地过。</li><li>把收件箱里的每个想法变成「可执行状态」。</li><li>两分钟原则：如果一件事，你当下做，要比你事后再绕回来做更节省时间，那理所当然地应该尽早去做。</li><li>不要想当然地建立过细的子列表，遇到你久不用的列表要归档或删除。</li><li>从大项开始建立列表，等大项里的任务堆积到需要再分时再建立下一级列表。</li><li>标签：基本意义在于<strong>标注一个任务的执行时的情境</strong>，比如它是在哪里做的，它的优先级高不高，这个任务是指派给谁的等等。</li><li>和列表一样，不要想当然地建立标签。</li><li>和列表不同，标签要从细项入手，不要从框架入手。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 这是我在听知乎 Live 的时候记录下来的笔记，感觉收获蛮大的。接触 GTD 很长时间了，这次算是系统性过了一遍。&lt;/p&gt;
&lt;p&gt;相关链接如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/lives/823230794934947840&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;个人任务管理入门：基本概念与基础工具&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/lives/823240334342492160&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;个人任务管理进阶：任务过滤和进阶工具&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://sspai.com/series/1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;用更现代的方式做任务管理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/25852981/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;小强升职记&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Todoist" scheme="http://yoursite.com/categories/Todoist/"/>
    
    
      <category term="Todoist" scheme="http://yoursite.com/tags/Todoist/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 使用 Tips</title>
    <link href="http://yoursite.com/2017/09/19/laravel-use-tips/"/>
    <id>http://yoursite.com/2017/09/19/laravel-use-tips/</id>
    <published>2017-09-19T17:02:57.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>创建 model 的时候，加上<code>-m</code>会同时创建 migration 文件</p><p><code>php artisan make:model XX -m</code></p></li><li><p>在用了 <a href="https://github.com/overtrue/laravel-ueditor" target="_blank" rel="noopener">laravel-ueditor</a> 后，Laravel 5.4 需要执行 <code>php artisan storage:link</code>，才可以在 <code>public/storage/uploads</code>下看到上传的图片</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建 model 的时候，加上&lt;code&gt;-m&lt;/code&gt;会同时创建 migration 文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;php artisan make:model XX -m&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在用了 &lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="Laravel" scheme="http://yoursite.com/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>laravel 遇到的坑</title>
    <link href="http://yoursite.com/2017/09/19/laravel-traps/"/>
    <id>http://yoursite.com/2017/09/19/laravel-traps/</id>
    <published>2017-09-19T16:57:32.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="laravel-遇到的坑"><a href="#laravel-遇到的坑" class="headerlink" title="laravel 遇到的坑"></a>laravel 遇到的坑</h1><ol><li><p>同步到 git，并在他处 clone 后，需要 composer install 包和 新建 .env 文件</p></li><li><p>同步到 git，并在他处 clone 后，需要生成 key</p><p><code>php artisan key:generate</code></p></li></ol><a id="more"></a><ol start="3"><li><p>migrate 数据库时，会报错<br><code>Specified key was too long error</code><br>需要修改 <code>AppServiceProvider.php</code> 文件，添加下面的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Schema</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Schema::defaultStringLength(<span class="number">191</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 Linux ​安装 mysql 和 php 时记得安装 php7.1-mysql php7.1-fpm，否则 php artisan migrate 会失败</p></li><li><p>为了用 illuminate/html，需要安装 sudo apt-get install php7.1-mbstring 和 sudo apt-get install php7.1-xml</p></li><li><p>打开网址时出现 Please provide a valid cache path，继续在 storage/framework 下面创建 sessions， views, cache 文件夹，注意是在 framework 目录下</p></li><li><p>Windows 下迁移数据库的时候，可能需要修改一个文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to fix this, all you have to do is to edit your AppServiceProvider.php file and add to the boot method a default string length</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Schema</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Schema::defaultStringLength(<span class="number">191</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;laravel-遇到的坑&quot;&gt;&lt;a href=&quot;#laravel-遇到的坑&quot; class=&quot;headerlink&quot; title=&quot;laravel 遇到的坑&quot;&gt;&lt;/a&gt;laravel 遇到的坑&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;同步到 git，并在他处 clone 后，需要 composer install 包和 新建 .env 文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同步到 git，并在他处 clone 后，需要生成 key&lt;/p&gt;
&lt;p&gt;&lt;code&gt;php artisan key:generate&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="折腾" scheme="http://yoursite.com/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="Laravel" scheme="http://yoursite.com/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>Homestead Traps</title>
    <link href="http://yoursite.com/2017/09/19/homestead-traps/"/>
    <id>http://yoursite.com/2017/09/19/homestead-traps/</id>
    <published>2017-09-19T16:54:15.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<ol><li><a href="https://askubuntu.com/questions/760671/could-not-load-vboxdrv-after-upgrade-to-ubuntu-16-04-and-i-want-to-keep-secur" target="_blank" rel="noopener">Could not load ‘vboxdrv’ after upgrade to Ubuntu 16.04 (and I want to keep secure boot)</a><ol><li>Create signing keys<br><code>openssl req -new -x509 -newkey rsa:2048 -keyout MOK.priv -outform DER -out MOK.der -nodes -days 36500 -subj &quot;/CN=Descriptive name/&quot;</code></li><li>Sign the module (vboxdrv for this example)<br><code>sudo /usr/src/linux-headers-$(uname -r)/scripts/sign-file sha256 ./MOK.priv ./MOK.der $(modinfo -n vboxdrv)</code></li><li>Register the keys to Secure Boot<br><code>sudo mokutil --import MOK.der</code></li><li>Reboot<br><code>sudo modprobe vboxdrv</code></li></ol></li></ol><a id="more"></a><ol start="2"><li><p>vboxdrv  vboxnetadp  vboxnetflt  </p></li><li><p><a href="https://askubuntu.com/questions/762254/why-do-i-get-required-key-not-available-when-install-3rd-party-kernel-modules" target="_blank" rel="noopener">Why do I get “Required key not available” when install 3rd party kernel modules or after a kernel upgrade?</a></p></li><li><p>禁止  UEFI secure boot </p></li><li><p>[<a href="http://www.cnblogs.com/qinqiao/p/vagrant-install-and-questions.html" target="_blank" rel="noopener">vagrant 1.8.6 安装过程及总结遇到的坑</a>]</p></li><li><p><a href="https://greenqy.github.io/2015/04/25/virtualbox-kernel-module-not-loaded/" target="_blank" rel="noopener">VirtualBox 启动时提示 The vboxdrv kernel module is not loaded</a></p></li><li><p>命令</p><ul><li><code>vagrant reload --provision</code> 更新 Nginx 配置到虚拟机上，会删除旧的虚拟机，数据库等等</li><li><code>vagrant up</code> 启动虚拟机</li></ul></li><li><p>Google Chrome 最近更新后（我这用的是 63.x) ，对 https 的控制加强了。之前  Homestead 默认是启用 SSL 的，但是现在如果使用后缀为 <code>.dev</code>，<code>.app</code>的虚拟网址，那 Chrome 会报错。我在切换成 <code>.local</code>，<code>.test</code>后就可以正常访问了。</p><p>所以以后在 <code>Homestead.yaml</code>和<code>hosts</code>中要注意了。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://askubuntu.com/questions/760671/could-not-load-vboxdrv-after-upgrade-to-ubuntu-16-04-and-i-want-to-keep-secur&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Could not load ‘vboxdrv’ after upgrade to Ubuntu 16.04 (and I want to keep secure boot)&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;Create signing keys&lt;br&gt;&lt;code&gt;openssl req -new -x509 -newkey rsa:2048 -keyout MOK.priv -outform DER -out MOK.der -nodes -days 36500 -subj &amp;quot;/CN=Descriptive name/&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Sign the module (vboxdrv for this example)&lt;br&gt;&lt;code&gt;sudo /usr/src/linux-headers-$(uname -r)/scripts/sign-file sha256 ./MOK.priv ./MOK.der $(modinfo -n vboxdrv)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Register the keys to Secure Boot&lt;br&gt;&lt;code&gt;sudo mokutil --import MOK.der&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reboot&lt;br&gt;&lt;code&gt;sudo modprobe vboxdrv&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="折腾" scheme="http://yoursite.com/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="Laravel" scheme="http://yoursite.com/tags/Laravel/"/>
    
      <category term="Homestead" scheme="http://yoursite.com/tags/Homestead/"/>
    
  </entry>
  
  <entry>
    <title>Homestead 安装过程</title>
    <link href="http://yoursite.com/2017/09/19/homestead-install/"/>
    <id>http://yoursite.com/2017/09/19/homestead-install/</id>
    <published>2017-09-19T16:51:59.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">zcdll@zcdll-Infisa:~/Coder/<span class="built_in">test</span>/php/Homestead$ vagrant reload --provision</span><br><span class="line">The provider <span class="string">'virtualbox'</span> that was requested to back the machine</span><br><span class="line"><span class="string">'homestead-7'</span> is reporting that it isn<span class="string">'t usable on this system. The</span></span><br><span class="line"><span class="string">reason is shown below:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">VirtualBox is complaining that the kernel module is not loaded. Please</span></span><br><span class="line"><span class="string">run `VBoxManage --version` or open the VirtualBox GUI to see the error</span></span><br><span class="line"><span class="string">message which should contain instructions on how to fix this error.</span></span><br><span class="line"><span class="string">zcdll@zcdll-Infisa:~/Coder/test/php/Homestead$ VBoxManage --version</span></span><br><span class="line"><span class="string">WARNING: The vboxdrv kernel module is not loaded. Either there is no module</span></span><br><span class="line"><span class="string">         available for the current kernel (4.4.0-83-generic) or it failed to</span></span><br><span class="line"><span class="string">         load. Please recompile the kernel module and install it by</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">           sudo /sbin/vboxconfig</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">         You will not be able to start VMs until this problem is fixed.</span></span><br><span class="line"><span class="string">5.1.24r117012</span></span><br><span class="line"><span class="string">zcdll@zcdll-Infisa:~/Coder/test/php/Homestead$ sudo /sbin/vboxconfig</span></span><br><span class="line"><span class="string">vboxdrv.sh: Stopping VirtualBox services.</span></span><br><span class="line"><span class="string">vboxdrv.sh: Building VirtualBox kernel modules.</span></span><br><span class="line"><span class="string">vboxdrv.sh: Starting VirtualBox services.</span></span><br><span class="line"><span class="string">vboxdrv.sh: Building VirtualBox kernel modules.</span></span><br><span class="line"><span class="string">vboxdrv.sh: failed: modprobe vboxdrv failed. Please use '</span>dmesg<span class="string">' to find out why.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">There were problems setting up VirtualBox.  To re-start the set-up process, run</span></span><br><span class="line"><span class="string">  /sbin/vboxconfig</span></span><br><span class="line"><span class="string">as root.</span></span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">zcdll@zcdll-Infisa:~/Coder/<span class="built_in">test</span>/php/Homestead$ vagrant reload --provision</span><br><span class="line">The provider <span class="string">'virtualbox'</span> that was requested to back the machine</span><br><span class="line"><span class="string">'homestead-7'</span> is reporting that it isn<span class="string">'t usable on this system. The</span></span><br><span class="line"><span class="string">reason is shown below:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">VirtualBox is complaining that the installation is incomplete. Please</span></span><br><span class="line"><span class="string">run `VBoxManage --version` to see the error message which should contain</span></span><br><span class="line"><span class="string">instructions on how to fix this error.</span></span><br><span class="line"><span class="string">zcdll@zcdll-Infisa:~/Coder/test/php/Homestead$ VBoxManage --version</span></span><br><span class="line"><span class="string">WARNING: The character device /dev/vboxdrv does not exist.</span></span><br><span class="line"><span class="string"> Please install the virtualbox-dkms package and the appropriate</span></span><br><span class="line"><span class="string"> headers, most likely linux-headers-generic.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> You will not be able to start VMs until this problem is fixed.</span></span><br><span class="line"><span class="string">5.0.40_Ubuntur115130</span></span><br><span class="line"><span class="string">zcdll@zcdll-Infisa:~/Coder/test/php/Homestead$ sudo modprobe vboxdrv</span></span><br><span class="line"><span class="string">zcdll@zcdll-Infisa:~/Coder/test/php/Homestead$ VBoxManage --version</span></span><br><span class="line"><span class="string">5.0.40_Ubuntur115130</span></span><br><span class="line"><span class="string">zcdll@zcdll-Infisa:~/Coder/test/php/Homestead$ vagrant reload --provision</span></span><br><span class="line"><span class="string">==&gt; homestead-7: Checking if box '</span>laravel/homestead<span class="string">' is up to date...</span></span><br><span class="line"><span class="string">==&gt; homestead-7: Clearing any previously set forwarded ports...</span></span><br><span class="line"><span class="string">==&gt; homestead-7: Clearing any previously set network interfaces...</span></span><br><span class="line"><span class="string">There was an error while executing `VBoxManage`, a CLI used by Vagrant</span></span><br><span class="line"><span class="string">for controlling VirtualBox. The command and stderr is shown below.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Command: ["hostonlyif", "create"]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Stderr: 0%...</span></span><br><span class="line"><span class="string">Progress state: NS_ERROR_FAILURE</span></span><br><span class="line"><span class="string">VBoxManage: error: Failed to create the host-only adapter</span></span><br><span class="line"><span class="string">VBoxManage: error: VBoxNetAdpCtl: Error while adding new interface: failed to open /dev/vboxnetctl: No such file or directory</span></span><br><span class="line"><span class="string">VBoxManage: error: Details: code NS_ERROR_FAILURE (0x80004005), component HostNetworkInterfaceWrap, interface IHostNetworkInterface</span></span><br><span class="line"><span class="string">VBoxManage: error: Context: "RTEXITCODE handleCreate(HandlerArg*)" at line 71 of file VBoxManageHostonly.cpp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">zcdll@zcdll-Infisa:~/Coder/test/php/Homestead$ sudo modprobe vboxnetctl</span></span><br><span class="line"><span class="string">modprobe: FATAL: Module vboxnetctl not found in directory /lib/modules/4.4.0-83-generic</span></span><br></pre></td></tr></table></figure><p><code>sudo apt-get -y install dkms build-essential linux-headers-$(uname -r) virtualbox-guest-additions-iso</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">zcdll@zcdll-Infisa:~/Coder/<span class="built_in">test</span>/php/Homestead$ sudo modprobe vboxnetadp</span><br><span class="line">zcdll@zcdll-Infisa:~/Coder/<span class="built_in">test</span>/php/Homestead$ vagrant up</span><br><span class="line">Bringing machine <span class="string">'homestead-7'</span> up with <span class="string">'virtualbox'</span> provider...</span><br><span class="line">==&gt; homestead-7: Checking <span class="keyword">if</span> box <span class="string">'laravel/homestead'</span> is up to date...</span><br><span class="line">==&gt; homestead-7: Clearing any previously <span class="built_in">set</span> network interfaces...</span><br><span class="line">==&gt; homestead-7: Preparing network interfaces based on configuration...</span><br><span class="line">    homestead-7: Adapter 1: nat</span><br><span class="line">    homestead-7: Adapter 2: hostonly</span><br><span class="line">==&gt; homestead-7: Forwarding ports...</span><br><span class="line">    homestead-7: 80 (guest) =&gt; 8000 (host) (adapter 1)</span><br><span class="line">    homestead-7: 443 (guest) =&gt; 44300 (host) (adapter 1)</span><br><span class="line">    homestead-7: 3306 (guest) =&gt; 33060 (host) (adapter 1)</span><br><span class="line">    homestead-7: 5432 (guest) =&gt; 54320 (host) (adapter 1)</span><br><span class="line">    homestead-7: 8025 (guest) =&gt; 8025 (host) (adapter 1)</span><br><span class="line">    homestead-7: 27017 (guest) =&gt; 27017 (host) (adapter 1)</span><br><span class="line">    homestead-7: 22 (guest) =&gt; 2222 (host) (adapter 1)</span><br><span class="line">==&gt; homestead-7: Running <span class="string">'pre-boot'</span> VM customizations...</span><br><span class="line">==&gt; homestead-7: Booting VM...</span><br><span class="line">There was an error <span class="keyword">while</span> executing `VBoxManage`, a CLI used by Vagrant</span><br><span class="line"><span class="keyword">for</span> controlling VirtualBox. The <span class="built_in">command</span> and stderr is shown below.</span><br><span class="line"></span><br><span class="line">Command: [<span class="string">"startvm"</span>, <span class="string">"a9d3a30e-fa59-48ff-a1cd-84b94047a83c"</span>, <span class="string">"--type"</span>, <span class="string">"headless"</span>]</span><br><span class="line"></span><br><span class="line">Stderr: VBoxManage: error: Failed to open/create the internal network <span class="string">'HostInterfaceNetworking-vboxnet1'</span> (you might need to modprobe vboxnetflt to make it accessible) (VERR_SUPDRV_COMPONENT_NOT_FOUND).</span><br><span class="line">VBoxManage: error: Failed to attach the network LUN (VERR_SUPDRV_COMPONENT_NOT_FOUND).</span><br><span class="line">VBoxManage: error: Please install the virtualbox-dkms package and execute <span class="string">'modprobe vboxdrv'</span> as root (VERR_SUPDRV_COMPONENT_NOT_FOUND)</span><br><span class="line">VBoxManage: error: Details: code NS_ERROR_FAILURE (0x80004005), component ConsoleWrap, interface IConsole</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo modprobe vboxnetflt</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vagrant reload --provision  // Windows 上这个命令才可以新建数据库，新建一个项目</span><br><span class="line">VBoxManage --version</span><br><span class="line">sudo /sbin/vboxconfig</span><br><span class="line">sudo modprobe vboxdrv</span><br><span class="line">sudo modprobe vboxnetadp</span><br><span class="line">sudo modprobe vboxnetflt</span><br><span class="line"></span><br><span class="line">sudo modprobe vboxdrv &amp;&amp; sudo modprobe vboxnetadp &amp;&amp; sudo modprobe vboxnetflt</span><br></pre></td></tr></table></figure><p>谨慎升级。。。</p><p>2017年9月10日</p><p>今天升级了 vagrant 到2.0，之后就报错。。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">D:\Coder\Homestead (master)</span><br><span class="line">$ vagrant.exe up</span><br><span class="line">Bringing machine <span class="string">'homestead-home'</span> up with <span class="string">'virtualbox'</span> provider...</span><br><span class="line">==&gt; homestead-home: Checking <span class="keyword">if</span> box <span class="string">'laravel/homestead'</span> is up to date...</span><br><span class="line">C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/plugins/providers/virtualbox/driver/vers</span><br><span class="line">id byte sequence <span class="keyword">in</span> UTF-8 (ArgumentError)</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/plugins/providers/virtualbo</span><br><span class="line">read_forwarded_ports<span class="string">'</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/plugins/providers/virtualbo</span></span><br><span class="line"><span class="string">block in read_used_ports'</span></span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/plugins/providers/virtualbo</span><br><span class="line">each<span class="string">'</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/plugins/providers/virtualbo</span></span><br><span class="line"><span class="string">read_used_ports'</span></span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/mingw64/lib/ruby/2.3.0/forwardable.rb:204:<span class="keyword">in</span> `read_</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/plugins/providers/virtualbo</span><br><span class="line">collision_params.rb:12:<span class="keyword">in</span> `call<span class="string">'</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/builtin/</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/builtin/</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/plugins/providers/virtualbo</span></span><br><span class="line"><span class="string">b:15:in `call'</span></span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/plugins/providers/virtualbo</span><br><span class="line"><span class="string">'</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/plugins/providers/virtualbo</span></span><br><span class="line"><span class="string">:17:in `call'</span></span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/plugins/providers/virtualbo</span><br><span class="line"><span class="keyword">in</span> `call<span class="string">'</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span></span><br><span class="line"><span class="string">n'</span></span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/builder.</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/runner.r</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/util/busy.rb:19</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/runner.r</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/<span class="built_in">builtin</span>/</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span><br><span class="line">n<span class="string">'</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/builder.</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/runner.r</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/util/busy.rb:19</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/runner.r</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/builtin/</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span></span><br><span class="line"><span class="string">n'</span></span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/builder.</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/runner.r</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/util/busy.rb:19</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/runner.r</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/<span class="built_in">builtin</span>/</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/<span class="built_in">builtin</span>/</span><br><span class="line">l<span class="string">'</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/builtin/</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/plugins/providers/virtualbo</span></span><br><span class="line"><span class="string">in `call'</span></span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span><br><span class="line">n<span class="string">'</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span></span><br><span class="line"><span class="string">n'</span></span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/builder.</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/runner.r</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/util/busy.rb:19</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/runner.r</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/<span class="built_in">builtin</span>/</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/<span class="built_in">builtin</span>/</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span><br><span class="line">n<span class="string">'</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span></span><br><span class="line"><span class="string">n'</span></span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/builder.</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/runner.r</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/util/busy.rb:19</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/runner.r</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/<span class="built_in">builtin</span>/</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span><br><span class="line">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/plugins/providers/virtualbo</span><br><span class="line"><span class="keyword">in</span> `call<span class="string">'</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/warden.r</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/builder.</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/runner.r</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/util/busy.rb:19</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/action/runner.r</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/machine.rb:227:</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/machine.rb:202:</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/environment.rb:</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/machine.rb:188:</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/machine.rb:188:</span></span><br><span class="line"><span class="string">        from C:/HashiCorp/Vagrant/embedded/gems/gems/vagrant-2.0.0/lib/vagrant/batch_action.rb</span></span><br></pre></td></tr></table></figure><p>最后总结就是 Windows 的默认编码不是 UTF-8，而 Linux 和 Mac 都是，这个 vagrant 还是用 ruby 写的，ruby 不懂。。貌似 ruby 对编码的格式有要求，还是啥。。。就是很纠结</p><p>然后呢，最终通过 百度知道 找到了解决方法。。</p><p>找到 Vagrantfile，就在 <code>git clone</code> 下来的 Homestead 目录中，修改如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 在 Vagrant.configure(VAGRANTFILE_API_VERSION) do |config| 后换行添加</span><br><span class="line">Encoding.default_external = &apos;GBK&apos;</span><br><span class="line"># 或</span><br><span class="line">Encoding.default_external = &apos;UTF-8&apos;</span><br><span class="line"></span><br><span class="line"># 保存</span><br><span class="line">vagrant up</span><br></pre></td></tr></table></figure><p>用 Google 找了一个多小时，发现不少人有这个问题，而且也不是 vagrant 2.0 才有的这个问题。。。但是却没有一个很好的解决方案。</p><p>可能是因为大家开发还是用 Mac 的多吧。。。</p><p>下载 virtualbox.box 文件慢的解决方法：</p><p>先离线下载，然后本地安装</p><p>就是在通过在线安装的时候，在终端会给出这个文件的下载地址，复制自己下载，然后进入到安装目录，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add laravel/homestead virtualbox.box</span><br></pre></td></tr></table></figure><p>就好了，进入目录安装，是因为不用写 Windows 的目录，写的话大概是这个样子的 <code>file://d:/virtualbox.box</code></p><p>然后进入虚拟机的安装目录，修改文件，目录大概是 <code>c:/users/XXX/.vagrant.d/boxes/laravel-VAGRANTSLASH-homestead</code></p><p>在当面目录下新建 <code>metadata_url</code> 这个文件，写入 <code>https://vagrantcloud.com/laravel/homestead</code>，这个就是 虚拟机 的下载地址，可能会有变化。然后把同级目录下的 0 那个目录改为下载的文件的版本号，比如 <code>3.0.0</code>，就好啦！</p><p>参考：<a href="https://www.codecasts.com/blog/post/vagrant-add-homestead-locally" target="_blank" rel="noopener">vagrant 添加本地 box 安装 laravel homestead</a></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;zcdll@zcdll-Infisa:~/Coder/&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;/php/Homestead$ vagrant reload --provision&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The provider &lt;span class=&quot;string&quot;&gt;&#39;virtualbox&#39;&lt;/span&gt; that was requested to back the machine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;homestead-7&#39;&lt;/span&gt; is reporting that it isn&lt;span class=&quot;string&quot;&gt;&#39;t usable on this system. The&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;reason is shown below:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;VirtualBox is complaining that the kernel module is not loaded. Please&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;run `VBoxManage --version` or open the VirtualBox GUI to see the error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;message which should contain instructions on how to fix this error.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;zcdll@zcdll-Infisa:~/Coder/test/php/Homestead$ VBoxManage --version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;WARNING: The vboxdrv kernel module is not loaded. Either there is no module&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;         available for the current kernel (4.4.0-83-generic) or it failed to&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;         load. Please recompile the kernel module and install it by&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;           sudo /sbin/vboxconfig&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;         You will not be able to start VMs until this problem is fixed.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;5.1.24r117012&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;zcdll@zcdll-Infisa:~/Coder/test/php/Homestead$ sudo /sbin/vboxconfig&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;vboxdrv.sh: Stopping VirtualBox services.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;vboxdrv.sh: Building VirtualBox kernel modules.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;vboxdrv.sh: Starting VirtualBox services.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;vboxdrv.sh: Building VirtualBox kernel modules.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;vboxdrv.sh: failed: modprobe vboxdrv failed. Please use &#39;&lt;/span&gt;dmesg&lt;span class=&quot;string&quot;&gt;&#39; to find out why.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;There were problems setting up VirtualBox.  To re-start the set-up process, run&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;  /sbin/vboxconfig&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;as root.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="折腾" scheme="http://yoursite.com/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="Laravel" scheme="http://yoursite.com/tags/Laravel/"/>
    
      <category term="Homestead" scheme="http://yoursite.com/tags/Homestead/"/>
    
  </entry>
  
  <entry>
    <title>创建远程 Git 仓库的方法</title>
    <link href="http://yoursite.com/2017/09/19/git-remote-init/"/>
    <id>http://yoursite.com/2017/09/19/git-remote-init/</id>
    <published>2017-09-19T16:47:14.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>远端创建一个目录 gittest，进入目录，然后运行 <code>git init --bare</code></p></li><li><p>本地创建一个目录 gitlocal，进入目录，运行 <code>git init</code></p></li></ol><a id="more"></a><ol start="3"><li><p>然后本地运行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">""</span></span><br><span class="line">git remote add origin zcdll@192.168.1.35:~/Coder/Projects/jumei/git/gittest</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li><li><p>端口号非 22 的时候</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url = ssh://root@baidu.com:2222/~/baidu.com/api</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;远端创建一个目录 gittest，进入目录，然后运行 &lt;code&gt;git init --bare&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本地创建一个目录 gitlocal，进入目录，运行 &lt;code&gt;git init&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-starter</title>
    <link href="http://yoursite.com/2017/09/19/gitlab-starter/"/>
    <id>http://yoursite.com/2017/09/19/gitlab-starter/</id>
    <published>2017-09-19T16:31:18.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>gitlab 社区版 默认使用 PostgreSQL 数据库，默认数据库名字 gitlabhq_production</p></li><li><p>切换到gitlab-psql用户 </p><p><code>su  - gitlab-psql</code> </p><p>但这个切换之后不好用，不如直接使用 </p><p><code>sudo gitlab-rails dbconsole</code>，或者 <code>sudo gitlab-psql -d gitlabhq_production</code></p></li></ol><a id="more"></a><ol start="3"><li><p>修改密码</p><p><code>\password gitlab</code></p></li><li><p>临时开启 PostgreSQL 的远程访问</p><ol><li><p>我们从这里路径来找到 PostgreSQL 配置文件：<code>/var/opt/gitlab/postgresql/data/postgresql.conf</code></p><p>搜索 <code>listen_addresses</code> 。将 <code>postgresql.conf</code> 文件中的 <code>listen_addresses</code> 项值设定为*</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># - Connection Settings -</span><br><span class="line"></span><br><span class="line">listen_addresses = &apos;*&apos;</span><br></pre></td></tr></table></figure></li><li><p>修改 pg_hba.conf 配置文件</p><p>在pg_hba.conf文件最底部新增一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host    all         all         0.0.0.0/0             md5</span><br></pre></td></tr></table></figure></li><li><p>最后重启Gitlab： <code>sudo gitlab-ctl restart</code></p><p>Tips: 但是这样的话，每次执行：<code>sudo gitlab-ctl reconfigure</code> 的时候，配置文件又会被还原了的。</p></li></ol></li><li><p>永久开启 PostgreSQL 的远程访问</p><p><a href="https://cong5.net/post/open-remote-connect-postgresql-with-omnibus-gitlab" target="_blank" rel="noopener">Omnibus-GitLab 配置 PostgreSQL 开启远程访问</a></p></li><li><p>重启 Gitlab</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;gitlab 社区版 默认使用 PostgreSQL 数据库，默认数据库名字 gitlabhq_production&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;切换到gitlab-psql用户 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;su  - gitlab-psql&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;但这个切换之后不好用，不如直接使用 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo gitlab-rails dbconsole&lt;/code&gt;，或者 &lt;code&gt;sudo gitlab-psql -d gitlabhq_production&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="折腾" scheme="http://yoursite.com/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="gitlab" scheme="http://yoursite.com/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>CURL 常用命令</title>
    <link href="http://yoursite.com/2017/09/19/CURL-commands/"/>
    <id>http://yoursite.com/2017/09/19/CURL-commands/</id>
    <published>2017-09-19T16:27:46.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<h6 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h6><ul><li><a href="http://bbs.et8.net/bbs/showthread.php?t=568472" target="_blank" rel="noopener">http://bbs.et8.net/bbs/showthread.php?t=568472</a></li><li><a href="http://www.ruanyifeng.com/blog/2011/09/curl.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/09/curl.html</a></li></ul><h3 id="下载单个文件，默认将输出打印到标准输出中-STDOUT-中"><a href="#下载单个文件，默认将输出打印到标准输出中-STDOUT-中" class="headerlink" title="下载单个文件，默认将输出打印到标准输出中(STDOUT)中"></a>下载单个文件，默认将输出打印到标准输出中(STDOUT)中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://www.centos.org</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="通过-o-O选项保存下载的文件到指定的文件中："><a href="#通过-o-O选项保存下载的文件到指定的文件中：" class="headerlink" title="通过-o/-O选项保存下载的文件到指定的文件中："></a>通过-o/-O选项保存下载的文件到指定的文件中：</h3><blockquote><ol><li>-o：将文件保存为命令行中指定的文件名的文件中</li><li>-O：使用URL中默认的文件名保存文件到本地</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 将文件下载到本地并命名为mygettext.html</span><br><span class="line">  curl -o mygettext.html http://www.gnu.org/software/gettext/manual/gettext.html</span><br><span class="line"> </span><br><span class="line"># 将文件保存到本地并命名为gettext.html</span><br><span class="line">  curl -O http://www.gnu.org/software/gettext/manual/gettext.html</span><br></pre></td></tr></table></figure><p>同样可以使用转向字符”&gt;”对输出进行转向输出</p><h3 id="同时获取多个文件"><a href="#同时获取多个文件" class="headerlink" title="同时获取多个文件"></a>同时获取多个文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O URL1 -O URL2</span><br></pre></td></tr></table></figure><p>若同时从同一站点下载多个文件时，curl会尝试重用链接(connection)。</p><p>通过-L选项进行重定向<br>默认情况下CURL不会发送HTTP Location headers(重定向).当一个被请求页面移动到另一个站点时，会发送一个HTTP Loaction header作为请求，然后将请求重定向到新的地址上。<br>例如：访问google.com时，会自动将地址重定向到google.com.hk上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl http://www.google.com</span><br><span class="line">&lt;HTML&gt;</span><br><span class="line">&lt;HEAD&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">    &lt;TITLE&gt;302 Moved&lt;/TITLE&gt;</span><br><span class="line">&lt;/HEAD&gt;</span><br><span class="line">&lt;BODY&gt;</span><br><span class="line">    &lt;H1&gt;302 Moved&lt;/H1&gt;</span><br><span class="line">    The document has moved</span><br><span class="line">    &lt;A HREF=&quot;http://www.google.com.hk/url?sa=p&amp;amp;hl=zh-CN&amp;amp;pref=hkredirect&amp;amp;pval=yes&amp;amp;q=http://www.google.com.hk/&amp;amp;ust=1379402837567135amp;usg=AFQjCNF3o7umf3jyJpNDPuF7KTibavE4aA&quot;&gt;here&lt;/A&gt;.</span><br><span class="line">&lt;/BODY&gt;</span><br><span class="line">&lt;/HTML&gt;</span><br></pre></td></tr></table></figure><p>上述输出说明所请求的档案被转移到了<a href="http://www.google.com.hk。" target="_blank" rel="noopener">http://www.google.com.hk。</a></p><p>这是可以通过使用-L选项进行强制重定向</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">让curl使用地址重定向，此时会查询google.com.hk站点</span><br><span class="line">curl -L http://www.google.com</span><br></pre></td></tr></table></figure><h3 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h3><p>通过使用-C选项可对大文件使用断点续传功能，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 当文件在下载完成之前结束该进程</span><br><span class="line">$ curl -O http://www.gnu.org/software/gettext/manual/gettext.html</span><br><span class="line">##############             20.1%</span><br><span class="line"></span><br><span class="line"># 通过添加-C选项继续对该文件进行下载，已经下载过的文件不会被重新下载</span><br><span class="line">curl -C - -O http://www.gnu.org/software/gettext/manual/gettext.html</span><br><span class="line">###############            21.1%</span><br></pre></td></tr></table></figure><h3 id="对CURL使用网络限速"><a href="#对CURL使用网络限速" class="headerlink" title="对CURL使用网络限速"></a>对CURL使用网络限速</h3><p>通过–limit-rate选项对CURL的最大网络使用进行限制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下载速度最大不会超过1000B/second</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --limit-rate 1000B -O http://www.gnu.org/software/gettext/manual/gettext.html</span><br></pre></td></tr></table></figure><p>下载指定时间内修改过的文件</p><p>当下载一个文件时，可对该文件的最后修改日期进行判断，如果该文件在指定日期内修改过，就进行下载，否则不下载。<br>该功能可通过使用-z选项来实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">若yy.html文件在2011/12/21之后有过更新才会进行下载</span><br><span class="line">curl -z 21-Dec-11 http://www.example.com/yy.html</span><br></pre></td></tr></table></figure><h3 id="CURL授权"><a href="#CURL授权" class="headerlink" title="CURL授权"></a>CURL授权</h3><p>在访问需要授权的页面时，可通过-u选项提供用户名和密码进行授权</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -u username:password URL</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 通常的做法是在命令行只输入用户名，之后会提示输入密码，这样可以保证在查看历史记录时不会将密码泄露</span><br><span class="line">curl -u username URL</span><br></pre></td></tr></table></figure><h3 id="从FTP服务器下载文件"><a href="#从FTP服务器下载文件" class="headerlink" title="从FTP服务器下载文件"></a>从FTP服务器下载文件</h3><p>CURL同样支持FTP下载，若在url中指定的是某个文件路径而非具体的某个要下载的文件名，CURL则会列出该目录下的所有文件名而并非下载该目录下的所有文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 列出public_html下的所有文件夹和文件</span><br><span class="line">curl -u ftpuser:ftppass -O ftp://ftp_server/public_html/</span><br><span class="line"></span><br><span class="line"># 下载xss.php文件</span><br><span class="line">curl -u ftpuser:ftppass -O ftp://ftp_server/public_html/xss.php</span><br></pre></td></tr></table></figure><h3 id="上传文件到FTP服务器"><a href="#上传文件到FTP服务器" class="headerlink" title="上传文件到FTP服务器"></a>上传文件到FTP服务器</h3><p>通过 -T 选项可将指定的本地文件上传到FTP服务器上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 将myfile.txt文件上传到服务器</span><br><span class="line">curl -u ftpuser:ftppass -T myfile.txt ftp://ftp.testserver.com</span><br><span class="line"></span><br><span class="line"># 同时上传多个文件</span><br><span class="line">curl -u ftpuser:ftppass -T &quot;&#123;file1,file2&#125;&quot; ftp://ftp.testserver.com</span><br><span class="line"></span><br><span class="line"># 从标准输入获取内容保存到服务器指定的文件中</span><br><span class="line">curl -u ftpuser:ftppass -T - ftp://ftp.testserver.com/myfile_1.txt</span><br></pre></td></tr></table></figure><h3 id="获取更多信息"><a href="#获取更多信息" class="headerlink" title="获取更多信息"></a>获取更多信息</h3><p>通过使用 -v 和 -trace获取更多的链接信息</p><h3 id="通过字典查询单词"><a href="#通过字典查询单词" class="headerlink" title="通过字典查询单词"></a>通过字典查询单词</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查询bash单词的含义</span><br><span class="line">curl dict://dict.org/d:bash</span><br><span class="line"></span><br><span class="line"># 列出所有可用词典</span><br><span class="line">curl dict://dict.org/show:db</span><br><span class="line"></span><br><span class="line"># 在foldoc词典中查询bash单词的含义</span><br><span class="line">curl dict://dict.org/d:bash:foldoc</span><br></pre></td></tr></table></figure><h3 id="为CURL设置代理"><a href="#为CURL设置代理" class="headerlink" title="为CURL设置代理"></a>为CURL设置代理</h3><p>x 选项可以为CURL添加代理功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 指定代理主机和端口</span><br><span class="line">curl -x proxysever.test.com:3128 http://google.co.in</span><br></pre></td></tr></table></figure><h3 id="保存与使用网站cookie信息"><a href="#保存与使用网站cookie信息" class="headerlink" title="保存与使用网站cookie信息"></a>保存与使用网站cookie信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 将网站的cookies信息保存到sugarcookies文件中</span><br><span class="line">curl -D sugarcookies http://localhost/sugarcrm/index.php</span><br><span class="line"></span><br><span class="line"># 使用上次保存的cookie信息</span><br><span class="line">curl -b sugarcookies http://localhost/sugarcrm/index.php</span><br></pre></td></tr></table></figure><h3 id="传递请求数据"><a href="#传递请求数据" class="headerlink" title="传递请求数据"></a>传递请求数据</h3><p>默认curl使用GET方式请求数据，这种方式下直接通过URL传递数据<br>可以通过 –data/-d 方式指定使用POST方式传递数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># GET</span><br><span class="line">curl -u username https://api.github.com/user?access_token=XXXXXXXXXX</span><br><span class="line"></span><br><span class="line"># POST</span><br><span class="line">curl -u username --data &quot;param1=value1&amp;param2=value&quot; https://api.github.com</span><br><span class="line"></span><br><span class="line"># 也可以指定一个文件，将该文件中的内容当作数据传递给服务器端</span><br><span class="line">curl --data @filename https://github.api.com/authorizations</span><br></pre></td></tr></table></figure><p>注：默认情况下，通过POST方式传递过去的数据中若有特殊字符，首先需要将特殊字符转义在传递给服务器端，如value值中包含有空格，则需要先将空格转换成%20，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -d &quot;value%201&quot; http://hostname.com</span><br></pre></td></tr></table></figure><p>在新版本的CURL中，提供了新的选项 –data-urlencode，通过该选项提供的参数会自动转义特殊字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --data-urlencode &quot;value 1&quot; http://hostname.com</span><br></pre></td></tr></table></figure><p>除了使用GET和POST协议外，还可以通过 -X 选项指定其它协议，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -I -X DELETE https://api.github.cim</span><br></pre></td></tr></table></figure><p>上传文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --form &quot;fileupload=@filename.txt&quot; http://hostname/resource</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bbs.et8.net/bbs/showthread.php?t=568472&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://bbs.et8.net/bbs/showthread.php?t=568472&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/09/curl.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.ruanyifeng.com/blog/2011/09/curl.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;下载单个文件，默认将输出打印到标准输出中-STDOUT-中&quot;&gt;&lt;a href=&quot;#下载单个文件，默认将输出打印到标准输出中-STDOUT-中&quot; class=&quot;headerlink&quot; title=&quot;下载单个文件，默认将输出打印到标准输出中(STDOUT)中&quot;&gt;&lt;/a&gt;下载单个文件，默认将输出打印到标准输出中(STDOUT)中&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl http://www.centos.org&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="CURL" scheme="http://yoursite.com/tags/CURL/"/>
    
  </entry>
  
  <entry>
    <title>VMware 中的 Ubuntu 突然不能上网的原因之一</title>
    <link href="http://yoursite.com/2017/09/19/vmware-ubuntu-network-bug/"/>
    <id>http://yoursite.com/2017/09/19/vmware-ubuntu-network-bug/</id>
    <published>2017-09-19T16:07:49.000Z</published>
    <updated>2020-08-04T07:29:12.116Z</updated>
    
    <content type="html"><![CDATA[<p>今早上醒来 VMware 里面的 Ubuntu 突然不能上网了，在外面通过 SecureCRT 也连不进去。</p><p>找了半天原因，最后发现应该是前一段时间整 <strong>Laravel Homestead</strong> 的时候，安装了 <strong>VirtualBox</strong>，然后 VMware 的<strong>虚拟网络编辑器</strong>出问题了。</p><p>解决办法：</p><a id="more"></a><ol><li>打开 VMware 的 <strong>编辑–虚拟网络编辑器</strong></li><li>点击右下角的<strong>更改设置</strong>，需要管理员权限授权</li><li>之后会看到出现 VMnet0 的选项，桥接模式</li><li>点击下方的桥接到，选择<strong>宿主机</strong>的网卡，然后确定就好了。</li><li>不用重启。</li></ol><p><img src="../images/snipaste20170819_114253.png" alt="打开虚拟网络编辑器"></p><p><img src="../images/snipaste20170819_114326.png" alt="选择桥接到的网卡"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今早上醒来 VMware 里面的 Ubuntu 突然不能上网了，在外面通过 SecureCRT 也连不进去。&lt;/p&gt;
&lt;p&gt;找了半天原因，最后发现应该是前一段时间整 &lt;strong&gt;Laravel Homestead&lt;/strong&gt; 的时候，安装了 &lt;strong&gt;VirtualBox&lt;/strong&gt;，然后 VMware 的&lt;strong&gt;虚拟网络编辑器&lt;/strong&gt;出问题了。&lt;/p&gt;
&lt;p&gt;解决办法：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="桥接模式" scheme="http://yoursite.com/tags/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Vmware" scheme="http://yoursite.com/tags/Vmware/"/>
    
  </entry>
  
  <entry>
    <title>Flask-Vue</title>
    <link href="http://yoursite.com/2017/02/20/flask-vue-restful/"/>
    <id>http://yoursite.com/2017/02/20/flask-vue-restful/</id>
    <published>2017-02-20T18:05:01.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>Notes：感谢 <a href="http://www.jianshu.com/u/272cd4b53d57" target="_blank" rel="noopener"><strong>非梦nj</strong></a> 分享的教程，让我明白了怎么把 Flask 和 Vue 结合起来，写前后端分离的 Web 应用，以及解决 <strong>注册登录</strong>，<strong>后台权限管理</strong>，<strong>CSRF</strong>，<strong>部署</strong> 等等，以及一堆的小 bug。比心 ❤</p><p>Flask + Vue 2.x + Restful API，A web application framework</p><p>大概是 Flask +Jinja2 + Flask-Admin + Flask-JWT + Vue 2.x + Vuex + Vue-Resource + Vue-Router + Bootstrap</p><p>感觉这个项目再改改，就能当做一个模板来用了。</p><a id="more"></a><h2 id="Installation-Steps"><a href="#Installation-Steps" class="headerlink" title="Installation Steps"></a>Installation Steps</h2><ol><li><p>Install Vue dependencies</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install webpack -g</span><br><span class="line">sudo npm install vue-cli -g</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>PS：Ubuntu 安装 node</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -C /usr/<span class="built_in">local</span> --strip-components 1 -xJf node-v6.9.5-linux-x64.tar.xz\</span><br></pre></td></tr></table></figure></li><li><p>Set up Python 2.x virtualenv</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv -p ( python2.x location) venv</span><br></pre></td></tr></table></figure></li><li><p>install Python dependencies</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt <span class="comment"># 不能加 sudo</span></span><br></pre></td></tr></table></figure><ol><li><p>这个错误比较简单，跟下面这个错误大概都是由 psycopg2 这玩意引起的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Downloading https://pypi.doubanio.com/packages/86/fd/cc8315be63a41fe000cce20482a917e874cdc1151e62cb0141f5e55f711e/psycopg2-2.6.1.tar.gz (371kB)</span><br><span class="line">    100% |████████████████████████████████| 378kB 13.9MB/s </span><br><span class="line">    Complete output from <span class="built_in">command</span> python setup.py egg_info:</span><br><span class="line">    running egg_info</span><br><span class="line">    creating pip-egg-info/psycopg2.egg-info</span><br><span class="line">    writing pip-egg-info/psycopg2.egg-info/PKG-INFO</span><br><span class="line">    writing top-level names to pip-egg-info/psycopg2.egg-info/top_level.txt</span><br><span class="line">    writing dependency_links to pip-egg-info/psycopg2.egg-info/dependency_links.txt</span><br><span class="line">    writing manifest file <span class="string">'pip-egg-info/psycopg2.egg-info/SOURCES.txt'</span></span><br><span class="line">    warning: manifest_maker: standard file <span class="string">'-c'</span> not found</span><br><span class="line">    </span><br><span class="line">    Error: pg_config executable not found.</span><br><span class="line">    </span><br><span class="line">    Please add the directory containing pg_config to the PATH</span><br><span class="line">    or specify the full executable path with the option:</span><br><span class="line">    </span><br><span class="line">        python setup.py build_ext --pg-config /path/to/pg_config build ...</span><br><span class="line">    </span><br><span class="line">    or with the pg_config option <span class="keyword">in</span> <span class="string">'setup.cfg'</span>.</span><br><span class="line">    </span><br><span class="line">    ----------------------------------------</span><br><span class="line">Command <span class="string">"python setup.py egg_info"</span> failed with error code 1 <span class="keyword">in</span> /tmp/pip-build-3t7nlp/psycopg2/</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Python 2</span><br><span class="line"></span><br><span class="line">sudo apt install libpq-dev python-dev</span><br><span class="line">Python 3</span><br><span class="line"></span><br><span class="line">sudo apt install libpq-dev python3-dev</span><br></pre></td></tr></table></figure><p>  <a href="http://stackoverflow.com/questions/5420789/how-to-install-psycopg2-with-pip-on-python" target="_blank" rel="noopener">How to install psycopg2 with “pip” on Python?</a></p></li><li><p>这个错误出现后，我搜到了2篇 stackoverflow ，安了好多东西。第二个其实是第一个的补充。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">Running setup.py install <span class="keyword">for</span> cffi ... error</span><br><span class="line">    Complete output from <span class="built_in">command</span> /usr/bin/python -u -c <span class="string">"import setuptools, tokenize;__file__='/tmp/pip-build-XbZK8U/cffi/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code, __file__, 'exec'))"</span> install --record /tmp/pip-pmAIt5-record/install-record.txt --single-version-externally-managed --compile:</span><br><span class="line">    Package libffi was not found <span class="keyword">in</span> the pkg-config search path.</span><br><span class="line">    Perhaps you should add the directory containing `libffi.pc<span class="string">'</span></span><br><span class="line"><span class="string">    to the PKG_CONFIG_PATH environment variable</span></span><br><span class="line"><span class="string">    No package '</span>libffi<span class="string">' found</span></span><br><span class="line"><span class="string">    Package libffi was not found in the pkg-config search path.</span></span><br><span class="line"><span class="string">    Perhaps you should add the directory containing `libffi.pc'</span></span><br><span class="line">    to the PKG_CONFIG_PATH environment variable</span><br><span class="line">    No package <span class="string">'libffi'</span> found</span><br><span class="line">    Package libffi was not found <span class="keyword">in</span> the pkg-config search path.</span><br><span class="line">    Perhaps you should add the directory containing `libffi.pc<span class="string">'</span></span><br><span class="line"><span class="string">    to the PKG_CONFIG_PATH environment variable</span></span><br><span class="line"><span class="string">    No package '</span>libffi<span class="string">' found</span></span><br><span class="line"><span class="string">    Package libffi was not found in the pkg-config search path.</span></span><br><span class="line"><span class="string">    Perhaps you should add the directory containing `libffi.pc'</span></span><br><span class="line">    to the PKG_CONFIG_PATH environment variable</span><br><span class="line">    No package <span class="string">'libffi'</span> found</span><br><span class="line">    Package libffi was not found <span class="keyword">in</span> the pkg-config search path.</span><br><span class="line">    Perhaps you should add the directory containing `libffi.pc<span class="string">'</span></span><br><span class="line"><span class="string">    to the PKG_CONFIG_PATH environment variable</span></span><br><span class="line"><span class="string">    No package '</span>libffi<span class="string">' found</span></span><br><span class="line"><span class="string">    running install</span></span><br><span class="line"><span class="string">    running build</span></span><br><span class="line"><span class="string">    running build_py</span></span><br><span class="line"><span class="string">    creating build</span></span><br><span class="line"><span class="string">    creating build/lib.linux-x86_64-2.7</span></span><br><span class="line"><span class="string">    creating build/lib.linux-x86_64-2.7/cffi</span></span><br><span class="line"><span class="string">    copying cffi/gc_weakref.py -&gt; build/lib.linux-x86_64-2.7/cffi</span></span><br><span class="line"><span class="string">    copying cffi/__init__.py -&gt; build/lib.linux-x86_64-2.7/cffi</span></span><br><span class="line"><span class="string">    copying cffi/setuptools_ext.py -&gt; build/lib.linux-x86_64-2.7/cffi</span></span><br><span class="line"><span class="string">    copying cffi/backend_ctypes.py -&gt; build/lib.linux-x86_64-2.7/cffi</span></span><br><span class="line"><span class="string">    copying cffi/ffiplatform.py -&gt; build/lib.linux-x86_64-2.7/cffi</span></span><br><span class="line"><span class="string">    copying cffi/cparser.py -&gt; build/lib.linux-x86_64-2.7/cffi</span></span><br><span class="line"><span class="string">    copying cffi/model.py -&gt; build/lib.linux-x86_64-2.7/cffi</span></span><br><span class="line"><span class="string">    copying cffi/lock.py -&gt; build/lib.linux-x86_64-2.7/cffi</span></span><br><span class="line"><span class="string">    copying cffi/vengine_gen.py -&gt; build/lib.linux-x86_64-2.7/cffi</span></span><br><span class="line"><span class="string">    copying cffi/cffi_opcode.py -&gt; build/lib.linux-x86_64-2.7/cffi</span></span><br><span class="line"><span class="string">    copying cffi/commontypes.py -&gt; build/lib.linux-x86_64-2.7/cffi</span></span><br><span class="line"><span class="string">    copying cffi/vengine_cpy.py -&gt; build/lib.linux-x86_64-2.7/cffi</span></span><br><span class="line"><span class="string">    copying cffi/api.py -&gt; build/lib.linux-x86_64-2.7/cffi</span></span><br><span class="line"><span class="string">    copying cffi/recompiler.py -&gt; build/lib.linux-x86_64-2.7/cffi</span></span><br><span class="line"><span class="string">    copying cffi/verifier.py -&gt; build/lib.linux-x86_64-2.7/cffi</span></span><br><span class="line"><span class="string">    copying cffi/_cffi_include.h -&gt; build/lib.linux-x86_64-2.7/cffi</span></span><br><span class="line"><span class="string">    copying cffi/parse_c_type.h -&gt; build/lib.linux-x86_64-2.7/cffi</span></span><br><span class="line"><span class="string">    copying cffi/_embedding.h -&gt; build/lib.linux-x86_64-2.7/cffi</span></span><br><span class="line"><span class="string">    running build_ext</span></span><br><span class="line"><span class="string">    building '</span>_cffi_backend<span class="string">' extension</span></span><br><span class="line"><span class="string">    creating build/temp.linux-x86_64-2.7</span></span><br><span class="line"><span class="string">    creating build/temp.linux-x86_64-2.7/c</span></span><br><span class="line"><span class="string">    x86_64-linux-gnu-gcc -pthread -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fno-strict-aliasing -Wdate-time -D_FORTIFY_SOURCE=2 -g -fstack-protector-strong -Wformat -Werror=format-security -fPIC -DUSE__THREAD -I/usr/include/ffi -I/usr/include/libffi -I/usr/include/python2.7 -c c/_cffi_backend.c -o build/temp.linux-x86_64-2.7/c/_cffi_backend.o</span></span><br><span class="line"><span class="string">    c/_cffi_backend.c:15:17: fatal error: ffi.h: 没有那个文件或目录</span></span><br><span class="line"><span class="string">    compilation terminated.</span></span><br><span class="line"><span class="string">    error: command '</span>x86_64-linux-gnu-gcc<span class="string">' failed with exit status 1</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    ----------------------------------------</span></span><br><span class="line"><span class="string">Command "/usr/bin/python -u -c "import setuptools, tokenize;__file__='</span>/tmp/pip-build-XbZK8U/cffi/setup.py<span class="string">';f=getattr(tokenize, '</span>open<span class="string">', open)(__file__);code=f.read().replace('</span>\r\n<span class="string">', '</span>\n<span class="string">');f.close();exec(compile(code, __file__, '</span><span class="built_in">exec</span><span class="string">'))" install --record /tmp/pip-pmAIt5-record/install-record.txt --single-version-externally-managed --compile" failed with error code 1 in /tmp/pip-build-XbZK8U/cffi/</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential autoconf libtool pkg-config python-opengl python-imaging python-pyrex python-pyside.qtopengl idle-python2.7 qt4-dev-tools qt4-designer libqtgui4 libqtcore4 libqt4-xml libqt4-test libqt4-script libqt4-network libqt4-dbus python-qt4 python-qt4-gl libgle3 python-dev libssl-dev</span><br></pre></td></tr></table></figure><p> <a href="http://stackoverflow.com/questions/26053982/error-setup-script-exited-with-error-command-x86-64-linux-gnu-gcc-failed-wit" target="_blank" rel="noopener">error: Setup script exited with error: command ‘x86_64-linux-gnu-gcc’ failed with exit status 1</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install cffi  <span class="comment"># 我中间执行了一遍这个命令，应该是必要的</span></span><br></pre></td></tr></table></figure><p> <a href="http://stackoverflow.com/questions/35144550/how-to-install-cryptography-on-ubuntu" target="_blank" rel="noopener">How to install cryptography on ubuntu?</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential libssl-dev libffi-dev python-dev</span><br><span class="line"></span><br><span class="line">获取:1 http://mirrors.tuna.tsinghua.edu.cn/ubuntu xenial/main amd64 libffi-dev amd64 3.2.1-4 [161 kB]</span><br><span class="line">其实就多了 libffi-dev 这个包</span><br></pre></td></tr></table></figure><p>至此，pip install 不报错，完成了。</p></li></ol></li><li><p>搭建数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先删除项目根目录下的 migrations 目录 和　data-dev.sqlite　文件</span></span><br><span class="line"></span><br><span class="line">python manage.py db init</span><br><span class="line">python manage.py db migrate -m <span class="string">"init"</span></span><br><span class="line">python manage.py db upgrade</span><br><span class="line">python manage.py initrole  <span class="comment"># 建立角色，管理员</span></span><br></pre></td></tr></table></figure></li><li><p>构建完了需要复制文件，从 Vue 的 dist 目录到 Flask 的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dist/index.html  --&gt;  app/templates/index.html</span><br><span class="line">dist/static/*  --&gt;  app/static/</span><br></pre></td></tr></table></figure></li><li><p>运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动前端</span></span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动后端</span></span><br><span class="line">python manage.py runserver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 Ubuntu 16.04 下测试可以运行</span></span><br></pre></td></tr></table></figure><p>​</p></li></ol><p>copy from  <a href="https://code.csdn.net/Kevin_QQ/vue-tutorial/tree/master" target="_blank" rel="noopener">非梦nj/vue-tutorial</a> <a href="http://www.jianshu.com/p/ab778fde3b99" target="_blank" rel="noopener">简读-微信公众号RSS</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Notes：感谢 &lt;a href=&quot;http://www.jianshu.com/u/272cd4b53d57&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;非梦nj&lt;/strong&gt;&lt;/a&gt; 分享的教程，让我明白了怎么把 Flask 和 Vue 结合起来，写前后端分离的 Web 应用，以及解决 &lt;strong&gt;注册登录&lt;/strong&gt;，&lt;strong&gt;后台权限管理&lt;/strong&gt;，&lt;strong&gt;CSRF&lt;/strong&gt;，&lt;strong&gt;部署&lt;/strong&gt; 等等，以及一堆的小 bug。比心 ❤&lt;/p&gt;
&lt;p&gt;Flask + Vue 2.x + Restful API，A web application framework&lt;/p&gt;
&lt;p&gt;大概是 Flask +Jinja2 + Flask-Admin + Flask-JWT + Vue 2.x + Vuex + Vue-Resource + Vue-Router + Bootstrap&lt;/p&gt;
&lt;p&gt;感觉这个项目再改改，就能当做一个模板来用了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
      <category term="Jinja2" scheme="http://yoursite.com/tags/Jinja2/"/>
    
      <category term="Vuex" scheme="http://yoursite.com/tags/Vuex/"/>
    
      <category term="JWT" scheme="http://yoursite.com/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 主机和虚拟机通信，主机访问虚拟机的 Web 服务 &amp; Docker 初探</title>
    <link href="http://yoursite.com/2017/02/18/Ubuntu-zhu-ji-he-xu-ni-ji-tong-xin-docker/"/>
    <id>http://yoursite.com/2017/02/18/Ubuntu-zhu-ji-he-xu-ni-ji-tong-xin-docker/</id>
    <published>2017-02-18T14:54:51.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>近些天随着在公司上手新的项目，需要学的东西也越来越多，同时相关配套服务上，也有学习。比如 Docker。</p><p>周末想着在家搭建一套，遂记录下来。</p><a id="more"></a><hr><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ol><li>数据库用的 MongoDB，搭建在虚拟机中的 Docker 中</li><li>python 2 实现 web 服务，用 virtualenv 管理，在虚拟机中</li><li>环境整体在 Vmware Workstation 的 Ubuntu 16.04 虚拟机中，虚拟机搭建在 Windows 10 下</li><li>最终可以在主机上访问 python 的 web 服务</li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="Ubuntu-虚拟环境的搭建"><a href="#Ubuntu-虚拟环境的搭建" class="headerlink" title="Ubuntu 虚拟环境的搭建"></a>Ubuntu 虚拟环境的搭建</h4><ol><li>本来 Docker 直接装在了 Windows 10 中，然后发现 VMware Workstation 就打不开了，原因是与 Windows 10 自带的 <strong>Hyper-V</strong> 冲突了。而 Windows 下的 Docker 是依赖 Hyper-V的。原因如下：<a href="http://stackoverflow.com/questions/39858200/vmware-workstation-and-device-credential-guard-are-not-compatible" target="_blank" rel="noopener">VMware Workstation and Device/Credential Guard are not compatible</a>，<a href="https://www.zhihu.com/question/21260608" target="_blank" rel="noopener">hyper-v 和 vmware 不兼容，是技术的原因？还是商业原因？</a> ，<a href="https://www.zhihu.com/question/24981958" target="_blank" rel="noopener">在 Windows 10上,Vmware Workstation和Hyper-V 深层次上有何优劣？</a> 。</li><li>把 Hyper-V 关了后，VMware Workstation 就能用了，也就是在 Windows 下 Docker 和 VMWare Workstation 得<strong>二选一</strong>，我最终选了 VMware Workstation。回想当时在 Windows 下安装 Docker 时，确实弹出了一个提示，说 Hyper-V 啥啥的，和 Virtualbox 冲突，也没在意，就直接把 Virtualbox 删了，当时还手残把 Dropbox 给删了。。。</li></ol><h4 id="虚拟机开启桥接模式"><a href="#虚拟机开启桥接模式" class="headerlink" title="虚拟机开启桥接模式"></a>虚拟机开启桥接模式</h4><ol><li><p>虚拟机安装的时候默认是 <strong>NAT 模式</strong>，虽然后来发现通过端口映射也可以让主机访问虚拟机 web 服务，但是较麻烦，不如直接 <strong>桥接模式</strong> 来的爽快。</p></li><li><p>这一步最麻烦了，折腾了好久，感觉可能是因为新建虚拟机的时候没有选择 <strong>桥接模式</strong> 所以一些设置没自动配置好。</p></li><li><p>打开 VMware Workstation 中的 <strong>虚拟网络编辑器</strong>，会发现只有 <strong>VMnet1</strong> 和 <strong>VMnet2</strong>，但是，终点是但是，点击右下角那个 <strong>更改设置</strong> 后有可能就出现 <strong>VMnet0</strong> 了。。。出现 <strong>桥接网卡</strong> 后记得选择一下 <strong>物理网卡</strong>。<br><img src="/images/snipaste20170219_002343.png" alt="一开始无桥接模式的虚拟网卡"><br><img src="/images/snipaste20170219_003043.png" alt="一开始无桥接模式的虚拟网卡"></p></li><li><p>网上有教程说，点击左下角的 <strong>还原默认设置</strong> 可以显示出 桥接网卡 <strong>VMnet0</strong> ，但是我试了好几次都不行，在这点上纠结了好久，试了好多方法，都没起效。</p></li><li><p>点击 <strong>更改设置</strong> 后出现 <strong>VMnet0</strong>，当然了，这很有可能是因为我做了如下操作才出现的。</p><h5 id="给-物理网卡-安装-VMware-Bridge-Protocol"><a href="#给-物理网卡-安装-VMware-Bridge-Protocol" class="headerlink" title="给 物理网卡 安装 VMware Bridge Protocol"></a>给 <strong>物理网卡</strong> 安装 <strong>VMware Bridge Protocol</strong></h5><ol><li>依次打开，控制面板–网络和Internet–网络和共享中心–当前系统正在使用的物理网卡（有线或无线）–（状态）–属性–安装–服务，看到如下界面，虽然提示啥也找不到，不过别担心。<br><img src="/images/snipaste20170219_012831.png" alt="啥都没有"></li><li>一次打开，从磁盘安装–浏览–（找到 VMware Workstation 的安装目录），选择 netbridge.inf，点击确定，会看到找到了 VMware Bridge Protocol 服务。<br><img src="/images/snipaste20170219_013801.png" alt="找到 netbridge.inf"><br><img src="/images/snipaste20170219_013926.png" alt="看到 VMware Bridge Protocol 服务"></li><li>最后确认 <strong>VMware Bridge Protocol 服务</strong> 被勾选上，重启系统，再重复前面的操作，应该就能看到 <strong>桥接模式</strong> 的网卡了。<br><img src="/images/snipaste20170219_013958.png" alt="VMware Bridge Protocol 服务"></li><li>修改虚拟机的 IP 为固定 IP，和主机在一个网段内，注意 <strong>网关</strong> 和 <strong>DNS</strong> 的配置，用 Ubuntu 的 NetworkManager 方便快捷。记得重启 NetworkManager 。测试网络是否可用。</li></ol><h5 id="关闭-Ubuntu-防火墙"><a href="#关闭-Ubuntu-防火墙" class="headerlink" title="关闭 Ubuntu 防火墙"></a>关闭 Ubuntu 防火墙</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw <span class="built_in">disable</span></span><br><span class="line"><span class="comment"># 查看防火墙状态</span></span><br><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure><h5 id="设置-Windows-防火墙"><a href="#设置-Windows-防火墙" class="headerlink" title="设置 Windows 防火墙"></a>设置 Windows 防火墙</h5><ol><li><p>这时候应该是可以从 主机 ping 通 虚拟机了，虚拟机可能 ping 不通 主机</p></li><li><p>依次打开，Windows 防火墙–高级规则–入站规则，找到 <strong>文件和打印机共享(回显请求 - ICMPv4-In)</strong> 的两项，然后启用他们。</p><p><img src="/images/snipaste20170219_015320.png" alt="文件和打印机共享(回显请求 - ICMPv4-In)"></p></li><li><p>这时候应该是，主机和虚拟机可以互相 ping 通。同时可以访问外网。</p></li></ol></li></ol><h4 id="MongoDB-搭建"><a href="#MongoDB-搭建" class="headerlink" title="MongoDB 搭建"></a>MongoDB 搭建</h4><ol><li>而由于之前在 VMware Workstation 中搭建的 Ubuntu 键盘搞错了，一直是欧洲键盘，索性今天一起重装了。本以为要花很长时间，没想到很快就完成了。等 Ubuntu 的基础环境搭建好后，就是安装 Docker，参考 <a href="https://yeasy.gitbooks.io/docker_practice/content/" target="_blank" rel="noopener">Docker — 从入门到实践</a>，感觉这本书写的很好，很全面，很细致，很新，作者一直在更新。加速器用的阿里云。</li><li>由于对 Docker 只是粗浅的了解，很多坑还没踩，一开始 run Mongo 的时候总不对，最后感谢小伙伴马同学帮忙搞定，正确的命令如下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name <span class="built_in">test</span>-mongo -d -p 27017:27017 mongo</span><br></pre></td></tr></table></figure><ol start="3"><li>这样就把 mongo 加载到了本机 27017 端口上，不写端口映射的话，可能会连接不上。之后每次只要运行如下命令即刻启动 Docker 下的 mongo</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start <span class="built_in">test</span>-mongo</span><br></pre></td></tr></table></figure><h4 id="python-virtualenv-环境搭建"><a href="#python-virtualenv-环境搭建" class="headerlink" title="python virtualenv 环境搭建"></a>python virtualenv 环境搭建</h4><ol><li>根据官方文档来即刻，注意 python 版本，<a href="http://pythonguidecn.readthedocs.io/zh/latest/dev/virtualenvs.html" target="_blank" rel="noopener">Python 指南-虚拟环境</a> </li><li>搭建完后，注意先安装所需要的依赖，这步很重要，前提是换 pip 源，记得要添加 trust-host，免得报错。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd ~</span></span><br><span class="line"><span class="comment"># mkdir .pip</span></span><br><span class="line"><span class="comment"># touch pip.conf</span></span><br><span class="line"><span class="comment"># vi pip.conf</span></span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line">index-url = https://pypi.douban.com/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host=pypi.douban.com</span><br></pre></td></tr></table></figure><ol start="3"><li>之后启动 python 之前，先修改 mongo 数据库的位置，在项目根目录下 .env 文件中</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><li>先在本地测试是否成功启动 web 服务，确认后再在主机测试。</li><li>如果本地无法打开，很有可能是 mongo 没有配置好，注意看 python 的log，如果是主机打不开，记得多重启。。</li></ol><h3 id="接下来要实现的"><a href="#接下来要实现的" class="headerlink" title="接下来要实现的"></a>接下来要实现的</h3><ol><li>python web 应用运行在 Docker 中</li><li>从主机上的 PyCharm 访问 Docker 中的项目，实现编辑。</li></ol><p>参考链接：</p><p><a href="http://www.jianshu.com/p/a2df6c801b28" target="_blank" rel="noopener">VMware Workstation - 网卡无法桥接</a></p><p><a href="http://chris2013.blog.51cto.com/6931081/1209278" target="_blank" rel="noopener">虚拟机ping不通主机，但是主机可以ping通虚拟机</a></p><p><a href="http://www.arthurtoday.com/2013/12/ubuntu-ufw-add-firewall-rules.html" target="_blank" rel="noopener">Ubuntu 用 ufw 指令快速啟用和設定防火牆</a></p><p><a href="http://graybull.is-programmer.com/posts/36941.html" target="_blank" rel="noopener">从外网访问VMware虚拟机的Web服务</a></p><hr><h4 style="text-align:center">mark... </h4><h4 style="text-align:center">such a day</h4><h4 style="text-align:center">引用看**《人类简史》**得到的一个**妙论**：推动人类进步的，一切都TM是想象。。。 </h4><h5 style="text-align:right">二零一七年元月二十三日·孤夜</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近些天随着在公司上手新的项目，需要学的东西也越来越多，同时相关配套服务上，也有学习。比如 Docker。&lt;/p&gt;
&lt;p&gt;周末想着在家搭建一套，遂记录下来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="Vmware Workstation" scheme="http://yoursite.com/tags/Vmware-Workstation/"/>
    
      <category term="桥接模式" scheme="http://yoursite.com/tags/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="ping" scheme="http://yoursite.com/tags/ping/"/>
    
      <category term="Web 服务" scheme="http://yoursite.com/tags/Web-%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>怎么升级 Linode 上 Ubuntu 的内核</title>
    <link href="http://yoursite.com/2016/12/16/zen-me-sheng-ji-ubuntu-nei-he-on-linode/"/>
    <id>http://yoursite.com/2016/12/16/zen-me-sheng-ji-ubuntu-nei-he-on-linode/</id>
    <published>2016-12-16T13:00:00.000Z</published>
    <updated>2020-08-04T07:29:12.116Z</updated>
    
    <content type="html"><![CDATA[<p>由于 Linode 后台可以选择启动的内核，在找到一个教程成功更新内核后，我很强烈的怀疑跟这里有关系，先把可以用的方式说一下。</p><p>更新到的内核是 4.9.0-999-generic，ubuntu 版本 16.10</p><a id="more"></a><ol><li><p>下载新内核</p><p> <a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/daily/current/" target="_blank" rel="noopener">Ubuntu 每日内核更新站点</a></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir tmp_kernel  // 创建一个临时目录</span><br><span class="line">cd tmp_kernel</span><br><span class="line"></span><br><span class="line"># 一个是linux-headers-xxxxx_amd64.deb结构命名的， 如果你是32位机器就选linux-headers-xxxxx_i386.deb， 下同</span><br><span class="line">wget http://kernel.ubuntu.com/~kernel-ppa/mainline/daily/current/linux-headers-4.9.0-999-generic_4.9.0-999.201612152101_amd64.deb</span><br><span class="line"># 这个是 linux-headers-xxxxx_all.deb结构命名的</span><br><span class="line">wget http://kernel.ubuntu.com/~kernel-ppa/mainline/daily/current/linux-headers-4.9.0-999_4.9.0-999.201612152101_all.deb</span><br><span class="line"># 这个是linux-image-xxxxx-_amd64.deb结构命名的</span><br><span class="line">wget http://kernel.ubuntu.com/~kernel-ppa/mainline/daily/current/linux-image-4.9.0-999-generic_4.9.0-999.201612152101_amd64.deb</span><br></pre></td></tr></table></figure><blockquote><p>以* -lowlatency- * 结构命名的内核，=， 可以 <a href="http://askubuntu.com/questions/126664/why-to-choose-low-latency-kernel-over-generic-or-realtime-ones" target="_blank" rel="noopener">看这里</a> , 大概是像录音设备之类的需要这种低延迟的内核？这个内核更费电， 对于笔记本或台式机还是用不着的。</p></blockquote></li><li><p>安装内核</p><p> 下载过来以后执行 dpkg -i *.deb (保证该目录下没有其他.deb， 要不然就一起被安装了), 再执行 sudo update-grub , 重启就可以了。</p></li><li><p>更换内核</p><p> 其实，用惯了 Windows 和 Mac 的，对这种升级方式很不理解。。。虽然很开放，但是很蛋疼。</p><ol><li>命令 uname -a 查看当前系统内核，确实不是自己想要的。</li><li>安装grub2组件  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install linux-image-virtual grub2</span><br></pre></td></tr></table></figure></li></ol><p> <strong>注意！远程窗口会显示Grub安装界面，要求你选择grub安装位置，你直接选择不安装即可。</strong></p><ol start="3"><li><p>查看默认系统内核版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /boot/vmlinuz*</span><br></pre></td></tr></table></figure></li><li><p>配置 grub 启动参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/default/grub</span><br><span class="line"></span><br><span class="line">// 将grub配置文件修改以下参数：</span><br><span class="line"></span><br><span class="line">GRUB_TIMEOUT=10</span><br><span class="line">GRUB_CMDLINE_LINUX=”console=ttyS0,19200n8″</span><br><span class="line">GRUB_DISABLE_LINUX_UUID=true</span><br><span class="line">GRUB_SERIAL_COMMAND=”serial –speed=19200 –unit=0 –word=8 –parity=no –stop=1″</span><br><span class="line">GRUB_TERMINAL=serial</span><br></pre></td></tr></table></figure></li><li><p>更新bootloader</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure></li><li><p>修改 Linode 后台启动内核选项，选择 grub2，如下图</p><p><img src="/images/grub2.png" alt="Linode 修改启动内核为 grub2"></p></li><li><p>至此，重启 VPS 后，uname -r 即可查看新的内核号。</p></li></ol></li></ol><p>参考链接：</p><p><a href="http://ju.outofmemory.cn/entry/114564" target="_blank" rel="noopener">Ubuntu内核升级的那些事儿</a></p><p><a href="http://since1989.org/linode/centos-ubuntu-kernel-linux-grub2.html" target="_blank" rel="noopener">linode更换Linux内核教程（独家）</a></p><p><a href="https://www.mobibrw.com/2013/312" target="_blank" rel="noopener">Ubuntu 下面清理无效内核的 脚本</a></p><p>当然啦，最重要的是下面这条啦！</p><p><a href="https://github.com/iMeiji/shadowsocks_install/wiki/%E5%BC%80%E5%90%AFTCP-BBR%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">开启TCP BBR拥塞控制算法</a></p><hr><p>昨晚上升级了下 Linode 上 Ubuntu 的内核，由于不懂 Linux 这部分的命令，看到<strong>内核</strong>两个字又很恐慌，所以就一直不行。。看着教程上短短的几行，自己的就是不出效果。。。<br>最终花了将近4个小时才搞定，reboot 了无数次。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于 Linode 后台可以选择启动的内核，在找到一个教程成功更新内核后，我很强烈的怀疑跟这里有关系，先把可以用的方式说一下。&lt;/p&gt;
&lt;p&gt;更新到的内核是 4.9.0-999-generic，ubuntu 版本 16.10&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="内核" scheme="http://yoursite.com/tags/%E5%86%85%E6%A0%B8/"/>
    
      <category term="Linode" scheme="http://yoursite.com/tags/Linode/"/>
    
      <category term="VPS" scheme="http://yoursite.com/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>解决 Bower 下载包很慢的方法</title>
    <link href="http://yoursite.com/2016/12/06/jie-jue-Bower-xia-zai-bao-hen-man-de-fang-fa/"/>
    <id>http://yoursite.com/2016/12/06/jie-jue-Bower-xia-zai-bao-hen-man-de-fang-fa/</id>
    <published>2016-12-06T03:00:00.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>在用 Bower 来下载包的时候，由于默认是从 GitHub 下载，所以有时候哪怕设置了代理，也可能速度不理想。<br>在网上发现了一个解决办法，是把 .git 的方式替换成 https 的方式<br>只需要运行以下命令即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global url.&quot;https://&quot;.insteadOf git://</span><br></pre></td></tr></table></figure><a id="more"></a><p>参考链接：<a href="http://stackoverflow.com/questions/15669091/bower-install-using-only-https" target="_blank" rel="noopener">Bower install using only https?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在用 Bower 来下载包的时候，由于默认是从 GitHub 下载，所以有时候哪怕设置了代理，也可能速度不理想。&lt;br&gt;在网上发现了一个解决办法，是把 .git 的方式替换成 https 的方式&lt;br&gt;只需要运行以下命令即可&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global url.&amp;quot;https://&amp;quot;.insteadOf git://&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="坑" scheme="http://yoursite.com/categories/%E5%9D%91/"/>
    
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
      <category term="Bower" scheme="http://yoursite.com/tags/Bower/"/>
    
      <category term="Https" scheme="http://yoursite.com/tags/Https/"/>
    
  </entry>
  
  <entry>
    <title>GitBook &amp; GitHub 的正确姿势</title>
    <link href="http://yoursite.com/2016/12/05/GitBook-link-GitHub%20de-zheng-que-zi-shi/"/>
    <id>http://yoursite.com/2016/12/05/GitBook-link-GitHub de-zheng-que-zi-shi/</id>
    <published>2016-12-05T13:38:40.000Z</published>
    <updated>2020-08-04T07:29:12.112Z</updated>
    
    <content type="html"><![CDATA[<p>为了把 GitBook 和 GitHub 连接起来，就尝试了一下。</p><p>本来 GitBook 的内容是单独存在网上的，虽然也是一个 git，但有独立的域名，且不在登陆 GitBook 的  GitHub 账户的仓库中。</p><p>因为 GitBook 的在线编辑器和本地编辑器用着都不爽，所以就想按照 GitHub 的仓库那样，能够找一个 Editor，用本地的 Git 客户端来维护。</p><p>花了2天的时间，分2次，总算是搞清楚了。</p><a id="more"></a><hr><p>![连接步骤](/images/GitBook &amp; GitHub 的正确姿势.png)</p><h3 id="连接步骤"><a href="#连接步骤" class="headerlink" title="连接步骤"></a>连接步骤</h3><ol><li><p>新建 GitHub 仓库</p></li><li><p>新建 GitBook 书籍</p></li><li><p>在 GitBook 上关联 GitHub<br>可以在 GitBook 的书籍 setting 中选择一个 GitHub 的仓库</p></li><li><p>在本地新建一个文件夹，当做书籍的目录</p></li><li><p>用各种工具在本地 clone GitHub 的仓库，那个 .git 的链接，选择上面新建的目录</p></li><li><p>在 4 新建的文件夹中写字，然后用各种姿势 commit &amp; push 到 GitHub</p></li><li><p>此时打开 GitBook 就能看到新写的内容了</p></li></ol><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ol start="0"><li><p>GitBook 可以读取 GitHub 的内容，但反过来不可以！！！<br>  所以只能写完了同步到 GitHub，但也只需要这么做，GitBook 会自动抓取，生成书籍。</p></li><li><p>每次添加一个新的文章时，需要先在 SUMMARY.md 中写好文章所显示的名字，及所在的层级</p></li><li><p>如果新建了一个 .md 文件，而内容为空，那么 GitBook 不会渲染这个页面</p></li><li><p>push 到 GitHub 后，GitBook 的显示可能有延迟！</p></li><li><p>GitBook 的在线编辑器和本地编辑器都很烂！</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了把 GitBook 和 GitHub 连接起来，就尝试了一下。&lt;/p&gt;
&lt;p&gt;本来 GitBook 的内容是单独存在网上的，虽然也是一个 git，但有独立的域名，且不在登陆 GitBook 的  GitHub 账户的仓库中。&lt;/p&gt;
&lt;p&gt;因为 GitBook 的在线编辑器和本地编辑器用着都不爽，所以就想按照 GitHub 的仓库那样，能够找一个 Editor，用本地的 Git 客户端来维护。&lt;/p&gt;
&lt;p&gt;花了2天的时间，分2次，总算是搞清楚了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
      <category term="GitBook" scheme="http://yoursite.com/tags/GitBook/"/>
    
      <category term="折腾" scheme="http://yoursite.com/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
</feed>
